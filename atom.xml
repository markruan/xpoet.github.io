<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XPoet Blog</title>
  
  <subtitle>代码如诗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xpoet.cn/"/>
  <updated>2020-06-09T09:00:00.514Z</updated>
  <id>https://xpoet.cn/</id>
  
  <author>
    <name>XPoet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>15个必须掌握的 JavaScript 数组方法</title>
    <link href="https://xpoet.cn/2020/06/15%E4%B8%AA%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84JavaScript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>https://xpoet.cn/2020/06/15%E4%B8%AA%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84JavaScript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-06-09T08:37:52.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，数组是一个特殊的变量，用于存储不同的元素。它具有一些内置属性和方法，可用于根据需要添加，删除，迭代或操作数。并且了解 JavaScript 数组方法可以提升你的开发技能。</p><p>在本文中，我们将介绍 15 种关于 JavaScript 的数组方法，这些方法可以帮助你正确地处理数据。</p><ul><li>some()</li><li>reduce()</li><li>Every()</li><li>map()</li><li>flat()</li><li>filter()</li><li>forEach()</li><li>findIndex()</li><li>find()</li><li>sort()</li><li>concat()</li><li>fill()</li><li>includes()</li><li>reverse()</li><li>flatMap()</li></ul><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>此方法为参数传递的函数测试数组。如果有一个元素与测试元素匹配，则返回 <code>true</code>，否则返回 <code>false</code>。</p><blockquote><p>译者注： <code>some()</code> 不会对空数组进行检测；<code>some()</code> 不会改变原始数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]</span><br><span class="line">myAwesomeArray.some(<span class="function"><span class="params">test</span> =&gt;</span> test === <span class="string">"d"</span>)</span><br><span class="line"><span class="comment">//-------&gt; Output : true</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>此方法接收一个函数作为累加器。它为数组中的每个元素依次执行回调函数，不包括数组中被删除或者从未被赋值的元素。函数应用于累加器，数组中的每个值最后只返回一个值。</p><blockquote><p>译者注：<code>reduce()</code> 方法接受四个参数：初始值（上一次回调的返回值），当前元素值，当前索引，原数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">myAwesomeArray.reduce(<span class="function">(<span class="params">total, value</span>) =&gt;</span> total * value)</span><br><span class="line"><span class="comment">// 1 * 2 * 3 * 4 * 5</span></span><br><span class="line"><span class="comment">//-------&gt; Output = 120</span></span><br></pre></td></tr></table></figure><h4 id="Every"><a href="#Every" class="headerlink" title="Every()"></a>Every()</h4><p>此方法是对数组中每项运行给定函数，如果数组的每个元素都与测试匹配，则返回 <code>true</code>，反之则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]</span><br><span class="line">myAwesomeArray.every(<span class="function"><span class="params">test</span> =&gt;</span> test === <span class="string">"d"</span>)</span><br><span class="line"><span class="comment">// -------&gt; Output : falseconst myAwesomeArray2 = ["a", "a", "a", "a", "a"]</span></span><br><span class="line">myAwesomeArray2.every(<span class="function"><span class="params">test</span> =&gt;</span> test === <span class="string">"a"</span>)</span><br><span class="line"><span class="comment">//-------&gt; Output : true</span></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>该方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。它按照原始数组元素顺序依次处理元素。</p><blockquote><p>译者注：map() 不会对空数组进行检测；map() 不会改变原始数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">myAwesomeArray.map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</span><br><span class="line"><span class="comment">//-------&gt; Output : 25</span></span><br><span class="line"><span class="comment">//                  16</span></span><br><span class="line"><span class="comment">//                  9</span></span><br><span class="line"><span class="comment">//                  4</span></span><br><span class="line"><span class="comment">//                  1</span></span><br></pre></td></tr></table></figure><h4 id="flat"><a href="#flat" class="headerlink" title="flat()"></a>flat()</h4><p>此方法创建一个新数组，其中包含子数组上的 <code>holden</code> 元素，并将其平整到新数组中。请注意，此方法只能进行一个级别的深度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br><span class="line">myAwesomeArray.flat()</span><br><span class="line"><span class="comment">//-------&gt; Output : [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>该方法接收一个函数作为参数。并返回一个新数组，该数组包含该数组的所有元素，作为参数传递的过滤函数对其返回 <code>true</code>。</p><blockquote><p>译者注：<code>filter()</code> 方法是对数据中的元素进行过滤，也就是说是不能修改原数组中的数据，只能读取原数组中的数据，<code>callback</code> 需要返回布尔值；为 <code>true</code> 的时候，对应的元素留下来；为 <code>false</code> 的时候，对应的元素过滤掉。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"john"</span> &#125;,  </span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Ali"</span> &#125;,  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Mass"</span> &#125;,  </span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">"Mass"</span> &#125;,]</span><br><span class="line">myAwesomeArray.filter(<span class="function"><span class="params">element</span> =&gt;</span> element.name === <span class="string">"Mass"</span>)</span><br><span class="line"><span class="comment">//-------&gt; Output : 0:&#123;id: 3, name: "Mass"&#125;,</span></span><br><span class="line"><span class="comment">//                  1:&#123;id: 4, name: "Mass"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>此方法用于调用数组的每个元素。并将元素传递给回调函数。</p><blockquote><p>译者注: <code>forEach()</code> 对于空数组是不会执行回调函数的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"john"</span> &#125;,  </span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Ali"</span> &#125;,  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Mass"</span> &#125;,]</span><br><span class="line">myAwesomeArray.forEach(<span class="function"><span class="params">element</span> =&gt;</span> <span class="built_in">console</span>.log(element.name))</span><br><span class="line"><span class="comment">//-------&gt; Output : john</span></span><br><span class="line"><span class="comment">//                  Ali</span></span><br><span class="line"><span class="comment">//                  Mass</span></span><br></pre></td></tr></table></figure><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h4><p>此方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。它为数组中的每个元素都调用一次函数执行，当数组中的元素在测试条件时返回 <code>true</code> 时, <code>findIndex()</code> 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。如果没有符合条件的元素返回 <code>-1</code>。</p><blockquote><p>译者注：<code>findIndex()</code> 对于空数组，函数是不会执行的， <code>findIndex()</code> 并没有改变数组的原始值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"john"</span> &#125;,  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Ali"</span> &#125;,  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Mass"</span> &#125;];</span><br><span class="line"></span><br><span class="line">myAwesomeArray.findIndex(<span class="function"><span class="params">element</span> =&gt;</span> element.id === <span class="number">3</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : 2</span></span><br><span class="line"></span><br><span class="line">myAwesomeArray.findIndex(<span class="function"><span class="params">element</span> =&gt;</span> element.id === <span class="number">7</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : -1</span></span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>此方法返回通过测试（函数内判断）的数组的第一个元素的值。<code>find()</code> 方法为数组中的每个元素都调用一次函数执行：当数组中的元素在测试条件时回 <code>true</code> 时, <code>find()</code> 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 <code>undefined</code>。</p><blockquote><p>译者注: <code>find()</code> 对于空数组，函数是不会执行的；<code>find()</code> 并没有改变数组的原始值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"john"</span> &#125;,  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">"Ali"</span> &#125;,  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">"Mass"</span> &#125;];</span><br><span class="line"></span><br><span class="line">myAwesomeArray.find(<span class="function"><span class="params">element</span> =&gt;</span> element.id === <span class="number">3</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : &#123;id: 3, name: "Mass"&#125;</span></span><br><span class="line"></span><br><span class="line">myAwesomeArray.find(<span class="function"><span class="params">element</span> =&gt;</span> element.id === <span class="number">7</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : undefined</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>此方法接收一个函数作为参数。它对数组的元素进行排序并返回它。也可以使用含有参数的 <code>sort()</code> 方法进行排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort from smallest to largest</span></span><br><span class="line">myAwesomeArray.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="comment">//  -------&gt; Output : [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort from largest to smallest</span></span><br><span class="line">myAwesomeArray.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line"><span class="comment">//-------&gt; Output : [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>此方法用于连接两个或多个数组/值，它不会改变现有的数组。而仅仅返回被连接数组的一个新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> myAwesomeArray2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line">myAwesomeArray.concat(myAwesomeArray2);</span><br><span class="line"><span class="comment">//-------&gt; Output : [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure><h4 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h4><p>此方法的作用是使用一个固定值来替换数组中的元素。该固定值可以是字母、数字、字符串、数组等等。它还有两个可选参数，表示填充起来的开始位置（默认为 <code>0</code>）与结束位置（默认为 <code>array.length</code>）。</p><blockquote><p>译者注：<code>fill()</code> 方法用于将一个固定值替换数组的元素。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// The first argument  (0) is the value</span></span><br><span class="line"><span class="comment">// The second argument (1) is the starting index</span></span><br><span class="line"><span class="comment">// The third argument  (3) is the ending index</span></span><br><span class="line">myAwesomeArray.fill(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : [1, 0, 0, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>此方法用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 <code>true</code>，否则返回 <code>false</code>。</p><blockquote><p>译者注：<code>includes()</code> 方法区分大小写。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">myAwesomeArray.includes(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : true</span></span><br><span class="line"></span><br><span class="line">myAwesomeArray.includes(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : false</span></span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>此方法用于颠倒数组中元素的顺序。第一个元素成为最后一个，最后一个元素将成为第一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="string">"e"</span>, <span class="string">"d"</span>, <span class="string">"c"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>];</span><br><span class="line">myAwesomeArray.reverse();</span><br><span class="line"><span class="comment">// -------&gt; Output : ['a', 'b', 'c', 'd', 'e']</span></span><br></pre></td></tr></table></figure><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h4><p>该方法将函数应用于数组的每个元素，然后将结果压缩为一个新数组。它在一个函数中结合了 <code>flat()</code> 和 <code>map()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>], [<span class="number">5</span>]];</span><br><span class="line">myAwesomeArray.flatMap(<span class="function"><span class="params">arr</span> =&gt;</span> arr * <span class="number">10</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : [10, 20, 30, 40, 50]</span></span><br><span class="line"><span class="comment">// With .flat() and .map()</span></span><br><span class="line">myAwesomeArray.flat().map(<span class="function"><span class="params">arr</span> =&gt;</span> arr * <span class="number">10</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 JavaScript 中，数组是一个特殊的变量，用于存储不同的元素。它具有一些内置属性和方法，可用于根据需要添加，删除，迭代或操作数。并且了解 JavaScript 数组方法可以提升你的开发技能。&lt;/p&gt;
&lt;p&gt;在本文中，我们将介绍 15 种关于 JavaScript 
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://xpoet.cn/tags/JavaScript/"/>
    
      <category term="数组" scheme="https://xpoet.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>中文文案排版指北</title>
    <link href="https://xpoet.cn/2020/05/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/"/>
    <id>https://xpoet.cn/2020/05/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/</id>
    <published>2020-05-06T14:00:17.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中文文案排版指北"><a href="#中文文案排版指北" class="headerlink" title="中文文案排版指北"></a>中文文案排版指北</h1><p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></p><a id="more"></a><h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入屋宽带有 10 Gbps，SSD 一共有 20 TB</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入屋宽带有 10Gbps，SSD 一共有 20TB</p></blockquote><p>例外：度 / 百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p><p>刚刚买了一部 iPhone， 好开心！</p></blockquote><h3 id="用-text-spacing-来挽救？"><a href="#用-text-spacing-来挽救？" class="headerlink" title="用 text-spacing 来挽救？"></a>用 <code>text-spacing</code> 来挽救？</h3><p>CSS Text Module Level 4 的 <a href="https://www.w3.org/TR/css-text-4/#text-spacing-property" target="_blank" rel="noopener"><code>text-spacing</code></a> 和 Microsoft 的 <a href="https://msdn.microsoft.com/library/ms531164(v=vs.85).aspx" target="_blank" rel="noopener"><code>-ms-text-autospace</code></a> 可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 macOS、iOS、Windows 等用户介面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p><p>德国队竟然战胜了巴西队！！！！！！！！</p><p>她竟然对你说「喵」？？！！</p><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全形和半形</a>』。</p><h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎！</p><p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎！</p><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这个蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这个蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全形数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其内容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其内容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其内容使用半角标点"></a>遇到完整的英文整句、特殊名词，其内容使用半角标点</h3><p>正确：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry, stay foolish.」</p><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry，stay foolish。」</p><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论内容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p><p>使用 GITHUB 登录</p><p>使用 Github 登录</p><p>使用 gitHub 登录</p><p>使用 gｲんĤЦ8 登录</p><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标淮的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p><p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a>并分配给相关同事。</p><p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>仓库</th><th>语言</th></tr></thead><tbody><tr><td><a href="https://github.com/vinta/paranoid-auto-spacing" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></td><td>JavaScript</td></tr><tr><td><a href="https://github.com/huei90/pangu.node" target="_blank" rel="noopener">huei90/pangu.node</a></td><td>Node.js</td></tr><tr><td><a href="https://github.com/huacnlee/auto-correct" target="_blank" rel="noopener">huacnlee/auto-correct</a></td><td>Ruby</td></tr><tr><td><a href="https://github.com/sparanoid/space-lover" target="_blank" rel="noopener">sparanoid/space-lover</a></td><td>PHP (WordPress)</td></tr><tr><td><a href="https://github.com/NauxLiu/auto-correct" target="_blank" rel="noopener">nauxliu/auto-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/jxlwqq/chinese-typesetting" target="_blank" rel="noopener">jxlwqq/chinese-typesetting</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/hotoo/pangu.vim" target="_blank" rel="noopener">hotoo/pangu.vim</a></td><td>Vim</td></tr><tr><td><a href="https://github.com/sparanoid/grunt-auto-spacing" target="_blank" rel="noopener">sparanoid/grunt-auto-spacing</a></td><td>Node.js (Grunt)</td></tr><tr><td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk" target="_blank" rel="noopener">hjiang/scripts/add-space-between-latin-and-cjk</a></td><td>Python</td></tr><tr><td><a href="https://github.com/hustcc/hint" target="_blank" rel="noopener">hustcc/hint</a></td><td>Python</td></tr><tr><td><a href="https://github.com/studygolang/autocorrect" target="_blank" rel="noopener">studygolang/autocorrect</a></td><td>Go</td></tr></tbody></table><h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table><thead><tr><th>网站</th><th>文案</th><th>UGC</th></tr></thead><tbody><tr><td><a href="https://www.apple.com/cn/" target="_blank" rel="noopener">Apple 中国</a></td><td>是</td><td>N/A</td></tr><tr><td><a href="https://www.apple.com/hk/" target="_blank" rel="noopener">Apple 香港</a></td><td>是</td><td>N/A</td></tr><tr><td><a href="https://www.apple.com/tw/" target="_blank" rel="noopener">Apple 台湾</a></td><td>是</td><td>N/A</td></tr><tr><td><a href="https://www.microsoft.com/zh-cn/" target="_blank" rel="noopener">Microsoft 中国</a></td><td>是</td><td>N/A</td></tr><tr><td><a href="https://www.microsoft.com/zh-hk/" target="_blank" rel="noopener">Microsoft 香港</a></td><td>是</td><td>N/A</td></tr><tr><td><a href="https://www.microsoft.com/zh-tw/" target="_blank" rel="noopener">Microsoft 台湾</a></td><td>是</td><td>N/A</td></tr><tr><td><a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a></td><td>是</td><td>N/A</td></tr><tr><td><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a></td><td>是</td><td>是</td></tr><tr><td><a href="https://apple4us.com/" target="_blank" rel="noopener">Apple4us</a></td><td>是</td><td>N/A</td></tr><tr><td><a href="https://ruby-china.org/" target="_blank" rel="noopener">Ruby China</a></td><td>是</td><td>标题达成</td></tr><tr><td><a href="https://phphub.org/" target="_blank" rel="noopener">PHPHub</a></td><td>是</td><td>标题达成</td></tr><tr><td><a href="https://sspai.com/" target="_blank" rel="noopener">少数派</a></td><td>是</td><td>N/A</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.thoughtco.com/guidelines-for-using-capital-letters-1691724" target="_blank" rel="noopener">Guidelines for Using Capital Letters - ThoughtCo.</a></li><li><a href="https://en.wikipedia.org/wiki/Letter_case" target="_blank" rel="noopener">Letter case - Wikipedia</a></li><li><a href="https://en.oxforddictionaries.com/grammar/punctuation" target="_blank" rel="noopener">Punctuation - Oxford Dictionaries</a></li><li><a href="https://owl.english.purdue.edu/owl/section/1/6/" target="_blank" rel="noopener">Punctuation - The Purdue OWL</a></li><li><a href="https://www.wikihow.com/Use-English-Punctuation-Correctly" target="_blank" rel="noopener">How to Use English Punctuation Correctly - wikiHow</a></li><li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">格式 - openSUSE</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全形和半形 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F" target="_blank" rel="noopener">引号 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F" target="_blank" rel="noopener">疑问惊叹号 - 维基百科</a></li></ul><p><strong><em>注：本文转载 <a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="noopener">https://github.com/sparanoid/chinese-copywriting-guidelines</a></em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;中文文案排版指北&quot;&gt;&lt;a href=&quot;#中文文案排版指北&quot; class=&quot;headerlink&quot; title=&quot;中文文案排版指北&quot;&gt;&lt;/a&gt;中文文案排版指北&lt;/h1&gt;&lt;p&gt;统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。&lt;/p&gt;
&lt;h2 id=&quot;空格&quot;&gt;&lt;a href=&quot;#空格&quot; class=&quot;headerlink&quot; title=&quot;空格&quot;&gt;&lt;/a&gt;空格&lt;/h2&gt;&lt;p&gt;「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。&lt;/p&gt;
&lt;p&gt;与大家共勉之。」——&lt;a href=&quot;https://github.com/vinta/pangu.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vinta/paranoid-auto-spacing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术教程" scheme="https://xpoet.cn/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="文案排版" scheme="https://xpoet.cn/tags/%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>千呼万唤始出来，Hexo 主题 ILS 正式发布</title>
    <link href="https://xpoet.cn/2020/04/%E5%8D%83%E5%91%BC%E4%B8%87%E5%94%A4%E5%A7%8B%E5%87%BA%E6%9D%A5%EF%BC%8CHexo%E4%B8%BB%E9%A2%98ILS%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/"/>
    <id>https://xpoet.cn/2020/04/%E5%8D%83%E5%91%BC%E4%B8%87%E5%94%A4%E5%A7%8B%E5%87%BA%E6%9D%A5%EF%BC%8CHexo%E4%B8%BB%E9%A2%98ILS%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/</id>
    <published>2020-04-07T13:55:14.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<p>如你所见，ILS 界面设计十分简洁、清爽，但功能齐全、不失优雅，这正是 ILS 的开发理念。也曾尝试过花里胡哨，发现不仅容易审美疲劳，而且背驰了写博客的初衷，记录生活、展示文字，应该才是搭建博客网站的最终追求，为此 ILS 应运而生。简约大气、不缺美感、突出内容、化繁为简、配置简单、长期维护，如果你也喜欢或认可这些主题特点，一起来折腾吧~</p><p>关于主题名称 <strong>“ILS”</strong> 的由来：在主题开发之初，作者想到的几个名字都被已被用，词穷了，后来干脆将名字取自 <strong>“I Like Simple「我喜欢简单」”</strong> 首字母，就是这么简单。</p><a id="more"></a><p>同时，非常欢迎感兴趣的同学 Pull Request 加入到该主题的开发中，共同打造极致 ILS。</p><h2 id="Features-功能特性"><a href="#Features-功能特性" class="headerlink" title="Features 功能特性"></a>Features 功能特性</h2><h3 id="Completed-已完成"><a href="#Completed-已完成" class="headerlink" title="Completed 已完成"></a>Completed 已完成</h3><ul><li><input checked="" disabled="" type="checkbox"> 恰到好处的留白，简约大气；</li><li><input checked="" disabled="" type="checkbox"> 响应式设计，适配多种终端；</li><li><input checked="" disabled="" type="checkbox"> 日间/夜间模式自由切换；</li><li><input checked="" disabled="" type="checkbox"> 多种代码高亮方案；</li><li><input checked="" disabled="" type="checkbox"> 语言国际化，支持中/英文；</li><li><input checked="" disabled="" type="checkbox"> 内置多款评论插件；</li><li><input checked="" disabled="" type="checkbox"> 支持全站文章搜索；</li><li><input checked="" disabled="" type="checkbox"> 支持文章顶置；</li><li><input checked="" disabled="" type="checkbox"> 代码块一键复制；</li><li><input checked="" disabled="" type="checkbox"> TOC 目录结构；</li><li><input checked="" disabled="" type="checkbox"> RSS 订阅；</li><li><input checked="" disabled="" type="checkbox"> 网站 UV 和 PV 统计；</li><li><input checked="" disabled="" type="checkbox"> 文章阅读次数统计；</li><li><input checked="" disabled="" type="checkbox"> 页面滚动百分比提示；</li><li><input checked="" disabled="" type="checkbox"> 一键快速回到顶部；</li><li><input checked="" disabled="" type="checkbox"> 代码精简高效，去 jQuery 化；</li></ul><h3 id="Unfinished-未完成"><a href="#Unfinished-未完成" class="headerlink" title="Unfinished 未完成"></a>Unfinished 未完成</h3><ul><li><input disabled="" type="checkbox"> 文章版权信息；</li><li><input disabled="" type="checkbox"> 文章字数统计；</li><li><input disabled="" type="checkbox"> 文章阅读时长；</li><li><input disabled="" type="checkbox"> 文章支持显示公式；</li><li><input disabled="" type="checkbox"> 文章支持显示公式；</li><li><input disabled="" type="checkbox"> 在线更改字体和字号</li><li><input disabled="" type="checkbox"> 打赏功能</li><li><input disabled="" type="checkbox"> ……</li></ul><h2 id="Get-start-快速开始"><a href="#Get-start-快速开始" class="headerlink" title="Get start 快速开始"></a>Get start 快速开始</h2><p>在开始使用主题之前，强烈建议你先阅读 「Easy Hexo 团队」撰写的 Hexo 教程！<br>链接：<a href="https://easyhexo.com/" target="_blank" rel="noopener">https://easyhexo.com/</a></p><h3 id="Install-安装"><a href="#Install-安装" class="headerlink" title="Install 安装"></a>Install 安装</h3><ul><li>使用 Git SSH<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depath=1 git@github.com:XPoet/hexo-theme-ils.git themes/ils</span><br></pre></td></tr></table></figure></li><li>下载主题 release 版本<br>请优先下载 <a href="https://github.com/XPoet/hexo-theme-ils/releases" target="_blank" rel="noopener">最新 release 版本</a>，master 分支无法保证稳定。<br>下载后解压到 Hexo 博客目录下 themes 文件夹里面并重命名为 <code>ils</code>。</li></ul><h3 id="Enable-启用"><a href="#Enable-启用" class="headerlink" title="Enable 启用"></a>Enable 启用</h3><p>Modify <code>theme</code> setting in <code>_config.yml</code> to <code>ils</code>.<br>找到博客目录下的 <code>_config.yml</code> 文件，将 <code>theme</code> 设置为 <code>ils</code> 。</p><h3 id="Update-更新"><a href="#Update-更新" class="headerlink" title="Update 更新"></a>Update 更新</h3><ul><li>使用 Git SSH<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/ils</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li>下载 <a href="https://github.com/XPoet/hexo-theme-ils/releases" target="_blank" rel="noopener">主题最新 release 版本</a><br>下载后解压到 Hexo 博客目录下 themes 文件夹里面并重命名为 <code>ils</code>。</li></ul><h2 id="How-to-use-如何使用"><a href="#How-to-use-如何使用" class="headerlink" title="How to use 如何使用"></a>How to use 如何使用</h2><h3 id="Configuration-配置"><a href="#Configuration-配置" class="headerlink" title="Configuration 配置"></a>Configuration 配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># theme basic info</span></span><br><span class="line"><span class="comment"># 主题基本信息，无需改动。</span></span><br><span class="line"><span class="attr">theme_info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ILS</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.1</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">XPoet</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/XPoet/hexo-theme-ils</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># favicon</span></span><br><span class="line"><span class="comment"># 网站图标，请在 "/source/images/" 目录，换成自己的即可。</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">images/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># avatar</span></span><br><span class="line"><span class="comment"># 头像图片，请在 "/source/images/" 目录，换成自己的即可。</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">images/avatar.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># navigation menu</span></span><br><span class="line"><span class="comment"># 导航菜单，如需新增导航，请按下面格式填写，同时需要添加对应的 Hexo 页面。</span></span><br><span class="line"><span class="comment"># 新增页面，请参考往下的教程："Add page 添加页面"。</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="comment"># About: /about</span></span><br><span class="line">  <span class="comment"># Links: /links</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RSS</span></span><br><span class="line"><span class="comment"># RSS 订阅，如需启用，请先安装 Hexo 插件：hexo-generator-feed。</span></span><br><span class="line"><span class="attr">rss:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># comment plugin</span></span><br><span class="line"><span class="comment"># 评论插件，主题内置了 Valine 和 Gitalk，只能使用其中一款，如果 enable 都设为了 true，将使用 Valine。</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Valine https://github.com/xCss/Valine</span></span><br><span class="line">  <span class="comment"># 如何使用 Valine 请参考：https://github.com/xCss/Valine</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">appid:</span>   <span class="comment"># leancloud appid</span></span><br><span class="line">    <span class="attr">appkey:</span>  <span class="comment"># leancloud appkey</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="string">['nick',</span> <span class="string">'mail'</span><span class="string">,</span> <span class="string">'link'</span><span class="string">]</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">😜尽情吐槽吧~</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Gitalk https://github.com/gitalk/gitalk</span></span><br><span class="line">  <span class="comment"># 如何使用 Gitalk 请参考：https://github.com/gitalk/gitalk</span></span><br><span class="line">  <span class="attr">gitalk:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">github_id:</span>      <span class="comment"># GitHub repo owner</span></span><br><span class="line">    <span class="attr">repository:</span>     <span class="comment"># Repository name to store issues</span></span><br><span class="line">    <span class="attr">client_id:</span>      <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">    <span class="attr">client_secret:</span>  <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># website count</span></span><br><span class="line"><span class="comment"># 网站计数</span></span><br><span class="line"><span class="attr">website_count:</span></span><br><span class="line">  <span class="comment"># busuanzi http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line">  <span class="attr">busuanzi_count:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">site_uv:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">site_pv:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">page_pv:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="comment"># 本地搜索，如需启用，请先安装 Hexo 插件：hexo-generator-searchdb。</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="comment"># 输入关键字后的触发搜索，可选 自动 auto 或 手动 manual。</span></span><br><span class="line">  <span class="comment"># auto 每输入或删除一个字符后，自动触发搜索。</span></span><br><span class="line">  <span class="comment"># manual 每输入或删除一个字符后，需要按回车键触发搜索。</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span>  <span class="comment"># values: auto | manual</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="comment"># 转义 HTML 字符串为可读字符串。</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="comment"># 在页面加载时预加载搜索数据</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Code Copy</span></span><br><span class="line"><span class="comment"># 代码复制，复制风格可选 default | flat | mac。</span></span><br><span class="line"><span class="attr">code_copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span>  <span class="comment"># values: default | flat | mac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sidebar tools</span></span><br><span class="line"><span class="comment"># 侧边栏工具，位置可选 left | right。</span></span><br><span class="line"><span class="attr">side_tools:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span>  <span class="comment"># values: left | right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># back to top</span></span><br><span class="line"><span class="comment"># 回到顶部，位置可选 left | right。</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span>  <span class="comment"># values: left | right</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># 文章目录结构</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="comment"># 给文章目录自动加上序号。</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="comment"># 是否展开所有目录</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># magic</span></span><br><span class="line"><span class="comment"># magic 为 v1.1.0 增加的新特性，如果启用，主题样式将发生较大的改变。 </span></span><br><span class="line"><span class="attr">magic:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sidebar:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fixed:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span>  <span class="comment"># values: left | right</span></span><br></pre></td></tr></table></figure><h3 id="Comment-评论"><a href="#Comment-评论" class="headerlink" title="Comment 评论"></a>Comment 评论</h3><p>主题内置了 Valine 和 Gitalk 两款评论插件，你只能使用其他一款，如果两款评论插件的 enable 都设为了 true，将使用 Valine。</p><h4 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h4><p>前往 <a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">https://github.com/xCss/Valine</a> 查看 Valine 如何使用，获取必要的参数，填写在配置文件里。</p><h4 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h4><ol><li>在自己的 GitHub 账号下创建新的 OAuth App，链接：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a> ，Homepage URL 和 Authorization callback URL 均填写自己的域名即可。</li><li>在自己的 GitHub 账号下创建新的 repository 并打开 Issues，用于存储评论内容。</li><li>把自己的 GitHub 用户名称、repository 名称 、OAuth App 的 Client ID 、Client Secret 分别填写在主题配置文件里。</li></ol><p>前往 <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">https://github.com/gitalk/gitalk</a> 查看 Gitalk 更多信息。</p><h3 id="Post-top-文章顶置"><a href="#Post-top-文章顶置" class="headerlink" title="Post top 文章顶置"></a>Post top 文章顶置</h3><p>实现文章顶置功能，需在 Hexo 博客根目录下安装插件 <strong>hexo-generator-index-pin-top</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index-pin-top</span><br></pre></td></tr></table></figure><p>然后在 <code>_posts</code> 文件夹里的需要顶置的文章页添加 <code>top</code> 属性，<strong>top</strong> 值越大，顶置越靠前，参考如下。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 千呼万唤始出来，Hexo 主题 ILS 正式发布</span><br><span class="line">date: 2020-04-07 21:55:14</span><br><span class="line">tags: [Hexo]</span><br><span class="line">categories: [Hexo]</span><br><span class="line">top: 9999</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="Add-page-添加页面"><a href="#Add-page-添加页面" class="headerlink" title="Add page 添加页面"></a>Add page 添加页面</h3><p><strong>Hexo 初始化没有 about、links、tag、category 等页面，需要自己手动创建。</strong><br>例如创建「关于」页面：</p><ol><li><p>在 Hexo 博客目录下执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure></li><li><p>创建成功后，打开博客目录下 <code>/source/about/index.md</code> 文件，即可填写内容。<br>如下示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-03-19 14:59:53</span><br><span class="line">comments: true</span><br><span class="line">---</span><br><span class="line"><span class="section">## About me</span></span><br><span class="line"><span class="bullet">- </span>XPoet「 X诗人 」... </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h2 id="Feedback-反馈"><a href="#Feedback-反馈" class="headerlink" title="Feedback 反馈"></a>Feedback 反馈</h2><p>在使用该主题过程中，如果遇到问题，请仔细阅读使用文档，或者给作者提 <code>issue</code>。</p><h2 id="Licence-许可"><a href="#Licence-许可" class="headerlink" title="Licence 许可"></a>Licence 许可</h2><p><a href="https://github.com/XPoet/hexo-theme-ils/blob/master/LICENSE" target="_blank" rel="noopener">MIT</a> Copyright (c) 2020 XPoet</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如你所见，ILS 界面设计十分简洁、清爽，但功能齐全、不失优雅，这正是 ILS 的开发理念。也曾尝试过花里胡哨，发现不仅容易审美疲劳，而且背驰了写博客的初衷，记录生活、展示文字，应该才是搭建博客网站的最终追求，为此 ILS 应运而生。简约大气、不缺美感、突出内容、化繁为简、配置简单、长期维护，如果你也喜欢或认可这些主题特点，一起来折腾吧~&lt;/p&gt;
&lt;p&gt;关于主题名称 &lt;strong&gt;“ILS”&lt;/strong&gt; 的由来：在主题开发之初，作者想到的几个名字都被已被用，词穷了，后来干脆将名字取自 &lt;strong&gt;“I Like Simple「我喜欢简单」”&lt;/strong&gt; 首字母，就是这么简单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://xpoet.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://xpoet.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>macOS 使用 Navicat 连接 MySQL 数据库</title>
    <link href="https://xpoet.cn/2019/07/macOS%E4%BD%BF%E7%94%A8Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://xpoet.cn/2019/07/macOS%E4%BD%BF%E7%94%A8Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2019-07-11T10:26:05.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><ul><li><p>从 MySQL 官网下载安装包进行安装，链接：<a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">https://www.mysql.com/downloads/</a></p></li><li><p>使用终端命令安装，需提前安装 Homebrew。</p><ol><li>安装 Homebrew<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></li><li>安装 MySQL<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><h3 id="打开-MySQL-服务"><a href="#打开-MySQL-服务" class="headerlink" title="打开 MySQL 服务"></a>打开 MySQL 服务</h3></li></ol></li><li><p>在终端使用命令 <code>mysql --version</code> 查看 MySQL 版本，出现具体的版本号，表示 MySQL 成功安装，如下图。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/61049925-52fd1980-a418-11e9-9558-7b4dee6c68b8.png" alt="mysql-version"></p></li><li><p>在终端使用命令 <code>bash mysql.server start</code> 来打开 MySQL 服务。如下图，表示 MySQL 服务启动成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash mysql.server start</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/61096487-5a5d0b00-a48a-11e9-8715-7d3bb3a6d4da.png" alt="start-mysql"></p></li></ul><h3 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h3><p>MySQL 默认的 root 账户不带密码，使用命令 <code>mysql -uroot</code> 可直接登录，如下图，表示登录成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/61114682-6fa25b80-a4c3-11e9-899b-a3c9033da25e.png" alt="mysql-version"></p><p>因为默认的 root 账户不带密码，安全起见，我们给 root 账户设置密码。（例如设置密码：123456）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for &#39;root&#39;@&#39;localhost&#39;&#x3D;&#39;123456&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/61114990-11c24380-a4c4-11e9-9437-e56f6b406357.png" alt="mysql-modification-password"></p><p>密码设置成功后，再次登录时需要输入密码，如下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p&#39;123456&#39;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/78643782-637aeb80-78e7-11ea-9b17-4fa3ce8b1ba3.png" alt="mysql"></p><h3 id="Navicat-连接-MySQL"><a href="#Navicat-连接-MySQL" class="headerlink" title="Navicat 连接 MySQL"></a>Navicat 连接 MySQL</h3><p>点击 Navicat Premium 左上角的”连接”，选择” MySQL “，新建一个 MySQL 连接，参数如下，默认端口 <strong>3306</strong>。<br><img src="https://user-images.githubusercontent.com/24516169/78645106-860e0400-78e9-11ea-9191-d7cd64447072.png" alt="mysql"></p><p>注：</p><ul><li>可使用命令 <code>lsof -i:3306</code> 查看 <strong>3306</strong> 端口是否被占用。</li><li>如果点击”<strong>测试连接</strong>“发现连接不上，出现报错信息：<br><code>2059 - Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded: dlopen(../Frameworks/caching_.......</code><br>错误原因是因为 MySQL 5.7 版本之后，默认验证方式由原来的 <strong>mysql_native_password</strong> 改成了 <strong>caching_sha2_password</strong>。只需把验证方式修改成原来的，就能连接上了。<br>修改方法：登录 MySQL，执行命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-MySQL&quot;&gt;&lt;a href=&quot;#安装-MySQL&quot; class=&quot;headerlink&quot; title=&quot;安装 MySQL&quot;&gt;&lt;/a&gt;安装 MySQL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从 MySQL 官网下载安装包进行安装，链接：&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://xpoet.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://xpoet.cn/tags/MySQL/"/>
    
      <category term="Navicat" scheme="https://xpoet.cn/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>Angular Material Dialog 拖拽功能的实现</title>
    <link href="https://xpoet.cn/2019/06/Angular-Material-Dialog-%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xpoet.cn/2019/06/Angular-Material-Dialog-%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-06-28T08:38:51.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>本案例使用的 Angular 7.x 版本，Material 7.x 版本，但不限于此版本。</p><h4 id="新建Angular指令"><a href="#新建Angular指令" class="headerlink" title="新建Angular指令"></a>新建Angular指令</h4><p>新建指令命令：<br><code>ng generate directive dialog-draggable</code></p><a id="more"></a><p>指令中拖拽功能代码实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, HostListener, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MatDialogContainer, MatDialogRef &#125; <span class="keyword">from</span> <span class="string">'@angular/material'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Subscription, fromEvent &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; takeUntil &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Position &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[dialog-draggable]'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DialogDraggableDirective <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _subscription: Subscription;</span><br><span class="line"></span><br><span class="line">  mouseStart: Position;</span><br><span class="line"></span><br><span class="line">  mouseDelta: Position;</span><br><span class="line"></span><br><span class="line">  offset: Position;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> matDialogRef: MatDialogRef&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> container: MatDialogContainer</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.offset = <span class="keyword">this</span>._getOffset();</span><br><span class="line">    <span class="keyword">this</span>._updatePosition(<span class="keyword">this</span>.offset.y, <span class="keyword">this</span>.offset.x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">'mousedown'</span>, [<span class="string">'$event'</span>])</span><br><span class="line">  onMouseDown(event: MouseEvent) &#123;</span><br><span class="line">    <span class="keyword">this</span>.mouseStart = &#123; x: event.pageX, y: event.pageY &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mouseup$ = fromEvent(<span class="built_in">document</span>, <span class="string">'mouseup'</span>);</span><br><span class="line">    <span class="keyword">this</span>._subscription = mouseup$.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.onMouseup());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mousemove$ = fromEvent(<span class="built_in">document</span>, <span class="string">'mousemove'</span>)</span><br><span class="line">      .pipe(takeUntil(mouseup$))</span><br><span class="line">      .subscribe(<span class="function">(<span class="params">e: MouseEvent</span>) =&gt;</span> <span class="keyword">this</span>.onMouseMove(e));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._subscription.add(mousemove$);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onMouseMove(event: MouseEvent) &#123;</span><br><span class="line">    <span class="keyword">this</span>.mouseDelta = &#123; x: (event.pageX - <span class="keyword">this</span>.mouseStart.x), y: (event.pageY - <span class="keyword">this</span>.mouseStart.y) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._updatePosition(<span class="keyword">this</span>.offset.y + <span class="keyword">this</span>.mouseDelta.y, <span class="keyword">this</span>.offset.x + <span class="keyword">this</span>.mouseDelta.x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onMouseup() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._subscription) &#123;</span><br><span class="line">      <span class="keyword">this</span>._subscription.unsubscribe();</span><br><span class="line">      <span class="keyword">this</span>._subscription = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mouseDelta) &#123;</span><br><span class="line">      <span class="keyword">this</span>.offset.x += <span class="keyword">this</span>.mouseDelta.x;</span><br><span class="line">      <span class="keyword">this</span>.offset.y += <span class="keyword">this</span>.mouseDelta.y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _updatePosition(top: <span class="built_in">number</span>, left: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.matDialogRef.updatePosition(&#123;</span><br><span class="line">      top: top + <span class="string">'px'</span>,</span><br><span class="line">      left: left + <span class="string">'px'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _getOffset(): Position &#123;</span><br><span class="line">    <span class="keyword">const</span> box = <span class="keyword">this</span>.container[<span class="string">'_elementRef'</span>].nativeElement.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x: box.left + pageXOffset,</span><br><span class="line">      y: box.top + pageYOffset</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在全局的CSS样式文件添加下面的CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[dialog-draggable]</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">24px</span> -<span class="number">24px</span> <span class="number">20px</span> -<span class="number">24px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#283593</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: move;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>在Dialog组件中使用dialog-draggable指令即可实现窗口拖拽，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">mat-dialog-title</span> <span class="attr">dialog-draggable</span>&gt;</span></span><br><span class="line">  Angular Material Dialog Draggable</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h4&gt;&lt;p&gt;本案例使用的 Angular 7.x 版本，Material 7.x 版本，但不限于此版本。&lt;/p&gt;
&lt;h4 id=&quot;新建Angular指令&quot;&gt;&lt;a href=&quot;#新建Angular指令&quot; class=&quot;headerlink&quot; title=&quot;新建Angular指令&quot;&gt;&lt;/a&gt;新建Angular指令&lt;/h4&gt;&lt;p&gt;新建指令命令：&lt;br&gt;&lt;code&gt;ng generate directive dialog-draggable&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular" scheme="https://xpoet.cn/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://xpoet.cn/tags/Angular/"/>
    
      <category term="Material" scheme="https://xpoet.cn/tags/Material/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 利用随机数和时间戳生成一个不重复的字符串（UUID）</title>
    <link href="https://xpoet.cn/2018/11/TypeScript%E5%88%A9%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8C%E6%97%B6%E9%97%B4%E6%88%B3%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88UUID%EF%BC%89/"/>
    <id>https://xpoet.cn/2018/11/TypeScript%E5%88%A9%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8C%E6%97%B6%E9%97%B4%E6%88%B3%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88UUID%EF%BC%89/</id>
    <published>2018-11-21T09:44:02.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此方法非常简单，非常高效…</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 巧妙利用随机数和时间戳生成一个不重复的字符串（UUID）</span></span><br><span class="line"><span class="comment"> * @param randomLength&#123;number&#125; 截取随机数的长度</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125; 不重复的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUuid = (randomLength: <span class="built_in">number</span> = <span class="number">5</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>, randomLength) + <span class="built_in">Date</span>.now()).toString(<span class="number">36</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;此方法非常简单，非常高效…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="UUID" scheme="https://xpoet.cn/tags/UUID/"/>
    
  </entry>
  
  <entry>
    <title>macOS 配置多个 Git 账户的 SSH-Key</title>
    <link href="https://xpoet.cn/2018/07/macOS%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit%E8%B4%A6%E6%88%B7%E7%9A%84SSH-Key/"/>
    <id>https://xpoet.cn/2018/07/macOS%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit%E8%B4%A6%E6%88%B7%E7%9A%84SSH-Key/</id>
    <published>2018-07-16T08:33:01.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>请确保在你的Mac上已安装Git。安装Git请参考：<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">传送门</a><br>在终端输入命令<code>$ git --version</code>， 能打印出具体的版本号，表示Git正确安装。</p><h4 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h4><p>本文以配置<strong>GitHub</strong>和<strong>GitLab</strong>为案例，将生成两对公共/私有rsa密钥对，<strong>rsa_github</strong> 和 <strong>rsa_gitlab</strong>。</p><h5 id="在本地创建SSH-Key"><a href="#在本地创建SSH-Key" class="headerlink" title="在本地创建SSH-Key"></a>在本地创建SSH-Key</h5><p>1、打开终端，<code>$ cd ~</code>，进入到当前用户目录下。  </p><p>2、使用命令<code>$ ssh-keygen -t rsa -C &quot;i@itpoet.cn&quot;</code>生成公共/私有rsa密钥对。此时会看到终端提示输入要保存密钥的文件名，为了做区分，我们给文件名加个后缀，本例第一个rsa密钥对：<strong>rsa_github</strong>。<br>接着会看到终端提示输入密码，敲两次 <em><strong>Enter回车键</strong></em> 则不需要密码。最终在 <em><strong>.ssh 文件夹</strong></em> 里生成 <em><strong>rsa_github</strong></em> 和 <em><strong>rsa_github.pub</strong></em> 两个文件，如图：<br><img src="https://user-images.githubusercontent.com/24516169/43447613-6a4544ae-94de-11e8-8e91-07d6ef1e45e3.png" alt="生成rsa_github"><br><img src="https://user-images.githubusercontent.com/24516169/43447618-6add7116-94de-11e8-9986-8b90bf50e098.png" alt="rsa_github和rsa_github.pub密钥对"><br><strong>注意</strong>：在 <strong>第2步</strong> 执行完后，如果用户目录下没有生成 <em><strong>.ssh 文件夹</strong></em> ，那我们需要手动创建。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir .ssh</span><br><span class="line">$ <span class="built_in">cd</span> .ssh</span><br></pre></td></tr></table></figure><p>成功创建完 <em><strong>.ssh 文件夹</strong></em> 之后，再执行 <strong>第2步</strong> 操作。  </p><p>3、创建本例的第二个rsa密钥对，<strong>rsa_gitlab</strong>。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"a@itpoet.cn"</span></span><br></pre></td></tr></table></figure><p>如图：<br><img src="https://user-images.githubusercontent.com/24516169/43447615-6a959e4a-94de-11e8-8f23-8fd2128ba6a7.png" alt="生成rsa_github"><br><img src="https://user-images.githubusercontent.com/24516169/43447619-6b104b72-94de-11e8-9a4b-4febc6458e4c.png" alt="rsa_github和rsa_github.pub密钥对">  </p><p>4、为ssh添加config配置文件，在 <em><strong>.ssh文件夹</strong></em> 下，新建config文件。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ touch config</span><br></pre></td></tr></table></figure><p>config文件创建好之后，将其内容修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  User itPoet_github</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;rsa_github</span><br><span class="line"></span><br><span class="line">Host gitlab.com</span><br><span class="line">  User itPoet_gitlab</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;rsa_gitlab</span><br></pre></td></tr></table></figure><p>5、配置 <strong>.gitconfig</strong> 文件。使用如下命令将会在用户目录下自动创建 <strong>.gitconfig</strong> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ git config --global user.name <span class="string">"itPoet_github"</span></span><br><span class="line">$ git config --global user.email <span class="string">"i@itpoet.cn"</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在 <strong>第4步</strong> 执行完后，如果用户目录下没有生成 <em><strong>.gitconfig</strong></em> 文件 ，那我们需要手动创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ touch .gitconfig</span><br></pre></td></tr></table></figure><p>最后将.gitconfig文件的内容修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name &#x3D; itPoet_github</span><br><span class="line">    email &#x3D; i@itpoet.cn</span><br><span class="line">[user]</span><br><span class="line">    name &#x3D; itPoet_gitlab</span><br><span class="line">    email &#x3D; a@itpoet.cn</span><br></pre></td></tr></table></figure><h5 id="在对应的Git网站添加SSH密钥设置"><a href="#在对应的Git网站添加SSH密钥设置" class="headerlink" title="在对应的Git网站添加SSH密钥设置"></a>在对应的Git网站添加SSH密钥设置</h5><p>1、 <strong>GitHub</strong><br>settings –&gt; SSH and GPG keys –&gt; New SSH Key<br>打开 <strong>rsa_github.pub</strong>，将里面的内容复制到 <strong>Key</strong> 输入框中，如图：<br>如图：<br><img src="https://user-images.githubusercontent.com/24516169/43447624-6c25549e-94de-11e8-9584-527e2100964c.png" alt="github.com-add-new-ssh-key-1"><br><img src="https://user-images.githubusercontent.com/24516169/43447626-6c56a026-94de-11e8-9530-3ba0accc6a86.png" alt="github.com-add-new-ssh-key-2">  </p><p>2、 <strong>GitLab</strong><br>Profile –&gt; SSH keys<br>打开 <strong>rsa_gitlab.pub</strong>，将里面的内容复制到 <strong>Key</strong> 输入框中，如图：<br>如图：<br><img src="https://user-images.githubusercontent.com/24516169/43447628-6ca0b468-94de-11e8-95e5-377c7b85b97c.png" alt="gitlab.com-add-new-ssh-key-1"><br><img src="https://user-images.githubusercontent.com/24516169/43447626-6c56a026-94de-11e8-9530-3ba0accc6a86.png" alt="gitlab.com-add-new-ssh-key-2">  </p><p><strong>至此，在Mac下配置多个Git账户的SSH-Key参考教程也完成，同理，我们还可以配置Coding、码云等。现在让我们来体验使用SSH提交代码吧~~</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h4&gt;&lt;p&gt;请确保在你的Mac上已安装Git。安装Git请参考：&lt;a href=&quot;https://git-scm.com/book/zh
      
    
    </summary>
    
    
      <category term="技术教程" scheme="https://xpoet.cn/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Mac" scheme="https://xpoet.cn/tags/Mac/"/>
    
      <category term="Git" scheme="https://xpoet.cn/tags/Git/"/>
    
      <category term="SSH-Key" scheme="https://xpoet.cn/tags/SSH-Key/"/>
    
  </entry>
  
  <entry>
    <title>再见，也许就是再也不见</title>
    <link href="https://xpoet.cn/2018/04/%E5%86%8D%E8%A7%81%EF%BC%8C%E4%B9%9F%E8%AE%B8%E5%B0%B1%E6%98%AF%E5%86%8D%E4%B9%9F%E4%B8%8D%E8%A7%81/"/>
    <id>https://xpoet.cn/2018/04/%E5%86%8D%E8%A7%81%EF%BC%8C%E4%B9%9F%E8%AE%B8%E5%B0%B1%E6%98%AF%E5%86%8D%E4%B9%9F%E4%B8%8D%E8%A7%81/</id>
    <published>2018-04-21T15:13:08.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="散文集" scheme="https://xpoet.cn/categories/%E6%95%A3%E6%96%87%E9%9B%86/"/>
    
    
      <category term="散文" scheme="https://xpoet.cn/tags/%E6%95%A3%E6%96%87/"/>
    
      <category term="再见" scheme="https://xpoet.cn/tags/%E5%86%8D%E8%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>不朽的失眠</title>
    <link href="https://xpoet.cn/2018/03/%E4%B8%8D%E6%9C%BD%E7%9A%84%E5%A4%B1%E7%9C%A0/"/>
    <id>https://xpoet.cn/2018/03/%E4%B8%8D%E6%9C%BD%E7%9A%84%E5%A4%B1%E7%9C%A0/</id>
    <published>2018-03-20T10:03:26.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记得第一次见这篇文章出现在初中的语文书上，确确实实引起了我的共鸣，自此念念不忘，忽然感觉此刻很应景，收录此文。</p></blockquote><p>他落榜了！一千二百年前。榜纸那么大那么长，然而，就是没有他的名字。啊！竟单单容不下他的名字“张继”那两个字。  </p><p>考中的人，姓名一笔一划写在榜单上，天下皆知。奇怪的是，在他的感觉里，考不上，才更是天下皆知，这件事，令他羞惭沮丧。</p><p>离开京城吧！议好了价，他踏上小舟。本来预期的情节不是这样的，本来也许有插花游街、马蹄轻疾的风流，有衣锦还乡、袍笏加身的荣耀。然而，寒窗十年，虽有他的悬梁刺股，琼林宴上，却并没有他的一角席次。</p><p>船行似风。</p><p>江枫如火，在岸上举着冷冷的爝焰，这天黄昏，船，来到了苏州。但，这美丽的古城，对张继而言，也无非是另一个触动愁情的地方。</p><p>如果说白天有什么该做的事，对一个读书人而言，就是读书吧！夜晚呢？夜晚该睡觉以便养足精神第二天再读。然而，今夜是一个忧伤的夜晚。今夜，在异乡，在江畔，在秋冷雁高的季节，容许一个落魄的士子放肆他的忧伤。江水，可以无限度地收纳古往今来一切不顺遂之人的泪水。</p><p>这样的夜晚，残酷地坐着，亲自听自己的心正被什么东西啮食而一分一分消失的声音。并且眼睁睁地看自己的生命如劲风中的残灯，所有的力气都花在抗拒，油快尽了，微火每一刹那都可能熄灭。然而，可恨的是，终其一生，它都不曾华美灿烂过啊！</p><p>江水睡了，船睡了，船家睡了，岸上的人也睡了。惟有他，张继，睡不着。夜愈深，愈清醒，清醒如败叶落余的枯树，似梁燕飞去的空巢。</p><p>起先，是睡眠排拒的他。(也罢，这半生，不是处处都遭排拒吗？)而后，是他在赌气，好，无眠就无眠，长夜独醒，就干脆彻底来为自已验伤，有何不可？</p><p>月亮西斜了，一副意兴阑珊的样子。有乌啼，粗嗄嘶哑，是乌鸦。那月亮被它一声声叫得更黯淡了。江岸上，想已霜结千草。夜空里，星子亦如清霜，一粒粒零落凄绝。</p><p>在须角在眉梢，他感觉，似乎也森然生凉，那阴阴不怀好意的凉气啊，正等待凝成早秋的霜花，来贴缀他惨淡少年的容颜。</p><p>江上渔火二三，他们在干什么？在捕鱼吧？或者，虾？他们也会有撒空网的时候吗？世路艰辛啊！即使潇洒的捕鱼的，也不免投身在风波里吧？然而，能辛苦工作，也是一种幸福吧！今夜，月自光其光，霜自冷其冷，安心的人在安眠，工作的人去工作。只有我张继，是天不管地不收的一个，是既没有权利去工作，也没福气去睡眠的一个……</p><p>钟声响了，这奇怪的深夜的寒山寺钟声。一般寺庙，都是暮鼓晨钟，寒山寺庙敲“夜半钟”，用以惊世。钟声贴着水面传来，在别人，那声音只是睡梦中模糊的衬底音乐。在他，却一记一记都撞击在心坎上，正中要害。钟声那么美丽，但钟声自己到底是痛还是不痛呢？既然失眠，他推枕而起，摸黑写下“枫桥夜泊”四字。然后，就把其余二十八字照抄下来。我说“照抄”，是因为那二十八个字在他心底已像白墙上的黑字一样分明凸显：</p><p><strong>月落乌啼霜满天，江枫渔火对愁眠。</strong></p><p><strong>姑苏城外寒山寺，夜半钟声到客船。</strong></p><p>感谢上苍，如果没有落第的张继，诗的历史上便少了一首好诗，我们的某一种心情，就没有人来为我们一语道破。</p><p>一千二百年过去了，那张长长的榜单上（就是张继挤不进去的那纸金榜）曾经出现过的状元是谁？哈！管他是谁。真正被记得的名字是“落第者张继”。有人会记得那一届状元披红游街的盛景吗？不！我们只记得秋夜的客船上那个失意的人，以及他那场不朽的失眠。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记得第一次见这篇文章出现在初中的语文书上，确确实实引起了我的共鸣，自此念念不忘，忽然感觉此刻很应景，收录此文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他落榜了！一千二百年前。榜纸那么大那么长，然而，就是没有他的名字。啊！竟单单容不下他的名字“张
      
    
    </summary>
    
    
      <category term="文章收录" scheme="https://xpoet.cn/categories/%E6%96%87%E7%AB%A0%E6%94%B6%E5%BD%95/"/>
    
    
      <category term="枫桥夜泊" scheme="https://xpoet.cn/tags/%E6%9E%AB%E6%A1%A5%E5%A4%9C%E6%B3%8A/"/>
    
  </entry>
  
  <entry>
    <title>基于Node.js搭建Socket聊天室</title>
    <link href="https://xpoet.cn/2018/02/nodejs-build-socket-chartroom/"/>
    <id>https://xpoet.cn/2018/02/nodejs-build-socket-chartroom/</id>
    <published>2018-02-07T06:06:12.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>可以毫不夸张的说，Node.js的出现带动了整个前端界的繁荣发展，自此进入百花齐放，百家争鸣的时代。时至今天，我们能用Node.js实现很多依靠传统服务器端编程语言才能实现的事，甚至更加简便、更加高效。<br>本案例使用Node.js的net模块，建立服务端与客户端的Socket连接，简单实现了客户端广播消息通信和点对点通信。</p><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><h6 id="server-js-服务端"><a href="#server-js-服务端" class="headerlink" title="server.js 服务端"></a>server.js 服务端</h6><p>项目下的server.js是服务端的执行文件，用于创建服务端的Socket服务，监听指定端口；接收客户端传过来的数据，解析数据并按照数据中附带的协议进行广播消息通信或点对点通信。<br><strong>具体代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Socket聊天室 - server 服务端</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义clients（键值对集合），用于存储所有的客户端连接，通过用户名去索引客户端socket</span></span><br><span class="line"><span class="keyword">let</span> clients = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = net.createServer(<span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端登入</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">signin</span>(<span class="params">clientDataContent</span>) </span>&#123;</span><br><span class="line">        clientDataContent = <span class="built_in">JSON</span>.parse(clientDataContent);</span><br><span class="line">        <span class="keyword">let</span> username = clientDataContent.from;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果clients（客户端 socket 集合）中有1个以上的成员，就广播通知所有人谁谁上线了，除了他本身</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(clients).length) &#123;</span><br><span class="line">            <span class="keyword">let</span> onlineNotice = &#123;  <span class="comment">// 组成上线通知消息数据格式</span></span><br><span class="line">                protocol: <span class="string">'online'</span>,</span><br><span class="line">                online: username,</span><br><span class="line">                onlineCount: <span class="built_in">Object</span>.keys(clients).length + <span class="number">1</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 遍历 clients ，给除了自身的所有客户端发送消息</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> username <span class="keyword">in</span> clients) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clients.hasOwnProperty(username)) &#123;</span><br><span class="line">                    <span class="keyword">let</span> noticeClient = clients[username];</span><br><span class="line">                    noticeClient.write(<span class="built_in">JSON</span>.stringify(onlineNotice));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将新连接的客户端socket存储于clients</span></span><br><span class="line">        clients[username] = socket;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务端打印上线提示消息</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`欢迎 <span class="subst">$&#123;socket.remoteAddress&#125;</span>:<span class="subst">$&#123;socket.remotePort&#125;</span>【<span class="subst">$&#123;username&#125;</span>】，加入聊天室，当前在线：<span class="subst">$&#123;<span class="built_in">Object</span>.keys(clients).length&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广播消息通信</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span>(<span class="params">clientDataContent</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 广播出去消息数据格式 json</span></span><br><span class="line">        <span class="keyword">let</span> sendClientData = <span class="built_in">JSON</span>.parse(clientDataContent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历clients对象（for in），给所有的客户端socket广播消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> username <span class="keyword">in</span> clients) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clients.hasOwnProperty(username)) &#123;</span><br><span class="line">                <span class="keyword">let</span> client = clients[username];</span><br><span class="line">                client.write(<span class="built_in">JSON</span>.stringify(sendClientData));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p2p 点对点通信</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p2p</span>(<span class="params">clientDataContent</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> p2pClientData = <span class="built_in">JSON</span>.parse(clientDataContent);</span><br><span class="line">        <span class="comment">// 给指定的客户端发送消息</span></span><br><span class="line">        clients[p2pClientData.to].write(<span class="built_in">JSON</span>.stringify(p2pClientData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给每一个连接服务端的客户端socket注册data事件</span></span><br><span class="line">    socket.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 对客户端传过来的数据chunk（json数据）进行序列化</span></span><br><span class="line">            <span class="keyword">let</span> clientDataContent = chunk.toString().trim();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取协议</span></span><br><span class="line">            <span class="keyword">let</span> protocol = <span class="built_in">JSON</span>.parse(clientDataContent).protocol;</span><br><span class="line">            <span class="keyword">switch</span> (protocol) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'signin'</span>:</span><br><span class="line">                    signin(clientDataContent);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'broadcast'</span>:</span><br><span class="line">                    broadcast(clientDataContent);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'p2p'</span>:</span><br><span class="line">                    p2p(clientDataContent);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    socket.write(<span class="string">'错误！未能识别的通信协议！'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            socket.write(<span class="string">'出现错误了哦~'</span>);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给每一个连接服务端的客户端socket注册error事件，如果连接中断，则触发此事件</span></span><br><span class="line">    socket.on(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 在客户端对象中，将连接中断的那个客户端删除</span></span><br><span class="line">        <span class="keyword">let</span> deletekey = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历clients对象，找到下线的socket，并将其删除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> username <span class="keyword">in</span> clients) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clients.hasOwnProperty(username)) &#123;</span><br><span class="line">                <span class="keyword">let</span> client = clients[username];</span><br><span class="line">                <span class="keyword">if</span> (socket === client) deletekey = username;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> clients[deletekey];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 广播通知所有人，谁谁下线了</span></span><br><span class="line">        <span class="keyword">let</span> offlineNotice = &#123;  <span class="comment">// 组成下线通知消息数据格式</span></span><br><span class="line">            protocol: <span class="string">'offline'</span>,</span><br><span class="line">            offline: deletekey,</span><br><span class="line">            onlineCount: <span class="built_in">Object</span>.keys(clients).length</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> username <span class="keyword">in</span> clients) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clients.hasOwnProperty(username)) &#123;</span><br><span class="line">                <span class="keyword">let</span> noticeClient = clients[username];</span><br><span class="line">                noticeClient.write(<span class="built_in">JSON</span>.stringify(offlineNotice));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// server 消息</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;deletekey&#125;</span> 下线了，当前在线：<span class="subst">$&#123;<span class="built_in">Object</span>.keys(clients).length&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听指定端口</span></span><br><span class="line"><span class="keyword">let</span> port = <span class="number">2018</span>;</span><br><span class="line">server.listen(port, (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;port&#125;</span>端口被占用！`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`服务器端正常启动，正在监听<span class="subst">$&#123;port&#125;</span>端口`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="client-js-客户端"><a href="#client-js-客户端" class="headerlink" title="client.js 客户端"></a>client.js 客户端</h6><p>项目下的client.js是客户端的执行文件，用于创建客户端的Socket服务。将用户输入的内容按特定的格式组成数据结构发给服务端，同时打印出服务端指定的内容。<br><strong>具体代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Socket聊天室 - 客户端 client</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(process.stdin, process.stdout);</span><br><span class="line"></span><br><span class="line">rl.question(<span class="string">'请输入聊天昵称：'</span>, (nickname) =&gt; &#123;</span><br><span class="line">    nickname = nickname.trim();</span><br><span class="line">    <span class="keyword">if</span> (!nickname) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'昵称不能为空！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建与服务端的连接</span></span><br><span class="line">    <span class="comment">// 设置正确的服务端的ip地址和端口</span></span><br><span class="line">    <span class="keyword">let</span> server = net.connect(&#123;<span class="attr">port</span>: <span class="number">2018</span>, <span class="attr">host</span>: <span class="string">'127.0.0.1'</span>&#125;, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 登入操作</span></span><br><span class="line">        <span class="keyword">let</span> user = &#123;</span><br><span class="line">            protocol: <span class="string">'signin'</span>,</span><br><span class="line">            <span class="keyword">from</span>: nickname</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 往服务端传送数据</span></span><br><span class="line">        server.write(<span class="built_in">JSON</span>.stringify(user));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`【系统通知】已成功加入聊天室，尽情畅聊吧~`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听服务端发送过来的数据</span></span><br><span class="line">        server.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> serverDataContent = <span class="built_in">JSON</span>.parse(chunk.toString().trim());</span><br><span class="line">                <span class="keyword">let</span> protocol = serverDataContent.protocol;</span><br><span class="line">                <span class="keyword">switch</span> (protocol) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'online'</span>:</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">`\n【系统通知】欢迎：<span class="subst">$&#123;serverDataContent.online&#125;</span>，加入聊天室，当前在线人数：<span class="subst">$&#123;serverDataContent.onlineCount&#125;</span>\n`</span>);</span><br><span class="line">                        rl.prompt();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'offline'</span>:</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">`\n【系统通知】<span class="subst">$&#123;serverDataContent.offline&#125;</span>下线了，当前在线人数：<span class="subst">$&#123;serverDataContent.onlineCount&#125;</span>\n`</span>);</span><br><span class="line">                        rl.prompt();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'broadcast'</span>:</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">`\n[@所有人] <span class="subst">$&#123;serverDataContent.<span class="keyword">from</span>&#125;</span>&gt; <span class="subst">$&#123;serverDataContent.message&#125;</span>\n`</span>);</span><br><span class="line">                        rl.prompt();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'p2p'</span>:</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">`\n[@<span class="subst">$&#123;serverDataContent.to&#125;</span>] <span class="subst">$&#123;serverDataContent.<span class="keyword">from</span>&#125;</span>&gt; <span class="subst">$&#123;serverDataContent.message&#125;</span>\n`</span>);</span><br><span class="line">                        rl.prompt();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        server.write(<span class="string">'错误！未能识别的通信协议！'</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                server.write(<span class="string">'出现错误了哦~'</span>);</span><br><span class="line">                <span class="keyword">throw</span> error;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        rl.setPrompt(nickname + <span class="string">'&gt; '</span>);  <span class="comment">// 此时没有写入控制台</span></span><br><span class="line">        rl.prompt(); <span class="comment">// 写入控制台</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入一行内容敲回车</span></span><br><span class="line">        rl.on(<span class="string">'line'</span>, (line) =&gt; &#123;</span><br><span class="line">            line = line.toString().trim();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 内容： user1:我只跟你说话  表示，客户端用户只跟user1通信</span></span><br><span class="line">            <span class="comment">// 根据客户端用户输入的内容按“:”分割成两部分</span></span><br><span class="line">            <span class="keyword">let</span> arrString = line.split(<span class="string">':'</span>);</span><br><span class="line">            <span class="keyword">let</span> sendServerData = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 组成往服务端发送的数据格式</span></span><br><span class="line">            <span class="keyword">if</span> (arrString.length === <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 点对点</span></span><br><span class="line">                sendServerData = &#123;</span><br><span class="line">                    protocol: <span class="string">'p2p'</span>,</span><br><span class="line">                    <span class="keyword">from</span>: nickname,</span><br><span class="line">                    to: arrString[<span class="number">0</span>],</span><br><span class="line">                    message: arrString[<span class="number">1</span>]</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 广播消息</span></span><br><span class="line">                sendServerData = &#123;</span><br><span class="line">                    protocol: <span class="string">'broadcast'</span>,</span><br><span class="line">                    <span class="keyword">from</span>: nickname,</span><br><span class="line">                    message: line</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 往服务端发送数据</span></span><br><span class="line">            server.write(<span class="built_in">JSON</span>.stringify(sendServerData));</span><br><span class="line">            rl.prompt(); <span class="comment">// 写入控制台</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        rl.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h5><p>目前已实现：客户端广播消息通信、点对点通信。</p><h5 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h5><ol><li>启动服务端，<code>$ node server.js</code><br><img src="https://user-images.githubusercontent.com/24516169/36706538-325fc724-1ba5-11e8-8596-08b28f52ecc2.jpg" alt="启动服务端"></li><li>启动第一个客户端，<code>$ node client.js</code><br><img src="https://user-images.githubusercontent.com/24516169/36706534-27154c7c-1ba5-11e8-8c36-f0478296563d.jpg" alt="启动客户端"></li><li>启动第二个客户端，<code>$ node client.js</code></li><li>……</li></ol><h5 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h5><p><img src="https://user-images.githubusercontent.com/24516169/36706486-f24b8e48-1ba4-11e8-8627-f236d924330d.gif" alt="Demo演示gif"></p><h5 id="项目下载"><a href="#项目下载" class="headerlink" title="项目下载"></a>项目下载</h5><p>本案例源代码托管于GitHub，下载：<a href="https://github.com/XPoet/node.js-chartroom" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;可以毫不夸张的说，Node.js的出现带动了整个前端界的繁荣发展，自此进入百花齐放，百家争鸣的时代。时至今天，我们能用Node.js实现很多
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Node.js" scheme="https://xpoet.cn/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>CSS 元素垂直居中的几种常用方法</title>
    <link href="https://xpoet.cn/2018/02/CSS%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://xpoet.cn/2018/02/CSS%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2018-02-02T08:54:40.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>子绝父相：子元素绝对定位，父元素相对定位。</p><h4 id="不知道子元素高度和父元素高度的情况"><a href="#不知道子元素高度和父元素高度的情况" class="headerlink" title="不知道子元素高度和父元素高度的情况"></a>不知道子元素高度和父元素高度的情况</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parentElement</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.childElement</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="知道子元素高度和父元素高度的情况"><a href="#知道子元素高度和父元素高度的情况" class="headerlink" title="知道子元素高度和父元素高度的情况"></a>知道子元素高度和父元素高度的情况</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parentElement</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.childElement</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子元素相对定位"><a href="#子元素相对定位" class="headerlink" title="子元素相对定位"></a>子元素相对定位</h3><p>父元素设置了高度，而且父元素里面只有一个子元素，可使用子元素相对定位。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parentElement</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: xxpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.childElement</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-flex"><a href="#CSS3-flex" class="headerlink" title="CSS3 flex"></a>CSS3 flex</h3><p>如果不考虑低版本浏览器兼容性，用CSS3的flex布局就非常简单咯。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parentElement</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;子绝父相&quot;&gt;&lt;a href=&quot;#子绝父相&quot; class=&quot;headerlink&quot; title=&quot;子绝父相&quot;&gt;&lt;/a&gt;子绝父相&lt;/h3&gt;&lt;p&gt;子绝父相：子元素绝对定位，父元素相对定位。&lt;/p&gt;
&lt;h4 id=&quot;不知道子元素高度和父元素高度的情况&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="https://xpoet.cn/tags/CSS/"/>
    
      <category term="垂直居中" scheme="https://xpoet.cn/tags/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>使用ES6新特性实现数组去重</title>
    <link href="https://xpoet.cn/2018/01/es6-array-eliminate-redundancy/"/>
    <id>https://xpoet.cn/2018/01/es6-array-eliminate-redundancy/</id>
    <published>2018-01-17T14:18:40.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<p>数组去重，对于前端开发者来说家常便饭的事，更是初学者必须掌握的知识，面试经常会考。</p><p>数组去重相关的方法，网上已有很多，大多使用了ES6以前的方法，本文对于不作赘述。但随着各大浏览器对ES6的支持性越来越好，以及ES6新特性深入人心，更何况作为一名前端工程师，我们应该顺应时代潮流，推动JavaScript发展，所以，尽情地拥抱ES6吧。</p><p>本文讲解使用ES6新特性实现数组去重的一种新方法，代码及其简短又高效。  </p><h4 id="JavaScript代码："><a href="#JavaScript代码：" class="headerlink" title="JavaScript代码："></a>JavaScript代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @param arr 传入的参数：带有重复项的数组</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @param oldArr 带有重复项的旧数组</span></span><br><span class="line"><span class="comment">* @param newArr 去除重复项之后的新数组</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">let</span> oldArr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(oldArr));</span><br><span class="line"><span class="built_in">console</span>.log(newArr);  <span class="comment">// [1, 2, 3, 4, 9, 0, NaN]</span></span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><h5 id="Set对象"><a href="#Set对象" class="headerlink" title="Set对象"></a>Set对象</h5><p>Set对象允许存储任何类型的唯一值，无论是原始值或者是对象引用。它可以是任何类型的单个值的集合。Set中的元素只会出现一次，即Set中的元素是唯一的。<br><code>语法：new Set([iterable]);</code><br>参数：iterable，如果传递一个可迭代对象(包括 Array，Map，Set，String，TypedArray，arguments 对象等等)，它的所有元素将被添加到新的 Set中。如果不指定此参数或其值为null，则新的Set为空。</p><h5 id="Set对象例子"><a href="#Set对象例子" class="headerlink" title="Set对象例子"></a>Set对象例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testArr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="keyword">let</span> setTestArr = <span class="keyword">new</span> <span class="built_in">Set</span>(testArr);</span><br><span class="line"><span class="built_in">console</span>.log(setTestArr);  <span class="comment">// Set(6) &#123;1, 2, 3, 4, NaN, undefined&#125;</span></span><br></pre></td></tr></table></figure><p><img src="http://www.www.www" alt="Set对象例子"></p><h5 id="from对象"><a href="#from对象" class="headerlink" title="from对象"></a>from对象</h5><p>Array.from()方法从一个类似数组或可迭代的对象(包括 Array，Map，Set，String，TypedArray，arguments 对象等等) 中创建一个新的数组实例。</p><h5 id="from对象例子"><a href="#from对象例子" class="headerlink" title="from对象例子"></a>from对象例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testArr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="keyword">let</span> setTestArr = <span class="keyword">new</span> <span class="built_in">Set</span>(testArr);</span><br><span class="line"><span class="built_in">console</span>.log(setTestArr);  <span class="comment">// &#123;1, 2, 3, 4, NaN, undefined&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = <span class="built_in">Array</span>.from(setTestArr);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);  <span class="comment">// [1, 2, 3, 4, NaN, undefined]</span></span><br></pre></td></tr></table></figure><p><img src="http://www.www.www" alt="from对象例子"></p><p><strong>使用ES6实现数组去重，就是如此简单，快去试试吧~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组去重，对于前端开发者来说家常便饭的事，更是初学者必须掌握的知识，面试经常会考。&lt;/p&gt;
&lt;p&gt;数组去重相关的方法，网上已有很多，大多使用了ES6以前的方法，本文对于不作赘述。但随着各大浏览器对ES6的支持性越来越好，以及ES6新特性深入人心，更何况作为一名前端工程师，我们应该顺应时代潮流，推动JavaScript发展，所以，尽情地拥抱ES6吧。&lt;/p&gt;
&lt;p&gt;本文讲解使用ES6新特性实现数组去重的一种新方法，代码及其简短又高效。  &lt;/p&gt;
&lt;h4 id=&quot;JavaScript代码：&quot;&gt;&lt;a href=&quot;#JavaScript代码：&quot; class=&quot;headerlink&quot; title=&quot;JavaScript代码：&quot;&gt;&lt;/a&gt;JavaScript代码：&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* @param arr 传入的参数：带有重复项的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;* */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.from(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;(arr));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="数组去重" scheme="https://xpoet.cn/tags/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    
      <category term="ES6" scheme="https://xpoet.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>使用gulp搭建前端自动化工作流环境（简易版）</title>
    <link href="https://xpoet.cn/2017/11/%E4%BD%BF%E7%94%A8Gulp%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81%EF%BC%88%E7%AE%80%E6%98%93%E7%89%88%EF%BC%89/"/>
    <id>https://xpoet.cn/2017/11/%E4%BD%BF%E7%94%A8Gulp%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81%EF%BC%88%E7%AE%80%E6%98%93%E7%89%88%EF%BC%89/</id>
    <published>2017-11-30T03:18:48.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文通过简单且实用的案例，讲解使用gulp搭建前端自动化工作流环境详细步骤，带领大家快速入门。</p></blockquote><h3 id="什么是gulp？"><a href="#什么是gulp？" class="headerlink" title="什么是gulp？"></a>什么是gulp？</h3><p>来自官网的简介：Automate and enhance your workflow. gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something.  </p><p>大致意思是讲gulp是一款自动化构建工具，可用于增强你的开发工作流程，提高工作效率！前端界的友友们，这个工具可不要错过了哟~</p><p>了解更多信息，请前往： <a href="https://gulpjs.com/" target="_blank" rel="noopener">gulp官网</a> 、 <a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">gulp中文网</a>  </p><h3 id="gulp优点"><a href="#gulp优点" class="headerlink" title="gulp优点"></a>gulp优点</h3><ul><li><strong>易于使用</strong> 通过代码优于配置的策略，gulp 让简单的任务简单，复杂的任务可管理。</li><li><strong>构建快速</strong> 利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。</li><li><strong>插件高质</strong> gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</li><li><strong>易于学习</strong> 通过最少的 API，掌握 gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>gulp依赖Node.js，参考本教程的朋友们，请先在本地环境安装好Node.js，并确认Node.js、npm可正常使用。</strong></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="第一步-新建项目根文件夹-例：gulp-demo-，并在项目根目录下使用npm安装必要的包"><a href="#第一步-新建项目根文件夹-例：gulp-demo-，并在项目根目录下使用npm安装必要的包" class="headerlink" title="第一步 新建项目根文件夹(例：gulp-demo)，并在项目根目录下使用npm安装必要的包"></a>第一步 新建项目根文件夹(例：gulp-demo)，并在项目根目录下使用npm安装必要的包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp gulp-less gulp-concat gulp-cssnano gulp-uglify gulp-htmlmin browser-sync --save-dev</span><br></pre></td></tr></table></figure><p>本案例使用的gulp插件介绍：</p><ul><li><strong>gulp-less</strong> 将less编译成css</li><li><strong>gulp-concat</strong> 将多个JavaScript合并</li><li><strong>gulp-cssnano</strong> css压缩</li><li><strong>gulp-uglify</strong> JavaScript压缩并混淆</li><li><strong>gulp-htmlmin</strong> html压缩</li><li><strong>browser-sync</strong> 多浏览器同步操作</li></ul><h4 id="第二步-在项目根文件夹-例：gulp-demo-下创建相关的文件结构"><a href="#第二步-在项目根文件夹-例：gulp-demo-下创建相关的文件结构" class="headerlink" title="第二步 在项目根文件夹(例：gulp-demo)下创建相关的文件结构"></a>第二步 在项目根文件夹(例：gulp-demo)下创建相关的文件结构</h4><h5 id="src-gulp编译之前的源文件"><a href="#src-gulp编译之前的源文件" class="headerlink" title="src [gulp编译之前的源文件]"></a>src [gulp编译之前的源文件]</h5><ul><li><strong>css</strong> 我们在此处编写css文件</li><li><strong>img</strong> 我们在此处放置图片文件</li><li><strong>js</strong> 我们在此处编写css文件</li><li><strong>index1.html</strong> </li><li><strong>index2.html</strong></li><li><strong>…….</strong></li></ul><h5 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h5><p>通过npm安装的包及其依赖包的库，自动生成文件夹。</p><h5 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h5><p>gulp的入口文件，我们在此处编写相关任务代码。</p><h5 id="dist-gulp编译之后的文件，即我们最终要得到文件"><a href="#dist-gulp编译之后的文件，即我们最终要得到文件" class="headerlink" title="dist [gulp编译之后的文件，即我们最终要得到文件]"></a>dist [gulp编译之后的文件，即我们最终要得到文件]</h5><ul><li><strong>css</strong> </li><li><strong>img</strong></li><li><strong>js</strong></li><li><strong>index.html</strong></li></ul><h5 id="项目目录结构图示"><a href="#项目目录结构图示" class="headerlink" title="项目目录结构图示"></a>项目目录结构图示</h5><p><img src="http://ojzaff7fe.bkt.clouddn.com/gulp%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg" alt="项目目录结构图示"></p><h4 id="第三步-在gulpfile-js文件里编写具体的任务代码"><a href="#第三步-在gulpfile-js文件里编写具体的任务代码" class="headerlink" title="第三步 在gulpfile.js文件里编写具体的任务代码"></a>第三步 在gulpfile.js文件里编写具体的任务代码</h4><h5 id="载入所需要的模块"><a href="#载入所需要的模块" class="headerlink" title="载入所需要的模块"></a>载入所需要的模块</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;   <span class="comment">// 启用JavaScript严格模式 </span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"><span class="keyword">var</span> cssnano = <span class="built_in">require</span>(<span class="string">'gulp-cssnano'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>);</span><br></pre></td></tr></table></figure><h5 id="less编译、压缩"><a href="#less编译、压缩" class="headerlink" title="less编译、压缩"></a>less编译、压缩</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义LESS编译、压缩的任务：css</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'src/css/*.less'</span>, <span class="string">'!src/css/_*.less'</span>])</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(cssnano())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</span><br><span class="line">        .pipe(browserSync.reload(&#123;</span><br><span class="line">            stream: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="JavaScript合并、压缩、混淆"><a href="#JavaScript合并、压缩、混淆" class="headerlink" title="JavaScript合并、压缩、混淆"></a>JavaScript合并、压缩、混淆</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义多个JavaScript文件合并、压缩混淆的任务：js</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'src/js/*.js'</span>)</span><br><span class="line">        .pipe(concat(<span class="string">'index.js'</span>)) <span class="comment">// JS合并之后，文件命名为index.js</span></span><br><span class="line">        .pipe(uglify())  <span class="comment">// JS压缩混淆</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</span><br><span class="line">        .pipe(browserSync.reload(&#123;</span><br><span class="line">            stream: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="将src文件夹下img图片复制到dist文件夹下img"><a href="#将src文件夹下img图片复制到dist文件夹下img" class="headerlink" title="将src文件夹下img图片复制到dist文件夹下img"></a>将src文件夹下img图片复制到dist文件夹下img</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义image复制的任务：img</span></span><br><span class="line">gulp.task(<span class="string">'img'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'src/img/*.*'</span>)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/img'</span>))</span><br><span class="line">        .pipe(browserSync.reload(&#123;</span><br><span class="line">            stream: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="html代码压缩"><a href="#html代码压缩" class="headerlink" title="html代码压缩"></a>html代码压缩</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义HTML压缩的任务：html</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'src/*.html'</span>)</span><br><span class="line">        .pipe(htmlmin(&#123;<span class="attr">collapseWhitespace</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</span><br><span class="line">        .pipe(browserSync.reload(&#123;</span><br><span class="line">            stream: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="多浏览器同步操作，开启gulp监视文件变动"><a href="#多浏览器同步操作，开启gulp监视文件变动" class="headerlink" title="多浏览器同步操作，开启gulp监视文件变动"></a>多浏览器同步操作，开启gulp监视文件变动</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义浏览器同步操作服务的任务：browserSync</span></span><br><span class="line">gulp.task(<span class="string">'browserSync'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    browserSync(&#123;</span><br><span class="line">        server: &#123;</span><br><span class="line">            baseDir: [<span class="string">'dist'</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, bs</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(bs.options.getIn([<span class="string">"urls"</span>, <span class="string">"local"</span>]));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 开启gulp监视</span></span><br><span class="line">    gulp.watch(<span class="string">'src/css/*.less'</span>, [<span class="string">'css'</span>]);  <span class="comment">// less文件改动时，执行css任务</span></span><br><span class="line">    gulp.watch(<span class="string">'src/js/*.js'</span>, [<span class="string">'js'</span>]);  <span class="comment">// js文件改动时，执行js任务</span></span><br><span class="line">    gulp.watch(<span class="string">'src/img/*.*'</span>, [<span class="string">'img'</span>]);  <span class="comment">// image文件改动时，执行img任务</span></span><br><span class="line">    gulp.watch(<span class="string">'src/*.html'</span>, [<span class="string">'html'</span>]);  <span class="comment">// html文件改动时，执行html任务</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>1 <code>$ gulp css</code> LESS 编译 压缩 合并</li><li>2 <code>$ gulp js</code> JavaScript 合并 压缩 混淆</li><li>3 <code>$ gulp img</code> image 复制</li><li>4 <code>$ gulp html</code> HTML 压缩</li><li>5 <code>$ gulp browserSync</code> 多浏览器同步操作，gulp监视JS/CSS/HTML文件改变</li></ul><p>到此，基于gulp的前端自动化工作流环境搭建完成，以下使用视频教程。<br><img src="http://ojzaff7fe.bkt.clouddn.com/gulp%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.gif" alt="使用视频教程"></p><p><a href="https://github.com/itPoet/gulp" target="_blank" rel="noopener">点击此处，下载本案例源代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文通过简单且实用的案例，讲解使用gulp搭建前端自动化工作流环境详细步骤，带领大家快速入门。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是gulp？&quot;&gt;&lt;a href=&quot;#什么是gulp？&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Gulp" scheme="https://xpoet.cn/tags/Gulp/"/>
    
      <category term="前端自动化" scheme="https://xpoet.cn/tags/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>快速掌握 Markdown 基础语法</title>
    <link href="https://xpoet.cn/2017/10/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://xpoet.cn/2017/10/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2017-10-17T08:44:07.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h3><p>Markdown 是一种<strong>「轻量级标记语言」</strong>，用途广泛，其使用简洁的语法代替常见的排版格式，从而能使我们专心于写作，在最大程度上提高效率。Markdown 的语法十分简单，常用的标记符号也不超过十个，学习成本极低，一旦熟悉这种语法规则，将会有一劳永逸的效果。  </p><blockquote><p>We believe that writing is about content, about what you want to say – not about fancy formatting.<br><strong>我们坚信写作写的是内容，所思所想，而不是花样格式。</strong></p></blockquote><h3 id="使用-Markdown-的优点"><a href="#使用-Markdown-的优点" class="headerlink" title="使用 Markdown 的优点"></a>使用 Markdown 的优点</h3><ul><li>专注你的文字内容而不是排版样式；</li><li>纯文本内容，兼容所有的文本编辑器；</li><li>可读、直观、通用性高、学习成本低；  </li><li>轻松导出 <code>HTML</code> 、<code>PDF</code> 等格式的文件；  </li><li>随时可修改 <code>.md</code> 文件，不会因版本问题导致格式混乱；</li></ul><h3 id="Markdown-语法规则"><a href="#Markdown-语法规则" class="headerlink" title="Markdown 语法规则"></a>Markdown 语法规则</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>标记符 <code>#</code><br>标题是文章最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只需在这段文字前加 <code>#</code> 标记符。<br>例如：<br><code># 一级标题</code><br><code>## 二级标题</code><br><code>### 三级标题</code><br>……<br>以此类推，共六级标题，对应 <code>HTML</code> 的 h1 ~ h6。<br><strong>注意：<code>#</code> 和文字之间需加一个空格。</strong></p><p><img src="https://user-images.githubusercontent.com/24516169/81159079-32133f80-8fbb-11ea-8e41-62332c25e52e.png" alt="标题"> </p><h4 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h4><p>标记符 <code>**</code> 或 <code>__</code><br>在需要表示为粗体的文字内容，用两个 <code>**</code> 或 <code>__</code> 标记符包裹。<br>例如：<code>**字体加粗**</code> 或 <code>__字体加粗__</code></p><p><img src="https://user-images.githubusercontent.com/24516169/81159428-87e7e780-8fbb-11ea-842d-48ad7756177f.png" alt="粗体"> </p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>标记符 <code>*</code> 或 <code>_</code><br>在需要表示为斜体的文字内容，用两个 <code>*</code> 或 <code>_</code> 标记符包裹。<br>例如：<code>*斜体*</code> 或 <code>_斜体_</code></p><p><img src="https://user-images.githubusercontent.com/24516169/81159675-cc738300-8fbb-11ea-8393-d2209a5f69a0.png" alt="斜体"> </p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>标记符 <code>&gt;</code><br>只需在引用的文字内容前面加上 <code>&gt;</code> 标记符，就可以出现引用的效果。<br>例如：<code>&gt; 我是引用的句子哦</code></p><p><img src="https://user-images.githubusercontent.com/24516169/81160045-32f8a100-8fbc-11ea-8e51-87633bf50d0c.png" alt="引用"></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>标记符 <code>-</code> 或 <code>+</code> 或 <code>*</code><br>在需要表示为无序列表的文字前加 <code>-</code> 或 <code>+</code> 或 <code>*</code> 标记符。</p><p><img src="https://user-images.githubusercontent.com/24516169/81160433-a1d5fa00-8fbc-11ea-9330-60bf9857a244.png" alt="无序列表"></p><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>标记符 <code>1.</code> 或 <code>2.</code> 或 <code>3.</code> ……<br>在需要表示为有序列表的文字前面添加加 <code>1.</code> 或 <code>2.</code> 或 <code>3.</code> …… 标记符。</p><p><img src="https://user-images.githubusercontent.com/24516169/81160871-3cced400-8fbd-11ea-8240-c37b27ee6007.png" alt="有序列表">  </p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>标记符 <code>[]()</code><br>在 Markdown 中，插入链接，例如：<code>[XPoet Blog](https://xtpoet.cn)</code></p><p><img src="https://user-images.githubusercontent.com/24516169/81161086-9800c680-8fbd-11ea-9790-14374e010461.png" alt="link"></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>标记符 <code>![]()</code><br>图片示例：<code>![aliyun](https://img.alicdn.com/tfs/TB1Ly5oS3HqK1RjSZFPXXcwapXa-238-54.png)</code></p><p><img src="https://user-images.githubusercontent.com/24516169/81164608-35122e00-8fc3-11ea-8840-b98ff54d6758.png" alt="image"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h5><p>标记符 <strong>`  `</strong><br>需要引用代码时，如果引用的代码只有一行，可以用两个 <strong>`</strong> 标记符将代码包裹起来。例如：</p><p><img src="https://user-images.githubusercontent.com/24516169/81164997-cd101780-8fc3-11ea-86dc-e025a4e99b90.png" alt="单行代码"></p><h5 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h5><p>标记符：<strong>```  ```</strong><br>多行代码，用两个 <strong>```</strong> 标记符将代码块包裹起来。例如：</p><p><img src="https://user-images.githubusercontent.com/24516169/81165249-43147e80-8fc4-11ea-88a7-6c3e752326f0.png" alt="多行代码"></p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>标记符：<code>***</code> 或 <code>---</code> 或 <code>___</code><br>插入分割线，在一行中用三个以上的 <code>*</code> 或 <code>-</code> 或 <code>_</code> 标记符来建立一个分隔线，行内不能有其他内容，分隔符独占一行。<br><img src="https://user-images.githubusercontent.com/24516169/81165548-b7e7b880-8fc4-11ea-8b12-db002969a670.png" alt="分割线"></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>标记符：<code>~~</code><br>在需要添加删除线的文字内容，用两个 <code>~~</code> 标记符包裹。<br>例如：<code>~~ABC~~</code> <del>ABC</del></p><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>标记符： <code>两个空格符</code> 加 <code>回车</code><br>在 Markdown 中进行换行，需在文字后面键入 <code>两个空格符</code> 加 <code>回车</code>。</p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>在 Markdown 中插入表格的标记符比较复杂，大家直接看效果，需要用到时过来复制代码。</p><h5 id="默认表格样式"><a href="#默认表格样式" class="headerlink" title="默认表格样式"></a>默认表格样式</h5><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ColName1 | ColName2 | ColName3</span><br><span class="line">---------|----------|---------</span><br><span class="line">ColValue | ColValue | ColValue</span><br><span class="line">ColValue | ColValue | ColValue</span><br><span class="line">ColValue | ColValue | ColValue</span><br><span class="line">ColValue | ColValue | ColValue</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>ColName1</th><th>ColName2</th><th>ColName3</th></tr></thead><tbody><tr><td>ColValue</td><td>ColValue</td><td>ColValue</td></tr><tr><td>ColValue</td><td>ColValue</td><td>ColValue</td></tr><tr><td>ColValue</td><td>ColValue</td><td>ColValue</td></tr><tr><td>ColValue</td><td>ColValue</td><td>ColValue</td></tr></tbody></table><h5 id="表格列调整"><a href="#表格列调整" class="headerlink" title="表格列调整"></a>表格列调整</h5><p>表格的列位置调整（默认左对齐，<code>:------:</code> 居中，<code>------:</code> 右对齐）<br>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|ColName1 | ColName2 | ColName3|</span><br><span class="line">|---------|:--------:|--------:|</span><br><span class="line">|ColValue | ColValue | ColValue|</span><br><span class="line">|ColValue | ColValue | ColValue|</span><br><span class="line">|ColValue | ColValue | ColValue|</span><br><span class="line">|ColValue | ColValue | ColValue|</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>ColName1</th><th align="center">ColName2</th><th align="right">ColName3</th></tr></thead><tbody><tr><td>ColValue</td><td align="center">ColValue</td><td align="right">ColValue</td></tr><tr><td>ColValue</td><td align="center">ColValue</td><td align="right">ColValue</td></tr><tr><td>ColValue</td><td align="center">ColValue</td><td align="right">ColValue</td></tr><tr><td>ColValue</td><td align="center">ColValue</td><td align="right">ColValue</td></tr></tbody></table><p><strong>由于不同平台的 Markdown CSS 存在差异，实际显示效果跟本文也会有所不同。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是-Markdown&quot;&gt;&lt;a href=&quot;#什么是-Markdown&quot; class=&quot;headerlink&quot; title=&quot;什么是 Markdown&quot;&gt;&lt;/a&gt;什么是 Markdown&lt;/h3&gt;&lt;p&gt;Markdown 是一种&lt;strong&gt;「轻量级标记语言」&lt;
      
    
    </summary>
    
    
      <category term="技术教程" scheme="https://xpoet.cn/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Markdown" scheme="https://xpoet.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>触动心灵的六句古诗词</title>
    <link href="https://xpoet.cn/2017/10/%E8%A7%A6%E5%8A%A8%E5%BF%83%E7%81%B5%E7%9A%84%E5%85%AD%E5%8F%A5%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    <id>https://xpoet.cn/2017/10/%E8%A7%A6%E5%8A%A8%E5%BF%83%E7%81%B5%E7%9A%84%E5%85%AD%E5%8F%A5%E5%8F%A4%E8%AF%97%E8%AF%8D/</id>
    <published>2017-10-16T08:14:20.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>人生若只如初见，何事秋风悲画扇。</strong> <em>——纳兰性德 《木兰词·拟古决绝词柬友》</em></p></blockquote><p>很多时候，初见，惊艳。<br>蓦然回首，却已是物是人非，曾经沧海，只怕早已换了桑田。<br>短短的一句话，道尽人生多少悲凉，道尽人生多少无奈。<br>如果所有往事都能化为红尘一笑，只留下初见时的倾情、惊艳，忘却也许有过的背叛、伤怀，这是何等美妙的人生境界。<br>若只是初见，一切美好都不会遗失。  </p><blockquote><p><strong>曾经沧海难为水，除却巫山不是云。</strong> <em>——元稹 《离思（其四）》</em></p></blockquote><p>曾读此诗难为诗，因为这句诗把人对某种生死之恋的刻骨铭心写绝了。<br>在记忆之海里继续沉浸，在往事里打捞沉落的星辰月光，直至那昔年的沧海也将自己渐渐淹没。难道真的是沧海巫山之后，便再无水和云了？<br>所以，不要太早遇见心上的他/她，万一你捉不住他/她，将一辈子都活在这句诗句里。  </p><blockquote><p><strong>人面不知何处去，桃花依旧笑春风。</strong> <em>——崔护 《题都城南庄》</em></p></blockquote><p>心爱的人不知道去哪了？只留下桃花却依然微笑，在春风中绽放。<br>以笑映悲，道尽心中悲楚，令人不禁感慨万千。<br>若干年后，我们是否也会有如此遭遇呢？  </p><blockquote><p><strong>众里寻她千百度，蓦然回首，那人却在，灯火阑珊处。</strong> <em>——辛弃疾 《青玉案·元夕》</em></p></blockquote><p>我千百次寻找，等待的那个人还没有出现。我的心充满疲惫和失落，不经意一回首，却发现她就在那灯火寥落的地方静静地站着。<br>很多时候，我们总是在往阴暗处去寻找我们心中的她，却总不见其影踪，蓦然回首，才发现她其实一直就在我们的身边，离我们只有一个转身的距离。  </p><blockquote><p><strong>衣带渐宽终不悔，为伊消得人憔悴。</strong> <em>——柳永 《蝶恋花》</em></p></blockquote><p>无可替代的思念，无怨无悔的执着，脸庞的瘦削，颧骨的高突，身上的青衫也变得宽松了，但从没有后悔这一切皆因对她无边的思念而起，心甘情愿为爱饱受煎熬。<br>这无尽的思念、无尽的爱，人世间又有谁能承受的起呢？   </p><blockquote><p><strong>纵使相逢应不识，尘满面，鬓如霜。</strong> <em>——苏轼 《江城子·乙卯正月二十日夜记梦》</em></p></blockquote><p>即使相逢也料想不会认识，因为我四处奔波，灰尘满面，鬓发如霜。<br>这恐怕是每个一人最害怕的结果，若是不见也就罢了，若是相见，却互不认识，就这样在岁月里蹉跎地擦肩而过，那该是多么令人心碎的一幕。  </p><p><strong>后记： 沧海桑田，浩瀚的历史长河中，触动我心灵的古诗词又怎么可能只有这六句呢？</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;人生若只如初见，何事秋风悲画扇。&lt;/strong&gt; &lt;em&gt;——纳兰性德 《木兰词·拟古决绝词柬友》&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多时候，初见，惊艳。&lt;br&gt;蓦然回首，却已是物是人非，曾经沧海，只怕早已换了
      
    
    </summary>
    
    
      <category term="诗词人生" scheme="https://xpoet.cn/categories/%E8%AF%97%E8%AF%8D%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="诗词" scheme="https://xpoet.cn/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>醉眼天涯 花香满衣</title>
    <link href="https://xpoet.cn/2017/10/%E9%86%89%E7%9C%BC%E5%A4%A9%E6%B6%AF-%E8%8A%B1%E9%A6%99%E6%BB%A1%E8%A1%A3/"/>
    <id>https://xpoet.cn/2017/10/%E9%86%89%E7%9C%BC%E5%A4%A9%E6%B6%AF-%E8%8A%B1%E9%A6%99%E6%BB%A1%E8%A1%A3/</id>
    <published>2017-10-15T07:55:00.000Z</published>
    <updated>2020-06-09T09:00:00.514Z</updated>
    
    <content type="html"><![CDATA[<p>在忽然惊醒的夜凉里，<br>挨着秋天的衣袖，<br>独坐如莲。<br>灯半笼，<br>更阑。</p><p>夜雾已经烹煮成一壶茶，不饮。<br>相思已经倾斜成箫，不吹。<br>只在梦的边缘，<br>等你叩门的绝响。</p><p>我的思念，是你前世遗忘采撷而无法成熟的青果。<br>不舍那未了的情缘，我才执意轮回世间。<br>单薄的形骸幻化成一树瘦梅，等你在必经的路旁。<br>依旧是前世那一袭清绝的白衣，期待成为你不期而至的风景。<br>拥有你一刻完整凝眸，即便错失整个花季，我也欣然坠落，腐化为泥。<br>是什么将我的回眸捂上？<br>烟色的记忆里，总不见你寻路而来，<br>陪我，垂钓月光。</p><p>洪荒的纪事已远，恍若隔世的约定风一般不着形迹，<br>最放心不下的，还是你。<br>为你点燃的浣花诗灯一盏一盏次第而亮，<br>为你酝酿的柔情千顷一寸一寸绿满天涯。</p><p>三界内，所有的花树静静的迎候岁月，唯我轻衫飘飘、暗香盈盈，等你在岁月的对岸。<br>你不来，我不敢老去。<br>静夜里如此的思念，真的会把你惊醒?</p><p>今夜，你终于顺着长长的夜路，<br>踏响我长满青苔的小径。<br>苔痕斑驳的门扉，洞箫细碎的长廊,<br>有谁的心事穿袜行走，莲步轻移。</p><p>握着你的一唇冰凉，隔世的故事碎玉满地。<br>心疼你单衣试酒的落寞孤寒，为你一弦独操，<br>陪你独立霜降的寒凉。<br>用素帕细细为你抹去肩头发上的霜，拢你的一袖寒凉……</p><p>剪烛西窗。<br>一卷心情，<br>一壶淡酒，<br>一阙宫商。<br>单薄的素衣，不耐乍暖还寒的雨季。<br>此刻，你停泊在哪一隅的夜凉里？</p><p>谁替你烘干夜露沾湿的薄衫，笑你花香满衣。<br>谁如我前世一般卷帘相问：可看见月的香馨？<br>何处是港湾？<br>青山麓，碧水旁，黄昏沙滩？<br>寂寞沙洲寒。</p><p>空相对，<br>远山，远水……<br>残红，无寐……  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在忽然惊醒的夜凉里，&lt;br&gt;挨着秋天的衣袖，&lt;br&gt;独坐如莲。&lt;br&gt;灯半笼，&lt;br&gt;更阑。&lt;/p&gt;
&lt;p&gt;夜雾已经烹煮成一壶茶，不饮。&lt;br&gt;相思已经倾斜成箫，不吹。&lt;br&gt;只在梦的边缘，&lt;br&gt;等你叩门的绝响。&lt;/p&gt;
&lt;p&gt;我的思念，是你前世遗忘采撷而无法成熟的青果。
      
    
    </summary>
    
    
      <category term="诗词人生" scheme="https://xpoet.cn/categories/%E8%AF%97%E8%AF%8D%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="诗词" scheme="https://xpoet.cn/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
