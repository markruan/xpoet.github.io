<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XPoet&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xpoet.cn/"/>
  <updated>2020-12-01T09:14:40.977Z</updated>
  <id>https://xpoet.cn/</id>
  
  <author>
    <name>XPoet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 主题 ILS 改名 Keep</title>
    <link href="https://xpoet.cn/2020/11/Hexo-%E4%B8%BB%E9%A2%98-ILS-%E6%94%B9%E5%90%8D-Keep/"/>
    <id>https://xpoet.cn/2020/11/Hexo-%E4%B8%BB%E9%A2%98-ILS-%E6%94%B9%E5%90%8D-Keep/</id>
    <published>2020-11-26T13:47:26.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>自 <code>v3.0.0</code> 起，原 Hexo 主题 ILS 改名为 <strong>Keep</strong>，<code>3.0.0</code> 版本在原主题 ILS 基础上做了大量的改进、优化和代码重构，同时也新增许多实用功能，Keep 全新设计、全面提升、更轻、更快、更强。不管怎样变化，Keep 不忘初心，始终围绕「 简约、轻快、专注内容 」来维护和升级。</p><p>愿你我坚持写作，保持热爱。</p><a id="more"></a><p>参考链接：</p><ul><li><p><a class="link"   href="https://keep.xpoet.cn/" >Keep 官方网站<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link"   href="https://keep.xpoet.cn/changelog/" >Keep 更新日志<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link"   href="https://keep.xpoet.cn/2020/11/Keep-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/" >Keep 主题配置指南<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link"   href="https://keep.xpoet.cn/2020/11/Keep-%E4%BB%A3%E7%A0%81%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97/" >Keep 代码贡献指南<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link"   href="https://keep.xpoet.cn/2020/11/%E4%BD%BF%E7%94%A8-Travis-CI-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-Hexo-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/" >使用 Travis CI 自动部署 Hexo 静态博客<i class="fas fa-external-link-alt"></i></a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自 &lt;code&gt;v3.0.0&lt;/code&gt; 起，原 Hexo 主题 ILS 改名为 &lt;strong&gt;Keep&lt;/strong&gt;，&lt;code&gt;3.0.0&lt;/code&gt; 版本在原主题 ILS 基础上做了大量的改进、优化和代码重构，同时也新增许多实用功能，Keep 全新设计、全面提升、更轻、更快、更强。不管怎样变化，Keep 不忘初心，始终围绕「 简约、轻快、专注内容 」来维护和升级。&lt;/p&gt;
&lt;p&gt;愿你我坚持写作，保持热爱。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Keep" scheme="https://xpoet.cn/categories/Keep/"/>
    
    
      <category term="Hexo" scheme="https://xpoet.cn/tags/Hexo/"/>
    
      <category term="Keep" scheme="https://xpoet.cn/tags/Keep/"/>
    
  </entry>
  
  <entry>
    <title>Vue 项目动态修改 DOM 的 CSS 伪类</title>
    <link href="https://xpoet.cn/2020/11/Vue-%E9%A1%B9%E7%9B%AE%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9-DOM-%E7%9A%84-CSS-%E4%BC%AA%E7%B1%BB/"/>
    <id>https://xpoet.cn/2020/11/Vue-%E9%A1%B9%E7%9B%AE%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9-DOM-%E7%9A%84-CSS-%E4%BC%AA%E7%B1%BB/</id>
    <published>2020-11-09T08:03:06.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>在 Vue 项目中，如何动态修改某个 DOM 元素的 CSS 伪类？实现方法非常简单，其原理是使用 CSS3 的 <strong><code>var()</code></strong> 函数和 <strong><code>--</code></strong> 变量。</p><p>以下列代码为例，实现动态修改 <code>class</code> 为 demo 的 <code>div</code> 元素鼠标悬浮时的背景颜色：</p><ul><li><p><code>template</code> 中，绑定一个 <code>--</code> 变量 <code>--hover-background-color</code>。</p></li><li><p><code>script</code> 中，定义一个变量 <code>hoverBackgroundColor</code>，用以动态背景颜色。</p></li><li><p><code>style</code> 中，<code>background</code> 的值用 <code>var(--hover-background-color)</code> 表示。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;demo&quot;</span><br><span class="line">    :style=&quot;&#123;</span><br><span class="line">                &#x27;--hover-background-color&#x27;: hoverBackgroundColor</span><br><span class="line">            &#125;&quot;</span><br><span class="line">  &gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        hoverBackgroundColor: <span class="string">&quot;#ccc&quot;</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.demo</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">    background: var(--hover-background-color);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Vue 项目中，如何动态修改某个 DOM 元素的 CSS 伪类？实现方法非常简单，其原理是使用 CSS3 的 &lt;strong&gt;&lt;code&gt;var()&lt;/code&gt;&lt;/strong&gt; 函数和 &lt;strong&gt;&lt;code&gt;--&lt;/code&gt;&lt;/strong&gt; 变量。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://xpoet.cn/tags/Vue/"/>
    
      <category term="CSS 伪类" scheme="https://xpoet.cn/tags/CSS-%E4%BC%AA%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>快速掌握 Vue3.0 基础语法</title>
    <link href="https://xpoet.cn/2020/11/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1-Vue3.0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://xpoet.cn/2020/11/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1-Vue3.0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-11-05T02:53:13.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>经过两年多的迭代，Vue3.0 终于在 9 月 18 日 发布了正式版，其使用 TypeScript 进行大规模重构，有着很大的改变。Vue3.0 采用 Composition API，类似 React Hook，使用更加灵活。接下来总结一下 Vue3.0 部分新特性的用法。</p><h2 id="Vue2-x-与-Vue3-0-的对比"><a href="#Vue2-x-与-Vue3-0-的对比" class="headerlink" title="Vue2.x 与 Vue3.0 的对比"></a>Vue2.x 与 Vue3.0 的对比</h2><ul><li>Vue2 对 TypeScript 支持不友好，所有属性都放在 <code>this</code> 对象上，难以推断出数据类型。</li><li>Vue2 大量的 API 挂载在 Vue 对象的原型上，难以实现 tree shaking。</li><li>Vue2 架构层面对跨平台 DOM 渲染开发支持不友好。</li><li>Vue3 采用 Composition API，受 React Hook 启发。</li><li>Vue3 更好地支持 JSX。</li><li>Vue3 的 Template 支持多个根标签，Vue2.x 不支持。</li><li>Vue3 对虚拟 DOM 进行了重写、对模板的编译进行了优化。</li><li>…</li></ul><h2 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup() 函数"></a>setup() 函数</h2><p><code>setup()</code> 是 Vue3.0 专门为组件提供的新属性。它为我们使用 Vue3.0 的 Composition API 新特性提供了统一的入口，<code>setup()</code> 在 <code>beforeCreate()</code> 之后和 <code>created()</code> 之前执行，Vue3.0 取消了这两个 2.x 版本的生命周期钩子函数，统一用 <code>setup()</code> 代替，该函数相当于一个生命周期函数，Vue2.x 中的 <code>data</code>，<code>methods</code>，<code>watch</code> 等全部都用对应的新增 API 写在 <code>setup()</code> 中。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// context.attrs</span></span><br><span class="line">    <span class="comment">// context.slots</span></span><br><span class="line">    <span class="comment">// context.parent</span></span><br><span class="line">    <span class="comment">// context.root</span></span><br><span class="line">    <span class="comment">// context.emit</span></span><br><span class="line">    <span class="comment">// context.refs</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>props</code> 用来接收 <code>props</code> 数据。</li><li><code>context</code> 用来定义上下文，上下文对象中包含了一些有用的属性，这些属性在 Vue2.x 中需要通过 <code>this</code> 才能访问到，但在 <code>setup()</code> 中无法访问到 <code>this</code>。</li><li><code>return &#123;&#125;</code> 返回值，返回的是响应式数据，template 模版中需要使用的函数。</li></ul><h2 id="reactive-函数"><a href="#reactive-函数" class="headerlink" title="reactive() 函数"></a>reactive() 函数</h2><p><code>reactive()</code> 接收一个普通对象，返回一个响应式的数据对象，响应式数据对象创建出来之后，在 <code>setup()</code> 中 <code>return</code> 出去，即可在 <code>template</code> 中使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> &#123;&#123; name &#125;&#125; <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> person = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;zhangsan&quot;</span>,</span></span><br><span class="line">        age: 18,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> person;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref() 函数"></a>ref() 函数</h2><p><code>ref()</code> 用来根据给定的值创建一个响应式的数据对象，<code>ref()</code> 调用的返回值是一个对象，这个对象上只包含一个 <code>value</code> 属性，只在 <code>setup()</code> 函数内部获取 <code>ref()</code> 对象的值需要加上 <code>.value</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mine&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> count = ref&lt;number&gt;(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(count.value);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        count,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>reactive()</code> 对象中访问 <code>ref()</code> 创建的响应式数据对象时，不需要加 <code>.value</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mine&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125; - &#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> count = ref&lt;number&gt;(<span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> obj = reactive(&#123;</span></span><br><span class="line">        n: 100,</span><br><span class="line">        count,</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="javascript">      <span class="comment">// 通过 reactive 来获取 ref 的值时，不需要使用 .value 属性</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(obj.count); <span class="comment">// 10</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        ...toRefs(obj),</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="isRef-函数"><a href="#isRef-函数" class="headerlink" title="isRef() 函数"></a>isRef() 函数</h2><p><code>isRef()</code> 用来判断某个值是否为 <code>ref()</code> 创建出来的对象。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, isRef, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name: <span class="built_in">string</span> = <span class="string">&quot;vue&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> age = ref&lt;<span class="built_in">number</span>&gt;(<span class="number">18</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(isRef(age)); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(isRef(name)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      age,</span><br><span class="line">      name,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="toRefs-函数"><a href="#toRefs-函数" class="headerlink" title="toRefs() 函数"></a>toRefs() 函数</h2><p><code>toRefs()</code> 可以将 <code>reactive()</code> 创建出来的响应式对象，转换为普通的对象，这个普通对象上的每个属性节点，都是 <code>ref()</code> 类型的响应式数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mine&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125; &#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, ref, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> person = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;zhangsan&quot;</span>,</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> age = ref(<span class="number">18</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        ...toRefs(person),</span><br><span class="line">        age,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="computed-函数"><a href="#computed-函数" class="headerlink" title="computed() 函数"></a>computed() 函数</h2><p><code>computed()</code> 用来创建计算属性，和前面一样，它返回的值是一个 <code>ref()</code> 对象。里面可以传方法，或者对象，对象中包含 <code>set()</code>、<code>get()</code> 方法。</p><h3 id="创建只读的计算属性"><a href="#创建只读的计算属性" class="headerlink" title="创建只读的计算属性"></a>创建只读的计算属性</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 age 的值，创建一个响应式的计算属性 readOnlyAge，它会根据依赖的 ref 自动计算并返回一个新的 ref</span></span><br><span class="line">    <span class="keyword">const</span> readOnlyAge = computed(<span class="function">() =&gt;</span> age.value++); <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      age,</span><br><span class="line">      readOnlyAge,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="通过-set-、get-方法创建一个可读可写的计算属性"><a href="#通过-set-、get-方法创建一个可读可写的计算属性" class="headerlink" title="通过 set()、get() 方法创建一个可读可写的计算属性"></a>通过 set()、get() 方法创建一个可读可写的计算属性</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref&lt;<span class="built_in">number</span>&gt;(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> computedAge = computed(&#123;</span><br><span class="line">      get: <span class="function">() =&gt;</span> age.value + <span class="number">1</span>,</span><br><span class="line">      set: <span class="function">(<span class="params">value</span>) =&gt;</span> age.value + value,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为计算属性赋值的操作，会触发 set 函数，触发 set 函数后，age 的值会被更新</span></span><br><span class="line">    age.value = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      age,</span><br><span class="line">      computedAge,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="watch-函数"><a href="#watch-函数" class="headerlink" title="watch() 函数"></a>watch() 函数</h2><p><code>watch()</code> 用来监听特定的数据源，并在回调函数中返回。默认情况是懒执行的，仅在监听的源数据变更时才执行回调。</p><h3 id="监听-reactive-创建的数据源"><a href="#监听-reactive-创建的数据源" class="headerlink" title="监听 reactive() 创建的数据源"></a>监听 reactive() 创建的数据源</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, reactive, toRefs, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> person = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">&quot;vue&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      () =&gt; person.age,</span><br><span class="line">      (newValue, oldValue) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newValue); <span class="comment">// 100</span></span><br><span class="line">        <span class="built_in">console</span>.log(oldValue); <span class="comment">// 10</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 age 时会触发 watch 的回调，打印出改变前后的值</span></span><br><span class="line">    person.age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(person),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="监听用-ref-创建的数据源"><a href="#监听用-ref-创建的数据源" class="headerlink" title="监听用 ref() 创建的数据源"></a>监听用 ref() 创建的数据源</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> age = ref&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    watch(age, <span class="function">(<span class="params">oldValue, newValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;oldValue: &quot;</span>, oldValue); <span class="comment">// 10</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;newValue: &quot;</span>, newValue); <span class="comment">// 100</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 age 时会触发 watch 的回调, 打印变更后的值</span></span><br><span class="line">    age.value = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      age,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="同时监听多个值"><a href="#同时监听多个值" class="headerlink" title="同时监听多个值"></a>同时监听多个值</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, reactive, toRefs, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    watch(</span><br><span class="line">      [<span class="function">() =&gt;</span> state.age, <span class="function">() =&gt;</span> state.name],</span><br><span class="line">      ([newAge, newName], [oldAge, oldName]) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newAge);</span><br><span class="line">        <span class="built_in">console</span>.log(newName);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oldAge);</span><br><span class="line">        <span class="built_in">console</span>.log(oldName);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 修改 state 时会触发 watch 的回调，打印变更前后的值，此时需要注意，更改其中一个值，都会执行 watch 的回调</span></span><br><span class="line">    state.age = <span class="number">100</span>;</span><br><span class="line">    state.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="stop-停止监听"><a href="#stop-停止监听" class="headerlink" title="stop 停止监听"></a>stop 停止监听</h3><p>在 <code>setup()</code> 内创建的 <code>watch()</code> 监视，会在当前组件被销毁的时候自动停止。如果想要明确地停止某个监听，可以调用 <code>watch()</code> 的返回值即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, reactive, toRefs, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = reactive&lt;Person&gt;(&#123; <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> stop = watch(</span><br><span class="line">      [<span class="function">() =&gt;</span> state.age, <span class="function">() =&gt;</span> state.name],</span><br><span class="line">      ([newAge, newName], [oldAge, oldName]) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newAge);</span><br><span class="line">        <span class="built_in">console</span>.log(newName);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oldAge);</span><br><span class="line">        <span class="built_in">console</span>.log(oldName);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    state.age = <span class="number">100</span>;</span><br><span class="line">    state.name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      stop();</span><br><span class="line">      <span class="comment">// 此时修改时, 不会触发 watch 回调</span></span><br><span class="line">      state.age = <span class="number">1000</span>;</span><br><span class="line">      state.name = <span class="string">&quot;wangwu&quot;</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>); <span class="comment">// 1秒之后讲取消watch的监听</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...toRefs(state),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="LifeCycle-Hooks-新的生命周期函数"><a href="#LifeCycle-Hooks-新的生命周期函数" class="headerlink" title="LifeCycle Hooks 新的生命周期函数"></a>LifeCycle Hooks 新的生命周期函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  defineComponent,</span><br><span class="line">  onBeforeMount,</span><br><span class="line">  onBeforeUnmount,</span><br><span class="line">  onBeforeUpdate,</span><br><span class="line">  onErrorCaptured,</span><br><span class="line">  onMounted,</span><br><span class="line">  onUnmounted,</span><br><span class="line">  onUpdated,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    onBeforeMount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;beformounted!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;mounted!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    onBeforeUpdate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;beforupdated!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    onUpdated(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;updated!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;beforunmounted!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;unmounted!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    onErrorCaptured(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;errorCaptured!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Template-refs"><a href="#Template-refs" class="headerlink" title="Template refs"></a>Template refs</h2><p>通过 <code>refs</code> 来返回真实 DOM 元素，为了获得对模板内元素或组件实例的引用，我们可以在 <code>setup()</code> 中声明一个 <code>ref()</code> 并返回它。</p><ol><li>在 HTML 添加 <code>ref</code> 的属性。</li><li>在 <code>steup()</code> 中定义一个 <code>ref()</code>。</li><li>在 <code>steup()</code> 中返回 <code>ref()</code> 的实例.</li><li><code>onMounted()</code> 中可以得到 <code>ref()</code> 的 RefImpl 的对象, 通过 <code>.value</code> 获取真实 DOM。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;elmRefs&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>test<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取真实DOM</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> elmRefs = ref&lt;<span class="literal">null</span> | HTMLElement&gt;(<span class="literal">null</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(elmRefs.value); <span class="comment">// 得到一个 RefImpl 的对象, 通过 .value 访问到数据</span></span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        elmRefs,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue3-全局配置"><a href="#Vue3-全局配置" class="headerlink" title="Vue3 全局配置"></a>Vue3 全局配置</h2><p>通过 Vue 实例上 config 来配置，包含 Vue 应用程序全局配置的对象。在挂载应用程序之前修改下面列出的属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.config = &#123;...&#125;</span><br></pre></td></tr></table></figure><p>为组件渲染功能和观察程序期间的未捕获错误分配处理程序</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config.errorHandler = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><p>可以在应用程序内的任何组件实例中访问的全局属性，组件的属性将具有优先权。这可以代替 Vue2.x <code>Vue.prototype</code> 扩展。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;);</span><br><span class="line">app.config.globalProperties.$http = axios;</span><br></pre></td></tr></table></figure><p>可以在组件内通过 <code>getCurrentInstance()</code> 来获取全局 <code>globalProperties</code> 中配置的信息，<code>getCurrentInstance()</code> 获取当前组件的实例，然后通过 ctx 属性获得当前上下文，这样我们就能在 <code>setup()</code> 中使用 router 和 vuex，通过这个属性我们就可以操作变量、全局属性、组件属性等等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance();</span><br><span class="line">  <span class="comment">// ctx.$http</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Suspense-组件"><a href="#Suspense-组件" class="headerlink" title="Suspense 组件"></a>Suspense 组件</h2><p>在介绍 Vue 的 Suspense 组件之前，我们有必要先了解一下 React 的 Suspense 组件，因为它们的功能类似。<br>React.lazy 接受一个函数，这个函数需要动态调用 <code>import()</code>。它必须返回一个 <code>Promise</code>，该 <code>Promise</code> 需要 <code>resolve</code> 一个 default export 的 React 组件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myComponent = React.lazy(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./Component&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Suspense fallback=&#123;<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">        &lt;myComponent /&gt;</span><br><span class="line">      &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3 也新增了 React.lazy 类似功能的 <code>defineAsyncComponent</code> 函数，处理动态引入的组件。<code>defineAsyncComponent</code> 可以接受返回 <code>Promise</code> 的工厂函数。从服务器检索到组件定义时，应该调用 <code>Promise</code> 的解析回调。您还可以调用 <code>reject(reason)</code> 来指示负载已经失败。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AsyncComp = defineAsyncComponent(</span><br><span class="line">  () =&gt; <span class="keyword">import</span>(<span class="string">&quot;./components/AsyncComponent.vue&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.component(<span class="string">&quot;async-component&quot;</span>, AsyncComp);</span><br></pre></td></tr></table></figure><p>Vue3 也新增了 Suspense 组件:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-component</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span> Loading ... <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> MyComponent = defineAsyncComponent(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./Component&quot;</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      MyComponent,</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过两年多的迭代，Vue3.0 终于在 9 月 18 日 发布了正式版，其使用 TypeScript 进行大规模重构，有着很大的改变。Vue3.0 采用 Composition API，类似 React Hook，使用更加灵活。接下来总结一下 Vue3.0 部分新特性的用法
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue3" scheme="https://xpoet.cn/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数据结构与算法（五）单向链表结构</title>
    <link href="https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/</id>
    <published>2020-07-23T08:46:14.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认识链表"><a href="#认识链表" class="headerlink" title="认识链表"></a>认识链表</h3><h4 id="链表和数组"><a href="#链表和数组" class="headerlink" title="链表和数组"></a>链表和数组</h4><p>链表和数组一样，可以用于存储一系列的元素，但是链表和数组的实现机制完全不同。</p><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul><li><p>存储多个元素，数组（或列表）可能是最常用的数据结构。</p></li><li><p>几乎每一种编程语言都有默认实现数组结构，提供了一个便利的 <code>[]</code> 语法来访问数组元素。</p></li><li><p>数组缺点：</p><p>数组的创建需要申请一段连续的内存空间(一整块内存)，并且大小是固定的，当前数组不能满足容量需求时，需要扩容。 (一般情况下是申请一个更大的数组，比如 2 倍，然后将原数组中的元素复制过去)</p><p>在数组开头或中间位置插入数据的成本很高，需要进行大量元素的位移。</p></li></ul><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><ul><li><p>存储多个元素，另外一个选择就是使用链表。</p></li><li><p>不同于数组，链表中的元素在内存中不必是连续的空间。</p></li><li><p>链表的每个元素由一个存储元素本身的节点和一个指向下一个元素的引用(有些语言称为指针)组成。</p></li><li><p>链表优点：</p><p>内存空间不必是连续的，可以充分利用计算机的内存，实现灵活的内存动态管理。</p><p>链表不必在创建时就确定大小，并且大小可以无限延伸下去。</p><p>链表在插入和删除数据时，时间复杂度可以达到 O(1)，相对数组效率高很多。</p></li><li><p>链表缺点：</p><p>访问任何一个位置的元素时，需要从头开始访问。(无法跳过第一个元素访问任何一个元素)</p><p>无法通过下标值直接访问元素，需要从头开始一个个访问，直到找到对应的元素。</p><p>虽然可以轻松地到达下一个节点，但是回到前一个节点是很难的。</p></li></ul><h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><p>单向链表类似于火车，有一个火车头，火车头会连接一个节点，节点上有乘客，并且这个节点会连接下一个节点，以此类推。</p><ul><li><p>链表的火车结构</p><p><img src="https://user-images.githubusercontent.com/24516169/88268829-a1b8e100-cd05-11ea-91d9-1c4322783a3d.png" alt="链表的火车结构"></p></li><li><p>链表的数据结构</p><p>head 属性指向链表的第一个节点。<br>链表中的最后一个节点指向 null。<br>当链表中一个节点也没有的时候，head 直接指向 null。</p><p><img src="https://user-images.githubusercontent.com/24516169/88271130-50aaec00-cd09-11ea-8910-eaf4f4509c6d.png" alt="链表的数据结构"></p></li><li><p>给火车加上数据后的结构</p><p><img src="https://user-images.githubusercontent.com/24516169/88268878-b09f9380-cd05-11ea-9fc7-f2e96fe8c764.png" alt="给火车加上数据后的结构"></p></li></ul><h4 id="链表中的常见操作"><a href="#链表中的常见操作" class="headerlink" title="链表中的常见操作"></a>链表中的常见操作</h4><ul><li><code>append(element)</code> 向链表尾部添加一个新的项。</li><li><code>insert(position, element)</code> 向链表的特定位置插入一个新的项。</li><li><code>get(position)</code> 获取对应位置的元素。</li><li><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回-1。</li><li><code>update(position, element)</code> 修改某个位置的元素。</li><li><code>removeAt(position)</code> 从链表的特定位置移除一项。</li><li><code>remove(element)</code> 从链表中移除一项。</li><li><code>isEmpty()</code> 如果链表中不包含任何元素，返回 trun，如果链表长度大于 0 则返回 false。</li><li><code>size()</code> 返回链表包含的元素个数，与数组的 length 属性类似。</li><li><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。</li></ul><h4 id="单向链表的封装"><a href="#单向链表的封装" class="headerlink" title="单向链表的封装"></a>单向链表的封装</h4><h5 id="创建单向链表类"><a href="#创建单向链表类" class="headerlink" title="创建单向链表类"></a>创建单向链表类</h5><p>先创建单向链表类 LinkedList，添加基本属性，再逐步实现单向链表的常用方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    data;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现-append-方法"><a href="#实现-append-方法" class="headerlink" title="实现 append() 方法"></a>实现 append() 方法</h5><h6 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line"><span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">    <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">    currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="过程图解"><a href="#过程图解" class="headerlink" title="过程图解"></a>过程图解</h6><ul><li><p>首先让 currentNode 指向第一个节点。</p><p><img src="https://user-images.githubusercontent.com/24516169/88273783-4854b000-cd0d-11ea-8840-176f2e8cc219.png"></p></li><li><p>通过 while 循环使 currentNode 指向最后一个节点，最后通过 currentNode.next = newNode，让最后一个节点指向新节点 newNode。</p><p><img src="https://user-images.githubusercontent.com/24516169/88273806-50aceb00-cd0d-11ea-95f7-c1583464e123.png"></p></li></ul><h6 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="comment">// 测试 append 方法</span></span><br><span class="line">linkedList.append(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">linkedList.append(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">linkedList.append(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList);</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/88274253-f9f3e100-cd0d-11ea-970d-e39e8e0f3caa.png"></p><h5 id="实现-toString-方法"><a href="#实现-toString-方法" class="headerlink" title="实现 toString() 方法"></a>实现 toString() 方法</h5><h6 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">    result += currentNode.data + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 toString 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; AA BB CC</span></span><br></pre></td></tr></table></figure><h5 id="实现-insert-方法"><a href="#实现-insert-方法" class="headerlink" title="实现 insert() 方法"></a>实现 insert() 方法</h5><h6 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// position = 0 的情况</span></span><br><span class="line">    <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">    newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一些变量</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">    <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">    newNode.next = currentNode;</span><br><span class="line">    previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-2"><a href="#代码测试-2" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 insert 方法</span></span><br><span class="line">linkedList.insert(<span class="number">0</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">linkedList.insert(<span class="number">2</span>, <span class="string">&quot;456&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 123 AA 456 BB CC</span></span><br></pre></td></tr></table></figure><h5 id="实现-getData-方法"><a href="#实现-getData-方法" class="headerlink" title="实现 getData() 方法"></a>实现 getData() 方法</h5><p>获取指定位置（position）的 data。</p><h6 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-3"><a href="#代码测试-3" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 getData 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.getData(<span class="number">0</span>)); <span class="comment">//--&gt; 123</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.getData(<span class="number">1</span>)); <span class="comment">//--&gt; AA</span></span><br></pre></td></tr></table></figure><h5 id="实现-indexOf-方法"><a href="#实现-indexOf-方法" class="headerlink" title="实现 indexOf() 方法"></a>实现 indexOf() 方法</h5><p>indexOf(data) 返回指定 data 的 index，如果没有，返回 -1。</p><h6 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-4"><a href="#代码测试-4" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 indexOf 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">&quot;AA&quot;</span>)); <span class="comment">//--&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">&quot;ABC&quot;</span>)); <span class="comment">//--&gt; -1</span></span><br></pre></td></tr></table></figure><h5 id="实现-update-方法"><a href="#实现-update-方法" class="headerlink" title="实现 update() 方法"></a>实现 update() 方法</h5><p>update(position, data) 修改指定位置节点的 data。</p><h6 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-5"><a href="#代码测试-5" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 update 方法</span></span><br><span class="line">linkedList.update(<span class="number">0</span>, <span class="string">&quot;12345&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 AA 456 BB CC</span></span><br><span class="line">linkedList.update(<span class="number">1</span>, <span class="string">&quot;54321&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456 BB CC</span></span><br></pre></td></tr></table></figure><h5 id="实现-removeAt-方法"><a href="#实现-removeAt-方法" class="headerlink" title="实现 removeAt() 方法"></a>实现 removeAt() 方法</h5><p>removeAt(position) 删除指定位置的节点。</p><h6 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// position = 0 的情况</span></span><br><span class="line">    <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">    <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">    previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-6"><a href="#代码测试-6" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 removeAt 方法</span></span><br><span class="line">linkedList.removeAt(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456 CC</span></span><br></pre></td></tr></table></figure><h5 id="实现-remove-方法"><a href="#实现-remove-方法" class="headerlink" title="实现 remove() 方法"></a>实现 remove() 方法</h5><p>remove(data) 删除指定 data 所在的节点。</p><h6 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-7"><a href="#代码测试-7" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 remove 方法</span></span><br><span class="line">linkedList.remove(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456</span></span><br></pre></td></tr></table></figure><h5 id="实现-isEmpty-方法"><a href="#实现-isEmpty-方法" class="headerlink" title="实现 isEmpty() 方法"></a>实现 isEmpty() 方法</h5><p>isEmpty() 判断链表是否为空。</p><h6 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-8"><a href="#代码测试-8" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 isEmpty 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.isEmpty()); <span class="comment">//--&gt; false</span></span><br></pre></td></tr></table></figure><h5 id="实现-size-方法"><a href="#实现-size-方法" class="headerlink" title="实现 size() 方法"></a>实现 size() 方法</h5><p>size() 获取链表的长度。</p><h6 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码测试-9"><a href="#代码测试-9" class="headerlink" title="代码测试"></a>代码测试</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试 size 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.size()); <span class="comment">//--&gt; 3</span></span><br></pre></td></tr></table></figure><h5 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    data;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">      <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">      <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">      currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化一些变量</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">      <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 获取指定位置的 data</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 返回指定 data 的 index，如果没有，返回 -1。</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update() 修改指定位置节点的 data</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">      <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove() 删除指定 data 的节点</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 链表数据以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;认识链表&quot;&gt;&lt;a href=&quot;#认识链表&quot; class=&quot;headerlink&quot; title=&quot;认识链表&quot;&gt;&lt;/a&gt;认识链表&lt;/h3&gt;&lt;h4 id=&quot;链表和数组&quot;&gt;&lt;a href=&quot;#链表和数组&quot; class=&quot;headerlink&quot; title=&quot;链表和数组&quot;&gt;
      
    
    </summary>
    
    
      <category term="算法专辑" scheme="https://xpoet.cn/categories/%E7%AE%97%E6%B3%95%E4%B8%93%E8%BE%91/"/>
    
    
      <category term="JavaScript" scheme="https://xpoet.cn/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="https://xpoet.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://xpoet.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="单向链表" scheme="https://xpoet.cn/tags/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数据结构与算法（四）队列结构</title>
    <link href="https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84/"/>
    <id>https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84/</id>
    <published>2020-07-21T09:23:34.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认识队列"><a href="#认识队列" class="headerlink" title="认识队列"></a>认识队列</h3><p>队列（Queue）是一种运算受限的线性表，特点：先进先出。(FIFO：First In First Out)</p><p><strong>受限之处：</strong></p><ul><li>只允许在表的前端（front）进行删除操作。</li><li>在表的后端（rear）进行插入操作。</li></ul><p>生活中类似队列结构的场景：</p><ul><li>排队,，比如在电影院，商场，甚至是厕所排队。</li><li>优先排队的人，优先处理。 (买票、结账、WC)。</li></ul><p><img src="https://user-images.githubusercontent.com/24516169/88038526-e9f6c880-cb78-11ea-859d-1faaaebed3bf.png" alt="queue"></p><h4 id="队列图解"><a href="#队列图解" class="headerlink" title="队列图解"></a>队列图解</h4><p><img src="https://user-images.githubusercontent.com/24516169/88038782-45c15180-cb79-11ea-8439-bdc7e240d10d.png" alt="queue"></p><h4 id="队列在程序中的应用"><a href="#队列在程序中的应用" class="headerlink" title="队列在程序中的应用"></a>队列在程序中的应用</h4><ul><li>打印队列：计算机打印多个文件的时候，需要排队打印。</li><li>线程队列：当开启多线程时，当新开启的线程所需的资源不足时就先放入线程队列，等待 CPU 处理。</li></ul><h3 id="队列的实现"><a href="#队列的实现" class="headerlink" title="队列的实现"></a>队列的实现</h3><p>队列的实现和栈一样，有两种方案：</p><ul><li>基于数组实现。</li><li>基于链表实现。</li></ul><h4 id="队列常见的操作"><a href="#队列常见的操作" class="headerlink" title="队列常见的操作"></a>队列常见的操作</h4><ul><li><code>enqueue(element)</code>：向队列尾部添加一个（或多个）新的项。</li><li><code>dequeue()</code>：移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。</li><li><code>front()</code>：返回队列中的第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息与 Stack 类的 peek 方法非常类似）。</li><li><code>isEmpty()</code>：如果队列中不包含任何元素，返回 true，否则返回 false。</li><li><code>size()</code>：返回队列包含的元素个数，与数组的 length 属性类似。</li><li><code>toString()</code>：将队列中的内容，转成字符串形式。</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ES6 实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  items = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue() 入队，将元素加入到队列中</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除前端元素，返回删除的元素</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的前端元素</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队操作</span></span><br><span class="line">queue.enqueue(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(queue.items); <span class="comment">//--&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队操作（先进先出）</span></span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.items); <span class="comment">//--&gt; [&quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看队头的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.front()); <span class="comment">//--&gt; c</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.toString()); <span class="comment">//--&gt; c d</span></span><br></pre></td></tr></table></figure><h3 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h3><p>使用队列实现小游戏：<strong>击鼓传花</strong>。</p><p>分析：传入一组数据集合和设定的数字 number，循环遍历数组内元素，遍历到的元素为指定数字 number 时将该元素删除，直至数组剩下一个元素。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passGame</span>(<span class="params">nameList, number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1、new 一个 Queue 对象</span></span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、将 nameList 里面的每一个元素入队</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">of</span> nameList) &#123;</span><br><span class="line">    queue.enqueue(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、开始数数</span></span><br><span class="line">  <span class="comment">// 队列中只剩下 1 个元素时就停止数数</span></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 不是 number 时，重新加入到队尾</span></span><br><span class="line">    <span class="comment">// 是 number 时，将其删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; number - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// number 数字之前的人重新放入到队尾（即把队头删除的元素，重新加入到队列中）</span></span><br><span class="line">      queue.enqueue(queue.dequeue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// number 对应这个人，直接从队列中删除</span></span><br><span class="line">    <span class="comment">// 由于队列没有像数组一样的下标值不能直接取到某一元素，</span></span><br><span class="line">    <span class="comment">// 所以采用，把 number 前面的 number - 1 个元素先删除后添加到队列末尾，</span></span><br><span class="line">    <span class="comment">// 这样第 number 个元素就排到了队列的最前面，可以直接使用 dequeue 方法进行删除</span></span><br><span class="line">    queue.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、获取最后剩下的那个人</span></span><br><span class="line">  <span class="keyword">const</span> endName = queue.front();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、返回这个人在原数组中对应的索引</span></span><br><span class="line">  <span class="keyword">return</span> nameList.indexOf(endName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;lily&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;tony&quot;</span>, <span class="string">&quot;jack&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> targetIndex = passGame(names, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;击鼓传花&quot;</span>, names[targetIndex]); <span class="comment">//--&gt; lily</span></span><br></pre></td></tr></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p>优先级队列主要考虑的问题：</p><ul><li>每个元素不再只是一个数据，还包含数据的优先级。</li><li>在添加数据过程中，根据优先级放入到正确位置。</li></ul><h4 id="优先队列的实现"><a href="#优先队列的实现" class="headerlink" title="优先队列的实现"></a>优先队列的实现</h4><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> </span>&#123;</span><br><span class="line">  items = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类 </span></span><br><span class="line">  QueueElement = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.element = element;</span><br><span class="line">      <span class="built_in">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue() 入队，将元素按优先级加入到队列中</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据传入的元素，创建 QueueElement 对象</span></span><br><span class="line">    <span class="keyword">const</span> queueElement = <span class="keyword">new</span> <span class="built_in">this</span>.QueueElement(element, priority);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">// 如果为空，不用判断优先级，直接添加</span></span><br><span class="line">      <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 定义一个变量记录是否成功添加了新元素</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 让新插入的元素进行优先级比较，priority 值越小，优先级越大</span></span><br><span class="line">        <span class="keyword">if</span> (queueElement.priority &lt; <span class="built_in">this</span>.items[i].priority) &#123;</span><br><span class="line">          <span class="comment">// 在指定的位置插入元素</span></span><br><span class="line">          <span class="built_in">this</span>.items.splice(i, <span class="number">0</span>, queueElement);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果遍历完所有元素，优先级都大于新插入的元素，就将新插入的元素插入到最后</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除前端元素，返回删除的元素</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的前端元素</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item.element + <span class="string">&quot;-&quot;</span> + item.priority + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;B&quot;</span>, <span class="number">15</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;C&quot;</span>, <span class="number">11</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;D&quot;</span>, <span class="number">20</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;E&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;A&quot;, priority: 10&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;C&quot;, priority: 11&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.size()); <span class="comment">//--&gt; 3</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.toString()); <span class="comment">//--&gt; B-15 E-18 D-20</span></span><br></pre></td></tr></table></figure><h3 id="数组、栈和队列图解"><a href="#数组、栈和队列图解" class="headerlink" title="数组、栈和队列图解"></a>数组、栈和队列图解</h3><p><img src="https://user-images.githubusercontent.com/24516169/88051118-b02ebd80-cb8a-11ea-9acf-4329cbbff6fc.png" alt="array-stack-queue"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;认识队列&quot;&gt;&lt;a href=&quot;#认识队列&quot; class=&quot;headerlink&quot; title=&quot;认识队列&quot;&gt;&lt;/a&gt;认识队列&lt;/h3&gt;&lt;p&gt;队列（Queue）是一种运算受限的线性表，特点：先进先出。(FIFO：First In First Out)&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="算法专辑" scheme="https://xpoet.cn/categories/%E7%AE%97%E6%B3%95%E4%B8%93%E8%BE%91/"/>
    
    
      <category term="JavaScript" scheme="https://xpoet.cn/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="https://xpoet.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://xpoet.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="队列" scheme="https://xpoet.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数据结构与算法（三）栈结构</title>
    <link href="https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E6%A0%88%E7%BB%93%E6%9E%84/"/>
    <id>https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E6%A0%88%E7%BB%93%E6%9E%84/</id>
    <published>2020-07-21T03:49:12.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>数组是一个线性结构，并且可以在数组的任意位置插入和删除元素。<br>但是有时候，我们为了实现某些功能，必须对这种任意性加以限制。<br>栈和队列就是比较常见的受限的线性结构。</p><p>栈（stack）是一种运算受限的线性表：</p><ul><li><code>LIFO（last in first out）</code>表示就是后进入的元素，第一个弹出栈空间。类似于自动餐托盘，最后放上的托盘，往往先把拿出去使用。</li><li>其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。</li><li>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；</li><li>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</li></ul><p>如下图所示：<br><img src="https://user-images.githubusercontent.com/24516169/88035463-caf63780-cb74-11ea-910d-e396a83659ea.png" alt="stack"></p><p>栈的特点：<strong>先进后出，后进先出</strong>。</p><h3 id="程序中的栈结构"><a href="#程序中的栈结构" class="headerlink" title="程序中的栈结构"></a>程序中的栈结构</h3><ul><li><p>函数调用栈：A(B(C(D())))：<br>即 A 函数中调用 B，B 调用 C，C 调用 D；在 A 执行的过程中会将 A 压入栈，随后 B 执行时 B 也被压入栈，函数 C 和 D 执行时也会被压入栈。所以当前栈的顺序为：A-&gt;B-&gt;C-&gt;D（栈顶）；函数 D 执行完之后，会弹出栈被释放，弹出栈的顺序为 D-&gt;C-&gt;B-&gt;A;</p></li><li><p>递归：<br>为什么没有停止条件的递归会造成栈溢出？比如函数 A 为递归函数，不断地调用自己（因为函数还没有执行完，不会把函数弹出栈），不停地把相同的函数 A 压入栈，最后造成栈溢出（Stack Overfloat）。</p></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>题目：有 6 个元素 6，5，4，3，2，1 按顺序进栈，问下列哪一个不是合法的出栈顺序？</p><ul><li>A：5 4 3 6 1 2 （√）</li><li>B：4 5 3 2 1 6 （√）</li><li>C：3 4 6 5 2 1 （×）</li><li>D：2 3 4 1 5 6 （√）</li></ul><p>题目所说的按顺序进栈指的不是一次性全部进栈，而是有进有出，进栈顺序为 6 -&gt; 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1。</p><p>解析：</p><ul><li>A 答案：65 进栈，5 出栈，4 进栈出栈，3 进栈出栈，6 出栈，21 进栈，1 出栈，2 出栈（整体入栈顺序符合 654321）。</li><li>B 答案：654 进栈，4 出栈，5 出栈，3 进栈出栈，2 进栈出栈，1 进栈出栈，6 出栈（整体的入栈顺序符合 654321）。</li><li>C 答案：6543 进栈，3 出栈，4 出栈，之后应该 5 出栈而不是 6，所以错误。</li><li>D 答案：65432 进栈，2 出栈，3 出栈，4 出栈，1 进栈出栈，5 出栈，6 出栈。符合入栈顺序。</li></ul><h3 id="栈结构实现"><a href="#栈结构实现" class="headerlink" title="栈结构实现"></a>栈结构实现</h3><h4 id="栈常见的操作"><a href="#栈常见的操作" class="headerlink" title="栈常见的操作"></a>栈常见的操作</h4><ul><li><code>push()</code>：添加一个新元素到栈顶位置。</li><li><code>pop()</code>：移除栈顶的元素，同时返回被移除的元素。</li><li><code>peek()</code>：返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）。</li><li><code>isEmpty()</code>：如果栈里没有任何元素就返回 <code>true</code>，否则返回 <code>false</code>。</li><li><code>size()</code>：返回栈里的元素个数。这个方法和数组的 <code>length</code> 属性类似。</li><li><code>toString()</code>：将栈结构的内容以字符串的形式返回。</li></ul><h4 id="JavaScript-代码实现栈结构"><a href="#JavaScript-代码实现栈结构" class="headerlink" title="JavaScript 代码实现栈结构"></a>JavaScript 代码实现栈结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 ES6 实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  items = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push() 压栈操作，给栈中添加元素</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pop() 出栈操作，从栈中取出元素，并返回取出的那个元素</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// peek() 查看栈顶元素</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断栈是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取栈中元素个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 返回以字符串形式的栈内元素数据</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试栈结构"><a href="#测试栈结构" class="headerlink" title="测试栈结构"></a>测试栈结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">22</span>);</span><br><span class="line">stack.push(<span class="number">333</span>);</span><br><span class="line">stack.push(<span class="number">4444</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stack.items); <span class="comment">//--&gt; [1, 22, 333, 4444]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stack.pop()); <span class="comment">//--&gt; 444</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.pop()); <span class="comment">//--&gt; 333</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.peek()); <span class="comment">//--&gt; 22</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.toString()); <span class="comment">//--&gt; 1 22</span></span><br></pre></td></tr></table></figure><h3 id="栈结构的简单应用"><a href="#栈结构的简单应用" class="headerlink" title="栈结构的简单应用"></a>栈结构的简单应用</h3><p>利用栈结构的特点封装十进制转换为二进制的函数。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十进制转换成二进制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2bin</span>(<span class="params">dec</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// new 一个 Stack，保存余数</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当不确定循环次数时，使用 while 循环</span></span><br><span class="line">  <span class="keyword">while</span> (dec &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 除二取余法</span></span><br><span class="line">    stack.push(dec % <span class="number">2</span>); <span class="comment">// 获取余数，放入栈中</span></span><br><span class="line">    dec = <span class="built_in">Math</span>.floor(dec / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> binaryString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 不断地从栈中取出元素（0 或 1），并拼接到一起。</span></span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    binaryString += stack.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证十进制转换二进制方法</span></span><br><span class="line"><span class="built_in">console</span>.log(dec2bin(<span class="number">10</span>)); <span class="comment">//--&gt; 1010</span></span><br><span class="line"><span class="built_in">console</span>.log(dec2bin(<span class="number">100</span>)); <span class="comment">//--&gt; 1100100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数组是一个线性结构，并且可以在数组的任意位置插入和删除元素。&lt;br&gt;但是有时候，我们为了实现某些功能，必须对这种任意性加以限制。&lt;br&gt;栈和队列就是比较常见的受限的线性结构。&lt;/p&gt;
&lt;p&gt;栈（stack）是一种运算受限的线性表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LI
      
    
    </summary>
    
    
      <category term="算法专辑" scheme="https://xpoet.cn/categories/%E7%AE%97%E6%B3%95%E4%B8%93%E8%BE%91/"/>
    
    
      <category term="JavaScript" scheme="https://xpoet.cn/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="https://xpoet.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://xpoet.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="https://xpoet.cn/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数据结构与算法（二）数组结构</title>
    <link href="https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84/"/>
    <id>https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84/</id>
    <published>2020-07-21T03:48:56.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>几乎所有的编程语言都原生支持数组类型，因为数组是最简单的内存数据结构。<br>数组通常情况下用于存储一系列同一种数据类型的值。<br>但在 JavaScript 里，数组中可以保存不同类型的值。但我们还是要遵守最佳实践，别这么做（大多数语言都没这个能力）。</p><h3 id="创建和初始化数组"><a href="#创建和初始化数组" class="headerlink" title="创建和初始化数组"></a>创建和初始化数组</h3><ul><li><p>new Array()<br><code>const daysOfWeek = new Array(&#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;,&#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;);</code></p></li><li><p>[]<br><code>const daysOfWeek = [&#39;Sunday&#39;, &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;];</code></p></li></ul><h3 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h3><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ul><li>添加一个元素到数组的最后位置 <code>array.push(item)</code></li><li>在数组首位插入一个元素 <code>array.unshift(item)</code></li><li>在指定索引位置插入元素 <code>array.splice(index, 0, item)</code><br>splice() 第二个参数为 0 时，表示插入数据。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 在 索引 0 的位置，插入 A</span></span><br><span class="line">myArray.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">//--&gt; [&#x27;A&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul><li>删除数组最后的元素 <code>array.pop(item)</code></li><li>删除数组首位的元素 <code>array.shift(item)</code></li><li>删除指定索引位置的元素 <code>array.splice(start, number)</code><br>例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 删除索引 4 位置起，2 个元素</span></span><br><span class="line">myArray2.splice(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray2); <span class="comment">//--&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><ul><li>修改指定索引位置的元素 <code>array.splice(index, 1, item)</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 修改 索引 1 的位置的元素为 AA</span></span><br><span class="line">myArray2.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, &quot;AA&quot;, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li><li>修改指定索引位置的几个元素 <code>array.splice(index, number, item)</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="comment">// 在 索引 2 的位置起，修改两个元素为 AA BB</span></span><br><span class="line">myArray2.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, 2, &quot;AA&quot;, &quot;BB&quot;, 5, 6, 7]</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;几乎所有的编程语言都原生支持数组类型，因为数组是最简单的内存数据结构。&lt;br&gt;数组通常情况下用于存储一系列同一种数据类型的值。&lt;br&gt;但在 JavaScript 里，数组中可以保存不同类型的值。但我们还是要遵守最佳实践，别这么做（大多数语言都没这个能力）。&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
    
      <category term="算法专辑" scheme="https://xpoet.cn/categories/%E7%AE%97%E6%B3%95%E4%B8%93%E8%BE%91/"/>
    
    
      <category term="JavaScript" scheme="https://xpoet.cn/tags/JavaScript/"/>
    
      <category term="数组" scheme="https://xpoet.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="数据结构" scheme="https://xpoet.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://xpoet.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数据结构与算法（一）前言</title>
    <link href="https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E8%A8%80/"/>
    <id>https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E8%A8%80/</id>
    <published>2020-07-21T03:41:22.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h2><h3 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h3><ul><li><p>官方定义</p><p>无</p></li><li><p>民间定义</p><ul><li>“数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。” — 《数据结构、算法与应用》</li><li>“数据结构是 ADT（抽象数据类型 Abstract Data Type）的物理实现。” — 《数据结构与算法分析》</li><li>“数据结构（data structure）是计算机中存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来最优效率的算法。” —中文维基百科</li></ul></li><li><p>从自己角度认识</p><p>在计算机中，存储和组织数据的方式。</p></li></ul><h3 id="数据结构在生活中应用"><a href="#数据结构在生活中应用" class="headerlink" title="数据结构在生活中应用"></a>数据结构在生活中应用</h3><p>我们知道，计算机中数据量非常庞大，如何以高效的方式组织和存储呢?</p><p>例如：一个庞大的图书馆中存放了大量的书籍，我们不仅仅要把书放进入，还应该在合适的时候能够取出来。</p><p>图书摆放要使得两个相关操作方便实现：</p><ul><li>操作 1：新书怎么插入？</li><li>操作 2：怎么找到某本指定的书？</li></ul><p>图书各种摆放方式：</p><ul><li><p>方法 1：随便放</p><ul><li>操作 1：哪里有空位放哪里。</li><li>操作 2：找某本书，累死。</li></ul></li><li><p>方法 2：按照书名的拼音字母顺序排放</p><ul><li>操作 1：新进一本《阿 Q 正传》， 按照字母顺序找到位置，插入。</li><li>操作 2：二分查找法。</li></ul></li><li><p>方法 3：把书架划分成几块区域，按照类别存放，类别中按照字母顺序</p><ul><li>操作 1：先定类别，二分查找确定位置，移出空位。</li><li>操作 2：先定类别，再二分查找。</li></ul></li></ul><p>结论：</p><ul><li>解决问题方法的效率，根据数据的组织方式有关。</li><li>计算机中存储的数据量相对于图书馆的书籍来说数据量更大，数据更加多。</li><li>以什么样的方式，来存储和组织我们的数据才能在使用数据时更加方便呢?</li><li>这就是数据结构需要考虑的问题。</li></ul><h3 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h3><ul><li>数组（Aarray）</li><li>栈（Stack）</li><li>链表（Linked List）</li><li>图（Graph）</li><li>散列表（Hash）</li><li>队列（Queue）</li><li>树（Tree）</li><li>堆（Heap）</li></ul><blockquote><p>注意：数据结构与算法与语言无关，常见的编程语言都有<strong>直接或间接</strong>的使用上述常见的数据结构。</p></blockquote><h2 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h2><h3 id="算法（Algorithm）的定义"><a href="#算法（Algorithm）的定义" class="headerlink" title="算法（Algorithm）的定义"></a>算法（Algorithm）的定义</h3><ul><li>一个有限指令集，每条指令的描述不依赖于语言。</li><li>接收一些输入（有些情况下不需要输入）。</li><li>产生输出。</li><li>一定在有限步骤之后终止。</li></ul><h3 id="算法通俗理解"><a href="#算法通俗理解" class="headerlink" title="算法通俗理解"></a>算法通俗理解</h3><ul><li>Algorithm 这个单词本意就是解决问题的办法/步骤逻辑。</li><li>数据结构的实现，离不开算法。</li></ul><h3 id="算法案例"><a href="#算法案例" class="headerlink" title="算法案例"></a>算法案例</h3><p>假如上海和杭州之间有一条高架线，高架线长度是 1,000,000 米，有一天高架线中有其中一米出现了故障，请你想出一种算法，可以快速定位到处问题的地方。</p><ul><li><p>线性查找</p><ul><li>从上海的起点开始一米一米的排查，最终一定能找到出问题的线段。</li><li>但是如果线段在另一头，我们需要排查 1,000,000 次，这是最坏的情况，平均需要 500,000 次。</li></ul></li><li><p>二分查找</p><ul><li>从中间位置开始排查，看一下问题出在上海到中间位置，还是中间到杭州的位置。</li><li>查找对应的问题后，再从中间位置分开，重新锁定一般的路程。</li><li>最坏的情况，需要多少次可以排查完呢? 最坏的情况是 20 次就可以找到出问题的地方。</li><li>怎么计算出来的呢? log(1000000, 2)，以 2 位底，1000000 的对数 ≈ 20。</li></ul></li></ul><p>结论：<br>你会发现，解决问题的办法有很多，但是好的算法对比于差的算法，效率天壤之别。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是数据结构？&quot;&gt;&lt;a href=&quot;#什么是数据结构？&quot; class=&quot;headerlink&quot; title=&quot;什么是数据结构？&quot;&gt;&lt;/a&gt;什么是数据结构？&lt;/h2&gt;&lt;h3 id=&quot;数据结构的定义&quot;&gt;&lt;a href=&quot;#数据结构的定义&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="算法专辑" scheme="https://xpoet.cn/categories/%E7%AE%97%E6%B3%95%E4%B8%93%E8%BE%91/"/>
    
    
      <category term="JavaScript" scheme="https://xpoet.cn/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="https://xpoet.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://xpoet.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数据结构与算法学习笔记（专辑）</title>
    <link href="https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%93%E8%BE%91%EF%BC%89/"/>
    <id>https://xpoet.cn/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%93%E8%BE%91%EF%BC%89/</id>
    <published>2020-07-20T14:32:31.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 数据结构与算法学习笔记（专辑）是作者根据哔哩哔哩<a class="link"   href="https://www.bilibili.com/video/BV1x7411L7Q7?p=1" >《coderwhy 的 JavaScript 数据结构与算法》<i class="fas fa-external-link-alt"></i></a>视频教程整理而得，仅供大家查阅，欢迎指出错误。</p><p><strong>目录</strong></p><ul><li><a href="/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E5%89%8D%E8%A8%80/">JavaScript 数据结构与算法（一）前言</a></li><li><a href="/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84/">JavaScript 数据结构与算法（二）数组结构</a></li><li><a href="/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E6%A0%88%E7%BB%93%E6%9E%84/">JavaScript 数据结构与算法（三）栈结构</a></li><li><a href="/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E9%98%9F%E5%88%97%E7%BB%93%E6%9E%84/">JavaScript 数据结构与算法（四）队列结构</a></li><li><a href="/2020/07/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84/">JavaScript 数据结构与算法（五）单向链表结构</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript 数据结构与算法学习笔记（专辑）是作者根据哔哩哔哩&lt;a class=&quot;link&quot;   href=&quot;https://www.bilibili.com/video/BV1x7411L7Q7?p=1&quot; &gt;《coderwhy 的 JavaScript 数据结构与
      
    
    </summary>
    
    
      <category term="算法专辑" scheme="https://xpoet.cn/categories/%E7%AE%97%E6%B3%95%E4%B8%93%E8%BE%91/"/>
    
    
      <category term="JavaScript" scheme="https://xpoet.cn/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="https://xpoet.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://xpoet.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>15个必须掌握的 JavaScript 数组方法</title>
    <link href="https://xpoet.cn/2020/06/15%E4%B8%AA%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84JavaScript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>https://xpoet.cn/2020/06/15%E4%B8%AA%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84JavaScript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-06-09T08:37:52.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，数组是一个特殊的变量，用于存储不同的元素。它具有一些内置属性和方法，可用于根据需要添加，删除，迭代或操作数。并且了解 JavaScript 数组方法可以提升你的开发技能。</p><p>在本文中，我们将介绍 15 种关于 JavaScript 的数组方法，这些方法可以帮助你正确地处理数据。</p><ul><li>some()</li><li>reduce()</li><li>Every()</li><li>map()</li><li>flat()</li><li>filter()</li><li>forEach()</li><li>findIndex()</li><li>find()</li><li>sort()</li><li>concat()</li><li>fill()</li><li>includes()</li><li>reverse()</li><li>flatMap()</li></ul><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p>此方法为参数传递的函数测试数组。如果有一个元素与测试元素匹配，则返回 <code>true</code>，否则返回 <code>false</code>。</p><blockquote><p><code>some()</code> 不会对空数组进行检测；<code>some()</code> 不会改变原始数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>];</span><br><span class="line">myAwesomeArray.some(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : true</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p>此方法接收一个函数作为累加器。它为数组中的每个元素依次执行回调函数，不包括数组中被删除或者从未被赋值的元素。函数应用于累加器，数组中的每个值最后只返回一个值。</p><blockquote><p><code>reduce()</code> 方法接受四个参数：初始值（上一次回调的返回值），当前元素值，当前索引，原数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">myAwesomeArray.reduce(<span class="function">(<span class="params">total, value</span>) =&gt;</span> total * value);</span><br><span class="line"><span class="comment">// 1 * 2 * 3 * 4 * 5</span></span><br><span class="line"><span class="comment">//-------&gt; Output = 120</span></span><br></pre></td></tr></table></figure><h4 id="Every"><a href="#Every" class="headerlink" title="Every()"></a>Every()</h4><p>此方法是对数组中每项运行给定函数，如果数组的每个元素都与测试匹配，则返回 <code>true</code>，反之则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>];</span><br><span class="line">myAwesomeArray.every(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myAwesomeArray2 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>];</span><br><span class="line">myAwesomeArray2.every(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : true</span></span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p>该方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。它按照原始数组元素顺序依次处理元素。</p><blockquote><p><code>map()</code> 不会对空数组进行检测；<code>map()</code> 不会改变原始数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">myAwesomeArray.map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="comment">//-------&gt; Output : 25</span></span><br><span class="line"><span class="comment">//                  16</span></span><br><span class="line"><span class="comment">//                  9</span></span><br><span class="line"><span class="comment">//                  4</span></span><br><span class="line"><span class="comment">//                  1</span></span><br></pre></td></tr></table></figure><h4 id="flat"><a href="#flat" class="headerlink" title="flat()"></a>flat()</h4><p>此方法创建一个新数组，其中包含子数组上的 <code>holden</code> 元素，并将其平整到新数组中。请注意，此方法只能进行一个级别的深度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>];</span><br><span class="line">myAwesomeArray.flat();</span><br><span class="line"><span class="comment">//-------&gt; Output : [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p>该方法接收一个函数作为参数。并返回一个新数组，该数组包含该数组的所有元素，作为参数传递的过滤函数对其返回 <code>true</code>。</p><blockquote><p><code>filter()</code> 方法是对数据中的元素进行过滤，也就是说是不能修改原数组中的数据，只能读取原数组中的数据，<code>callback</code> 需要返回布尔值；为 <code>true</code> 的时候，对应的元素留下来；为 <code>false</code> 的时候，对应的元素过滤掉。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;john&quot;</span> &#125;,  </span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Ali&quot;</span> &#125;,  </span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Mass&quot;</span> &#125;,  </span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;Mass&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line">myAwesomeArray.filter(<span class="function"><span class="params">element</span> =&gt;</span> element.name === <span class="string">&quot;Mass&quot;</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : 0:&#123;id: 3, name: &quot;Mass&quot;&#125;,</span></span><br><span class="line"><span class="comment">//                  1:&#123;id: 4, name: &quot;Mass&quot;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>此方法用于调用数组的每个元素。并将元素传递给回调函数。</p><blockquote><p><code>forEach()</code> 对于空数组是不会执行回调函数的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;john&quot;</span> &#125;,  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Ali&quot;</span> &#125;,  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Mass&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line">myAwesomeArray.forEach(<span class="function"><span class="params">element</span> =&gt;</span> <span class="built_in">console</span>.log(element.name));</span><br><span class="line"><span class="comment">//-------&gt; Output : john</span></span><br><span class="line"><span class="comment">//                  Ali</span></span><br><span class="line"><span class="comment">//                  Mass</span></span><br></pre></td></tr></table></figure><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h4><p>此方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。它为数组中的每个元素都调用一次函数执行，当数组中的元素在测试条件时返回 <code>true</code> 时, <code>findIndex()</code> 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。如果没有符合条件的元素返回 <code>-1</code>。</p><blockquote><p><code>findIndex()</code> 对于空数组，函数是不会执行的， <code>findIndex()</code> 并没有改变数组的原始值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;john&quot;</span> &#125;,  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Ali&quot;</span> &#125;,  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Mass&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">myAwesomeArray.findIndex(<span class="function"><span class="params">element</span> =&gt;</span> element.id === <span class="number">3</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : 2</span></span><br><span class="line"></span><br><span class="line">myAwesomeArray.findIndex(<span class="function"><span class="params">element</span> =&gt;</span> element.id === <span class="number">7</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : -1</span></span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>此方法返回通过测试（函数内判断）的数组的第一个元素的值。<code>find()</code> 方法为数组中的每个元素都调用一次函数执行：当数组中的元素在测试条件时回 <code>true</code> 时, <code>find()</code> 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 <code>undefined</code>。</p><blockquote><p><code>find()</code> 对于空数组，函数是不会执行的；<code>find()</code> 并没有改变数组的原始值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;john&quot;</span> &#125;,  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Ali&quot;</span> &#125;,  </span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Mass&quot;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">myAwesomeArray.find(<span class="function"><span class="params">element</span> =&gt;</span> element.id === <span class="number">3</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : &#123;id: 3, name: &quot;Mass&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">myAwesomeArray.find(<span class="function"><span class="params">element</span> =&gt;</span> element.id === <span class="number">7</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : undefined</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>此方法接收一个函数作为参数。它对数组的元素进行排序并返回它。也可以使用含有参数的 <code>sort()</code> 方法进行排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort from smallest to largest</span></span><br><span class="line">myAwesomeArray.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="comment">//  -------&gt; Output : [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort from largest to smallest</span></span><br><span class="line">myAwesomeArray.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);</span><br><span class="line"><span class="comment">//-------&gt; Output : [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>此方法用于连接两个或多个数组/值，它不会改变现有的数组。而仅仅返回被连接数组的一个新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> myAwesomeArray2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line">myAwesomeArray.concat(myAwesomeArray2);</span><br><span class="line"><span class="comment">//-------&gt; Output : [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure><h4 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h4><p>此方法的作用是使用一个固定值来替换数组中的元素。该固定值可以是字母、数字、字符串、数组等等。它还有两个可选参数，表示填充起来的开始位置（默认为 <code>0</code>）与结束位置（默认为 <code>array.length</code>）。</p><blockquote><p><code>fill()</code> 方法用于将一个固定值替换数组的元素。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// The first argument  (0) is the value</span></span><br><span class="line"><span class="comment">// The second argument (1) is the starting index</span></span><br><span class="line"><span class="comment">// The third argument  (3) is the ending index</span></span><br><span class="line">myAwesomeArray.fill(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : [1, 0, 0, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p>此方法用于判断字符串是否包含指定的子字符串。如果找到匹配的字符串则返回 <code>true</code>，否则返回 <code>false</code>。</p><blockquote><p><code>includes()</code> 方法区分大小写。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">myAwesomeArray.includes(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : true</span></span><br><span class="line"></span><br><span class="line">myAwesomeArray.includes(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// -------&gt; Output : false</span></span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p>此方法用于颠倒数组中元素的顺序。第一个元素成为最后一个，最后一个元素将成为第一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [<span class="string">&quot;e&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>];</span><br><span class="line">myAwesomeArray.reverse();</span><br><span class="line"><span class="comment">// -------&gt; Output : [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h4><p>该方法将函数应用于数组的每个元素，然后将结果压缩为一个新数组。它在一个函数中结合了 <code>flat()</code> 和 <code>map()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAwesomeArray = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>], [<span class="number">5</span>]];</span><br><span class="line">myAwesomeArray.flatMap(<span class="function"><span class="params">arr</span> =&gt;</span> arr * <span class="number">10</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : [10, 20, 30, 40, 50]</span></span><br><span class="line"><span class="comment">// With .flat() and .map()</span></span><br><span class="line">myAwesomeArray.flat().map(<span class="function"><span class="params">arr</span> =&gt;</span> arr * <span class="number">10</span>);</span><br><span class="line"><span class="comment">//-------&gt; Output : [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 JavaScript 中，数组是一个特殊的变量，用于存储不同的元素。它具有一些内置属性和方法，可用于根据需要添加，删除，迭代或操作数。并且了解 JavaScript 数组方法可以提升你的开发技能。&lt;/p&gt;
&lt;p&gt;在本文中，我们将介绍 15 种关于 JavaScript 
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://xpoet.cn/tags/JavaScript/"/>
    
      <category term="数组" scheme="https://xpoet.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>中文文案排版指北</title>
    <link href="https://xpoet.cn/2020/05/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/"/>
    <id>https://xpoet.cn/2020/05/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/</id>
    <published>2020-05-06T14:00:17.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。」——<a class="link"   href="https://github.com/vinta/pangu.js" >vinta/paranoid-auto-spacing<i class="fas fa-external-link-alt"></i></a></p><a id="more"></a><h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入屋宽带有 10 Gbps，SSD 一共有 20 TB</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入屋宽带有 10Gbps，SSD 一共有 20TB</p></blockquote><p>例外：度 / 百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p><p>刚刚买了一部 iPhone， 好开心！</p></blockquote><h3 id="用-text-spacing-来挽救？"><a href="#用-text-spacing-来挽救？" class="headerlink" title="用 text-spacing 来挽救？"></a>用 <code>text-spacing</code> 来挽救？</h3><p>CSS Text Module Level 4 的 <a href="https://www.w3.org/TR/css-text-4/#text-spacing-property"><code>text-spacing</code></a> 和 Microsoft 的 <a href="https://msdn.microsoft.com/library/ms531164(v=vs.85).aspx"><code>-ms-text-autospace</code></a> 可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 macOS、iOS、Windows 等用户介面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p><p>德国队竟然战胜了巴西队！！！！！！！！</p><p>她竟然对你说「喵」？？！！</p><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a class="link"   href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" >全形和半形<i class="fas fa-external-link-alt"></i></a>』。</p><h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎！</p><p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎！</p><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这个蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这个蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全形数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其内容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其内容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其内容使用半角标点"></a>遇到完整的英文整句、特殊名词，其内容使用半角标点</h3><p>正确：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry, stay foolish.」</p><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry，stay foolish。」</p><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论内容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p><p>使用 GITHUB 登录</p><p>使用 Github 登录</p><p>使用 gitHub 登录</p><p>使用 gｲんĤЦ8 登录</p><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标淮的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p><p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a>并分配给相关同事。</p><p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>仓库</th><th>语言</th></tr></thead><tbody><tr><td><a class="link"   href="https://github.com/vinta/paranoid-auto-spacing" >vinta/paranoid-auto-spacing<i class="fas fa-external-link-alt"></i></a></td><td>JavaScript</td></tr><tr><td><a class="link"   href="https://github.com/huei90/pangu.node" >huei90/pangu.node<i class="fas fa-external-link-alt"></i></a></td><td>Node.js</td></tr><tr><td><a class="link"   href="https://github.com/huacnlee/auto-correct" >huacnlee/auto-correct<i class="fas fa-external-link-alt"></i></a></td><td>Ruby</td></tr><tr><td><a class="link"   href="https://github.com/sparanoid/space-lover" >sparanoid/space-lover<i class="fas fa-external-link-alt"></i></a></td><td>PHP (WordPress)</td></tr><tr><td><a class="link"   href="https://github.com/NauxLiu/auto-correct" >nauxliu/auto-correct<i class="fas fa-external-link-alt"></i></a></td><td>PHP</td></tr><tr><td><a class="link"   href="https://github.com/jxlwqq/chinese-typesetting" >jxlwqq/chinese-typesetting<i class="fas fa-external-link-alt"></i></a></td><td>PHP</td></tr><tr><td><a class="link"   href="https://github.com/hotoo/pangu.vim" >hotoo/pangu.vim<i class="fas fa-external-link-alt"></i></a></td><td>Vim</td></tr><tr><td><a class="link"   href="https://github.com/sparanoid/grunt-auto-spacing" >sparanoid/grunt-auto-spacing<i class="fas fa-external-link-alt"></i></a></td><td>Node.js (Grunt)</td></tr><tr><td><a class="link"   href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk" >hjiang/scripts/add-space-between-latin-and-cjk<i class="fas fa-external-link-alt"></i></a></td><td>Python</td></tr><tr><td><a class="link"   href="https://github.com/hustcc/hint" >hustcc/hint<i class="fas fa-external-link-alt"></i></a></td><td>Python</td></tr><tr><td><a class="link"   href="https://github.com/studygolang/autocorrect" >studygolang/autocorrect<i class="fas fa-external-link-alt"></i></a></td><td>Go</td></tr></tbody></table><h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table><thead><tr><th>网站</th><th>文案</th><th>UGC</th></tr></thead><tbody><tr><td><a class="link"   href="https://www.apple.com/cn/" >Apple 中国<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr><tr><td><a class="link"   href="https://www.apple.com/hk/" >Apple 香港<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr><tr><td><a class="link"   href="https://www.apple.com/tw/" >Apple 台湾<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr><tr><td><a class="link"   href="https://www.microsoft.com/zh-cn/" >Microsoft 中国<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr><tr><td><a class="link"   href="https://www.microsoft.com/zh-hk/" >Microsoft 香港<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr><tr><td><a class="link"   href="https://www.microsoft.com/zh-tw/" >Microsoft 台湾<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr><tr><td><a class="link"   href="https://leancloud.cn/" >LeanCloud<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr><tr><td><a class="link"   href="https://www.v2ex.com/" >V2EX<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>是</td></tr><tr><td><a class="link"   href="https://apple4us.com/" >Apple4us<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr><tr><td><a class="link"   href="https://ruby-china.org/" >Ruby China<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>标题达成</td></tr><tr><td><a class="link"   href="https://phphub.org/" >PHPHub<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>标题达成</td></tr><tr><td><a class="link"   href="https://sspai.com/" >少数派<i class="fas fa-external-link-alt"></i></a></td><td>是</td><td>N/A</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a class="link"   href="https://www.thoughtco.com/guidelines-for-using-capital-letters-1691724" >Guidelines for Using Capital Letters - ThoughtCo.<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://en.wikipedia.org/wiki/Letter_case" >Letter case - Wikipedia<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://en.oxforddictionaries.com/grammar/punctuation" >Punctuation - Oxford Dictionaries<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://owl.english.purdue.edu/owl/section/1/6/" >Punctuation - The Purdue OWL<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.wikihow.com/Use-English-Punctuation-Correctly" >How to Use English Punctuation Correctly - wikiHow<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F" >格式 - openSUSE<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" >全形和半形 - 维基百科<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F" >引号 - 维基百科<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F" >疑问惊叹号 - 维基百科<i class="fas fa-external-link-alt"></i></a></li></ul><p><strong><em>注：本文转载 <a class="link"   href="https://github.com/sparanoid/chinese-copywriting-guidelines" >https://github.com/sparanoid/chinese-copywriting-guidelines<i class="fas fa-external-link-alt"></i></a></em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。&lt;/p&gt;
&lt;h2 id=&quot;空格&quot;&gt;&lt;a href=&quot;#空格&quot; class=&quot;headerlink&quot; title=&quot;空格&quot;&gt;&lt;/a&gt;空格&lt;/h2&gt;&lt;p&gt;「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。&lt;/p&gt;
&lt;p&gt;与大家共勉之。」——&lt;a class=&quot;link&quot;   href=&quot;https://github.com/vinta/pangu.js&quot; &gt;vinta/paranoid-auto-spacing&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术教程" scheme="https://xpoet.cn/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="文案排版" scheme="https://xpoet.cn/tags/%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>千呼万唤始出来，Hexo 主题 ILS 正式发布</title>
    <link href="https://xpoet.cn/2020/04/%E5%8D%83%E5%91%BC%E4%B8%87%E5%94%A4%E5%A7%8B%E5%87%BA%E6%9D%A5%EF%BC%8CHexo%E4%B8%BB%E9%A2%98ILS%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/"/>
    <id>https://xpoet.cn/2020/04/%E5%8D%83%E5%91%BC%E4%B8%87%E5%94%A4%E5%A7%8B%E5%87%BA%E6%9D%A5%EF%BC%8CHexo%E4%B8%BB%E9%A2%98ILS%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/</id>
    <published>2020-04-07T13:55:14.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>如你所见，ILS 界面设计十分简洁、清爽，但功能齐全、不失优雅，这正是 ILS 的开发理念。也曾尝试过花里胡哨，发现不仅配置繁琐、容易审美疲劳，而且背驰了写博客的初衷，记录生活、展示文字，应该才是搭建博客网站的最终追求，为此 ILS 应运而生。简约轻快、突出内容、化繁为简、配置简单、长期维护，如果你也喜欢或认可这些主题特点，一起来探索吧~</p><p>关于主题名 <strong>“ILS”</strong> 的由来：在主题开发之初，作者想到的几个名字都被已被用，词穷，后来干脆将名字取自 <strong>“I Like Simple「我喜欢简单」”</strong> 首字母，就是这么简单。</p><a id="more"></a><p>同时，非常欢迎感兴趣的同学 <a class="link"   href="https://juejin.im/post/6844903856971710477" >Pull Request<i class="fas fa-external-link-alt"></i></a> 加入到该主题的开发中（成为该项目的贡献者），按你的意愿来打磨 ILS。</p><h2 id="Features-功能特性"><a href="#Features-功能特性" class="headerlink" title="Features 功能特性"></a>Features 功能特性</h2><h3 id="Completed-已完成"><a href="#Completed-已完成" class="headerlink" title="Completed 已完成"></a>Completed 已完成</h3><ul><li><input checked="" disabled="" type="checkbox"> 恰到好处的留白，简约大气。</li><li><input checked="" disabled="" type="checkbox"> 响应式设计，适配多种终端。</li><li><input checked="" disabled="" type="checkbox"> 日间/夜间模式自由切换。</li><li><input checked="" disabled="" type="checkbox"> 多种代码高亮方案。</li><li><input checked="" disabled="" type="checkbox"> 语言国际化，支持中/英文。</li><li><input checked="" disabled="" type="checkbox"> 内置多款评论插件。</li><li><input checked="" disabled="" type="checkbox"> 支持全站文章搜索。</li><li><input checked="" disabled="" type="checkbox"> 支持文章顶置。</li><li><input checked="" disabled="" type="checkbox"> 代码块一键复制。</li><li><input checked="" disabled="" type="checkbox"> TOC 目录结构。</li><li><input checked="" disabled="" type="checkbox"> RSS 订阅。</li><li><input checked="" disabled="" type="checkbox"> 网站 UV 和 PV 统计。</li><li><input checked="" disabled="" type="checkbox"> 文章阅读次数统计。</li><li><input checked="" disabled="" type="checkbox"> 文章字数统计。</li><li><input checked="" disabled="" type="checkbox"> 文章阅读时长统计。</li><li><input checked="" disabled="" type="checkbox"> 页面滚动进度条提示。</li><li><input checked="" disabled="" type="checkbox"> 一键快速回到顶部。</li><li><input checked="" disabled="" type="checkbox"> 无 jQuery，代码精简。</li></ul><h3 id="Unfinished-未完成"><a href="#Unfinished-未完成" class="headerlink" title="Unfinished 未完成"></a>Unfinished 未完成</h3><ul><li><input disabled="" type="checkbox"> 图片懒加载</li><li><input disabled="" type="checkbox"> 文章点赞功能</li><li><input disabled="" type="checkbox"> 大图查看器</li><li><input disabled="" type="checkbox"> 文章版权信息</li><li><input disabled="" type="checkbox"> 在线更改字体和字号</li><li><input disabled="" type="checkbox"> 打赏功能</li><li><input disabled="" type="checkbox"> ……</li></ul><h2 id="Get-start-快速开始"><a href="#Get-start-快速开始" class="headerlink" title="Get start 快速开始"></a>Get start 快速开始</h2><p><strong>在开始使用主题之前，强烈建议你先阅读 「Easy Hexo 团队」撰写的 Hexo 教程！</strong><br><strong>链接：<a class="link"   href="https://easyhexo.com/" >https://easyhexo.com/<i class="fas fa-external-link-alt"></i></a></strong></p><h3 id="Install-安装"><a href="#Install-安装" class="headerlink" title="Install 安装"></a>Install 安装</h3><ul><li><p>使用 Git SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 git@github.com:XPoet/hexo-theme-ils.git themes/ils</span><br></pre></td></tr></table></figure><p>该方式获取的是 Master 分支最新代码，包含该主题最新的功能，但无法保证完全稳定。</p></li><li><p>下载 Release 版本</p><p><a class="link"   href="https://github.com/XPoet/hexo-theme-ils/releases" >点击此处进入该主题 Releases 版本下载页面<i class="fas fa-external-link-alt"></i></a> 请优先下载最新版本，下载完成后解压到 Hexo 博客目录的 themes 文件夹里面并重命名为 <code>ils</code>。</p></li></ul><h3 id="Enable-启用"><a href="#Enable-启用" class="headerlink" title="Enable 启用"></a>Enable 启用</h3><p>Modify <code>theme</code> setting in <code>_config.yml</code> to <code>ils</code>.<br>修改 Hexo 根目录下的 <code>_config.yml</code> 配置文件，将 <code>theme</code> 设置为 <code>ils</code> 。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">ils</span></span><br></pre></td></tr></table></figure><h3 id="Update-更新"><a href="#Update-更新" class="headerlink" title="Update 更新"></a>Update 更新</h3><ul><li>使用 Git SSH<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/ils</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li><li>下载 <a class="link"   href="https://github.com/XPoet/hexo-theme-ils/releases" >主题最新 Release 版本<i class="fas fa-external-link-alt"></i></a> 。</li></ul><h2 id="How-to-use-如何使用"><a href="#How-to-use-如何使用" class="headerlink" title="How to use 如何使用"></a>How to use 如何使用</h2><h3 id="Configuration-配置"><a href="#Configuration-配置" class="headerlink" title="Configuration 配置"></a>Configuration 配置</h3><p>以下是主题配置文件的详细说明，建议多看几遍，并且对照着来修改自己的配置文件，边修改边查看界面效果。</p><p>如遇到无法解决的问题，可以给我提 <a class="link"   href="https://github.com/XPoet/hexo-theme-ils/issues" >Issues<i class="fas fa-external-link-alt"></i></a> 。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Theme basic info (please don&#x27;t change)</span></span><br><span class="line"><span class="comment"># 主题基本信息（请勿改动）</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">theme_info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ILS</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2.0</span><span class="number">.3</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">XPoet</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/XPoet/hexo-theme-ils</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Theme style settings</span></span><br><span class="line"><span class="comment"># 主题样式设置</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">style:</span></span><br><span class="line">  <span class="comment"># Theme primary color</span></span><br><span class="line">  <span class="comment"># 主颜色，修改为自己喜欢的颜色即可，支持 rgb、十六进制格式。</span></span><br><span class="line">  <span class="comment"># 建议使用 Web 安全色，https://www.bootcss.com/p/websafecolors/</span></span><br><span class="line">  <span class="attr">primary_color:</span> <span class="string">&quot;#0066CC&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># favicon</span></span><br><span class="line">  <span class="comment"># 网站图标，把 &quot;/source/images/&quot; 目录下的 &quot;favicon.png&quot;，换成自己的图片即可。</span></span><br><span class="line">  <span class="attr">favicon:</span> <span class="string">images/favicon.png</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># avatar</span></span><br><span class="line">  <span class="comment"># 头像图片，把 &quot;/source/images/&quot; 目录下的 &quot;avatar.png&quot;，换成自己的图片即可。</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">images/avatar.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Navigation menu</span></span><br><span class="line"><span class="comment"># 导航菜单</span></span><br><span class="line"><span class="comment"># 如需新增导航页，请按下面格式填写，同时需要创建相对应的 Hexo 页面。</span></span><br><span class="line"><span class="comment"># 如何新增页面，请参考下面的教程：“Add page 添加页面”。</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="comment"># Categories: /categories</span></span><br><span class="line">  <span class="comment"># Tags: /tags</span></span><br><span class="line">  <span class="comment"># Links: /links</span></span><br><span class="line">  <span class="comment"># About: /about</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># RSS</span></span><br><span class="line"><span class="comment"># Dependencies: hexo-generator-feed</span></span><br><span class="line"><span class="comment"># See: https://github.com/hexojs/hexo-generator-feed</span></span><br><span class="line"><span class="comment"># RSS 订阅，如需启用，请先安装 Hexo 插件：hexo-generator-feed。</span></span><br><span class="line"><span class="comment"># 具体步骤，参考下面的教程：“RSS 订阅”。</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">rss:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Comment plugin</span></span><br><span class="line"><span class="comment"># 评论插件</span></span><br><span class="line"><span class="comment"># 主题内置了 Valine 和 Gitalk，只能使用其中一款。</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Valine</span></span><br><span class="line">  <span class="comment"># See: https://github.com/xCss/Valine</span></span><br><span class="line">  <span class="comment"># 如何使用 Valine，请参考官方教程：https://github.com/xCss/Valine</span></span><br><span class="line">  <span class="comment"># 获取必要的参数，在下面填写。</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="comment"># your leancloud application appid</span></span><br><span class="line">    <span class="attr">appkey:</span> <span class="comment"># your leancloud application appkey</span></span><br><span class="line">    <span class="attr">meta:</span> <span class="comment"># comment input meta, type: Array, values: [&#x27;nick&#x27;,&#x27;mail&#x27;,&#x27;link&#x27;]</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="comment"># your placeholder</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Gitalk</span></span><br><span class="line">  <span class="comment"># See: https://github.com/gitalk/gitalk</span></span><br><span class="line">  <span class="comment"># 如何使用 Gitalk，请参考官方教程：https://github.com/gitalk/gitalk</span></span><br><span class="line">  <span class="comment"># 获取必要的参数，在下面填写。</span></span><br><span class="line">  <span class="attr">gitalk:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">github_id:</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Website count</span></span><br><span class="line"><span class="comment"># 网站计数</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">website_count:</span></span><br><span class="line">  <span class="comment"># busuanzi</span></span><br><span class="line">  <span class="comment"># See: http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line">  <span class="comment"># 主题内置“不蒜子”计数，无需额外配置，选择你要开启的计数项即可。</span></span><br><span class="line">  <span class="comment"># site_uv 访问人数计数</span></span><br><span class="line">  <span class="comment"># site_pv 总访问量计数</span></span><br><span class="line">  <span class="comment"># page_pv 文章阅读量计数</span></span><br><span class="line">  <span class="attr">busuanzi_count:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">site_uv:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">site_pv:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">page_pv:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: hexo-generator-searchdb</span></span><br><span class="line"><span class="comment"># See: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="comment"># 本地搜索，如需启用，请先安装 Hexo 插件：hexo-generator-searchdb。</span></span><br><span class="line"><span class="comment"># 具体步骤，参考下面的教程：“Local search 本地搜索”。</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="comment"># trigger 搜索触发方式，输入关键字后会触发搜索，可选 auto（自动）或 manual（手动）。</span></span><br><span class="line">  <span class="comment">### auto 每输入或删除一个字符后，自动触发搜索。</span></span><br><span class="line">  <span class="comment">### manual 每输入或删除一个字符后，需要按回车键触发搜索。</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span> <span class="comment"># values: auto | manual</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="comment"># # 转义 HTML 字符串为可读字符串。</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="comment"># 在页面加载时预加载搜索数据。</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Post word count</span></span><br><span class="line"><span class="comment"># Dependencies: hexo-wordcount</span></span><br><span class="line"><span class="comment"># See: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="comment"># 文章字数统计 &amp; 阅读时长统计</span></span><br><span class="line"><span class="comment"># 如需启用，请先安装 Hexo 插件：hexo-wordcount。</span></span><br><span class="line"><span class="comment"># 在博客根目录下使用 npm 命令安装: npm i hexo-wordcount --save</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">false</span> <span class="comment"># word count, one article</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">false</span> <span class="comment"># time to read, one article</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Home page article block display settings</span></span><br><span class="line"><span class="comment"># 首页文章块底部的显示设置，可配置显示分类和标签。</span></span><br><span class="line"><span class="comment"># limit 显示分类或标签的最大个数。</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">home_article:</span></span><br><span class="line">  <span class="attr">category:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># show category in home page article block</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">3</span> <span class="comment"># max number of categories shown in home page article block</span></span><br><span class="line">  <span class="attr">tag:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># show tags in home page article block</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># max number of tags shown in home page article block</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Code copy</span></span><br><span class="line"><span class="comment"># 代码复制，代码块的复制风格可选 default | flat | mac。</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">code_copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># values: default | flat | mac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar tools</span></span><br><span class="line"><span class="comment"># 侧边栏工具（搜索按钮、昼夜模式切换按钮、RSS按钮、TOC显示切换按钮）</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">side_tools:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Back to top</span></span><br><span class="line"><span class="comment"># 回到顶部</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># 文章目录结构</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="comment"># 给文章目录自动加上序号。</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="comment"># 是否展开所有目录。</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Magic</span></span><br><span class="line"><span class="comment"># magic 启用后，主题将以简约的卡片形式显示。</span></span><br><span class="line"><span class="comment"># 可分别配置缩放效果、阴影效果。</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="attr">magic:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scale:</span> <span class="literal">false</span> <span class="comment"># scale effect when the mouse hover</span></span><br><span class="line">  <span class="attr">shadow:</span> <span class="literal">false</span> <span class="comment"># shadow effect when the mouse hover</span></span><br></pre></td></tr></table></figure><h3 id="Comment-评论"><a href="#Comment-评论" class="headerlink" title="Comment 评论"></a>Comment 评论</h3><p>主题内置了 Valine 和 Gitalk 两款评论插件，你只能使用其他一款，如果两款评论插件的 enable 都设为了 true，将使用 Valine。</p><h4 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h4><p>前往 <a class="link"   href="https://github.com/xCss/Valine" >https://github.com/xCss/Valine<i class="fas fa-external-link-alt"></i></a> 查看 Valine 如何使用，获取必要的参数，填写在配置文件里。</p><h4 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h4><ol><li>在自己的 GitHub 账号下创建新的 OAuth App，链接：<a class="link"   href="https://github.com/settings/applications/new" >https://github.com/settings/applications/new<i class="fas fa-external-link-alt"></i></a> ，Homepage URL 和 Authorization callback URL 均填写自己的域名即可。<br>例 <code>https://ils.xpoet.cn/</code></li><li>在自己的 GitHub 账号下创建新的 repository 并打开 Issues，用于存储评论内容。</li><li>把自己的 GitHub 用户名称、repository 名称 、OAuth App 的 Client ID 、Client Secret 分别填写在主题配置文件里。</li></ol><p>前往 <a class="link"   href="https://github.com/gitalk/gitalk" >https://github.com/gitalk/gitalk<i class="fas fa-external-link-alt"></i></a> 查看 Gitalk 更多信息。</p><h3 id="Post-top-文章顶置"><a href="#Post-top-文章顶置" class="headerlink" title="Post top 文章顶置"></a>Post top 文章顶置</h3><p>实现文章顶置功能，需在 Hexo 博客根目录下安装插件 **<code>hexo-generator-index-pin-top</code>**。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index-pin-top</span><br></pre></td></tr></table></figure><p>然后在 <code>_posts</code> 文件夹里的需要顶置的文章页添加 <code>top</code> 属性，<strong>top</strong> 值越大，顶置文章越靠前，参考如下。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 千呼万唤始出来，Hexo 主题 ILS 正式发布</span><br><span class="line">date: 2020-04-07 21:55:14</span><br><span class="line">tags: [Hexo]</span><br><span class="line">categories: [Hexo]</span><br><span class="line">top: 9999</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="Local-search-本地搜索"><a href="#Local-search-本地搜索" class="headerlink" title="Local search 本地搜索"></a>Local search 本地搜索</h3><ol><li><p>启用本地搜索功能，需在 Hexo 博客根目录下安装插件 **<code>hexo-generator-searchdb</code>**。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure></li><li><p>在 Hexo 配置文件 <code>_config.yml</code> 增加如下配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="comment">## https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.json</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">striptags</span></span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件 <code>_config.yml</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span> <span class="comment"># values: auto | manual</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="RSS-订阅"><a href="#RSS-订阅" class="headerlink" title="RSS 订阅"></a>RSS 订阅</h3><ol><li><p>启用 RSS 订阅功能，需先在 Hexo 博客根目录下安装插件 **<code>hexo-generator-feed</code>**。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>在 Hexo 配置文件 <code>_config.yml</code> 增加如下配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Feed Atom</span></span><br><span class="line"><span class="comment"># npm install hexo-generator-feed</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件 <code>_config.yml</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rss:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Add-page-添加页面"><a href="#Add-page-添加页面" class="headerlink" title="Add page 添加页面"></a>Add page 添加页面</h3><p><strong>Hexo 初始并没有 categories（分类）、about（关于）、links（友链）、tags（标签） 等页面，需要自己手动创建。</strong></p><p>以创建「关于」页面为例：</p><ol><li><p>在 Hexo 博客目录下执行命令，即可生成 <code>about</code> 文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure></li><li><p>创建成功后，打开博客目录下 <code>/source/about/index.md</code> 文件，即可填写自己的内容。<br>支持 Markdown 和 HTML 格式；<code>comments: true</code> 表示该页面开启评论功能。</p><p>参考如下示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-03-19 14:59:53</span><br><span class="line">comments: true</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## About me</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> XPoet「 X 诗人 」...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件启用 <code>about</code> 导航菜单。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># navigation menu</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="comment"># Category: /category</span></span><br><span class="line">  <span class="comment"># Links: /links</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about</span></span><br><span class="line">  <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></li></ol><p>其他页面的生成方式跟「关于」页面类似，此处不再赘述。</p><h3 id="MathJax-数学公式"><a href="#MathJax-数学公式" class="headerlink" title="MathJax 数学公式"></a>MathJax 数学公式</h3><p>如果要在文章中显示数学公式，可以使用插件 **<code>hexo-filter-mathjax</code>**，详情参考：<a class="link"   href="https://github.com/next-theme/hexo-filter-mathjax/" >https://github.com/next-theme/hexo-filter-mathjax/<i class="fas fa-external-link-alt"></i></a> 。<br>或按下列步骤完成相关配置：</p><ol><li><p>在 Hexo 博客根目录下安装插件 **<code>hexo-filter-mathjax</code>**。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-mathjax --save</span><br></pre></td></tr></table></figure></li><li><p>在 Hexo 配置文件 <code>_config.yml</code> 增加如下配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">none</span> <span class="comment"># or &#x27;ams&#x27; or &#x27;all&#x27;</span></span><br><span class="line">  <span class="attr">single_dollars:</span> <span class="literal">true</span> <span class="comment"># enable single dollar signs as in-line math delimiters</span></span><br><span class="line">  <span class="attr">cjk_width:</span> <span class="number">0.9</span> <span class="comment"># relative CJK char width</span></span><br><span class="line">  <span class="attr">normal_width:</span> <span class="number">0.6</span> <span class="comment"># relative normal (monospace) width</span></span><br><span class="line">  <span class="attr">append_css:</span> <span class="literal">true</span> <span class="comment"># add CSS to every page</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span> <span class="comment"># if true, every page will be rendered by mathjax regardless the `mathjax` setting in Front-matter of each article</span></span><br></pre></td></tr></table></figure></li><li><p>在文章页添加 <code>mathjax: true</code>，至此，就可以在该页面中写公式了。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">MathJax</span> <span class="string">Test</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-09-12 16:02:07</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">MathJax</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">MathJax</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">$$</span></span><br><span class="line"><span class="string">i\hbar\frac&#123;\partial&#125;&#123;\partial</span> <span class="string">t&#125;\psi=-\frac&#123;\hbar^2&#125;&#123;2m&#125;\nabla^2\psi+V\psi</span></span><br><span class="line"><span class="string">$$</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Contribution-贡献"><a href="#Contribution-贡献" class="headerlink" title="Contribution 贡献"></a>Contribution 贡献</h2><p>欢迎各种形式的贡献，包括但不限于：美化样式、增加功能、改进代码、 修复 Bug 等。</p><h2 id="Feedback-反馈"><a href="#Feedback-反馈" class="headerlink" title="Feedback 反馈"></a>Feedback 反馈</h2><p>在使用该主题过程中，如果遇到问题，请仔细阅读使用文档，或者给作者提 <code>Issue</code>。</p><h2 id="Licence-许可"><a href="#Licence-许可" class="headerlink" title="Licence 许可"></a>Licence 许可</h2><p><a class="link"   href="https://github.com/XPoet/hexo-theme-ils/blob/master/LICENSE" >MIT<i class="fas fa-external-link-alt"></i></a> Copyright (c) 2020 XPoet</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如你所见，ILS 界面设计十分简洁、清爽，但功能齐全、不失优雅，这正是 ILS 的开发理念。也曾尝试过花里胡哨，发现不仅配置繁琐、容易审美疲劳，而且背驰了写博客的初衷，记录生活、展示文字，应该才是搭建博客网站的最终追求，为此 ILS 应运而生。简约轻快、突出内容、化繁为简、配置简单、长期维护，如果你也喜欢或认可这些主题特点，一起来探索吧~&lt;/p&gt;
&lt;p&gt;关于主题名 &lt;strong&gt;“ILS”&lt;/strong&gt; 的由来：在主题开发之初，作者想到的几个名字都被已被用，词穷，后来干脆将名字取自 &lt;strong&gt;“I Like Simple「我喜欢简单」”&lt;/strong&gt; 首字母，就是这么简单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ILS" scheme="https://xpoet.cn/categories/ILS/"/>
    
    
      <category term="Hexo" scheme="https://xpoet.cn/tags/Hexo/"/>
    
      <category term="ILS" scheme="https://xpoet.cn/tags/ILS/"/>
    
  </entry>
  
  <entry>
    <title>常用 Git 命令清单</title>
    <link href="https://xpoet.cn/2019/11/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>https://xpoet.cn/2019/11/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</id>
    <published>2019-11-12T09:01:55.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>我每天使用 Git ，但是很多命令记不住。</p><p>一般来说，日常使用只要记住下图 6 个命令，就可以了。但是熟练使用，恐怕要记住 60 ～ 100 个命令。</p><p><img src="https://cdn.jsdelivr.net/gh/XPoet/image-hosting@master/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/image.10wot1m74h1c.png" alt="image"></p><p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git 的设置文件为 <code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><p>转载：<a class="link"   href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" >https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我每天使用 Git ，但是很多命令记不住。&lt;/p&gt;
&lt;p&gt;一般来说，日常使用只要记住下图 6 个命令，就可以了。但是熟练使用，恐怕要记住 60 ～ 100 个命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/XPoet/ima
      
    
    </summary>
    
    
      <category term="技术教程" scheme="https://xpoet.cn/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Git" scheme="https://xpoet.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JS 常用的正则表达式汇总</title>
    <link href="https://xpoet.cn/2019/08/JS-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
    <id>https://xpoet.cn/2019/08/JS-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%87%E6%80%BB/</id>
    <published>2019-08-01T03:33:05.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>此文收录我在开发过程中所用到的以及在各种业务场景下常用到的正则表达式，持续更新…</p><h1 id="JavaScript-正则表达式"><a href="#JavaScript-正则表达式" class="headerlink" title="JavaScript 正则表达式"></a>JavaScript 正则表达式</h1><p>正则表达式（英语：Regular Expression，在代码中常简写为 <code>regex</code>、<code>regexp</code> 或 <code>RE</code>）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</p><p>更多介绍，请参考：</p><ul><li><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" >https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.runoob.com/js/js-regexp.html" >https://www.runoob.com/js/js-regexp.html<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;正则表达式主体&#x2F;修饰符(可选)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">const RE &#x3D; &#x2F;xpoet&#x2F;i;</span><br><span class="line"></span><br><span class="line">解析：</span><br><span class="line">&#x2F;xpoet&#x2F;i 是一个正则表达式。</span><br><span class="line">xpoet 是一个正则表达式主体 (用于检索)。</span><br><span class="line">i 是一个修饰符 (搜索不区分大小写)。</span><br></pre></td></tr></table></figure><h2 id="常用的匹配规则"><a href="#常用的匹配规则" class="headerlink" title="常用的匹配规则"></a>常用的匹配规则</h2><ul><li>验证数字：<code>^[0-9]*$</code>。</li><li>验证 n 位的数字：<code>^\d&#123;n&#125;$</code>。</li><li>验证至少 n 位数字：<code>^\d&#123;n,&#125;$</code>。</li><li>验证 m-n 位的数字：<code>^\d&#123;m,n&#125;$</code>。</li><li>验证零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code>。</li><li>验证有两位小数的正实数：<code>^[0-9]+(.[0-9]&#123;2&#125;)?$</code>。</li><li>验证有1-3位小数的正实数：<code>^[0-9]+(.[0-9]&#123;1,3&#125;)?$</code>。</li><li>验证非零的正整数：<code>^\+?[1-9][0-9]*$</code>。</li><li>验证非零的负整数：<code>^\-[1-9][0-9]*$</code>。</li><li>验证非负整数（正整数 + 0）： <code>^\d+$</code>。</li><li>验证非正整数（负整数 + 0）： <code>^((-\d+)|(0+))$</code>。</li><li>验证长度为 3 的字符：<code>^.&#123;3&#125;$</code>。</li><li>验证由 26 个英文字母组成的字符串：<code>^[A-Za-z]+$</code>。</li><li>验证由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code>。</li><li>验证由26个小写英文字母组成的字符串：<code>^[a-z]+$</code>。</li><li>验证由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code>。</li><li>验证由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$</code>。</li><li>验证用户密码（格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线）：<code>^[a-zA-Z]\w&#123;5,17&#125;$</code>。</li><li>验证是否含有 <code>^%&amp;&#39;,;=?$\&quot;</code> 等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code>。</li><li>验证汉字：<code>^[\u4e00-\u9fa5],&#123;0,&#125;$</code>。</li><li>验证Email地址：<code>^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code>。</li><li>验证InternetURL：<code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$ ；^[a-zA-z]+://(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$</code>。</li><li>验证电话号码（格式为：XXXX-XXXXXXX，XXXX-XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX）：<code>^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-)?\d&#123;7,8&#125;$</code>。</li><li>验证身份证号（15位或18位数字）：<code>^\d&#123;15&#125;|\d&#123;&#125;18$</code>。</li><li>验证一年的12个月（格式为：“01”-“09”和“1”“12”）：<code>^(0?[1-9]|1[0-2])$</code>。</li><li>验证一个月的31天（格式为：01、09和1、31）：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code>。</li><li>整数：<code>^-?\d+$</code>。</li><li>非负浮点数（正浮点数 + 0）：<code>^\d+(\.\d+)?$</code>。</li><li>正浮点数：<code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code>。</li><li>非正浮点数（负浮点数 + 0）：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code>。</li><li>负浮点数：<code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code>。</li><li>浮点数：<code>^(-?\d+)(\.\d+)?$</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此文收录我在开发过程中所用到的以及在各种业务场景下常用到的正则表达式，持续更新…&lt;/p&gt;
&lt;h1 id=&quot;JavaScript-正则表达式&quot;&gt;&lt;a href=&quot;#JavaScript-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 正
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://xpoet.cn/tags/JS/"/>
    
      <category term="正则表达式" scheme="https://xpoet.cn/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>macOS 使用 Navicat 连接 MySQL 数据库</title>
    <link href="https://xpoet.cn/2019/07/macOS%E4%BD%BF%E7%94%A8Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://xpoet.cn/2019/07/macOS%E4%BD%BF%E7%94%A8Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2019-07-11T10:26:05.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><ul><li><p>从 MySQL 官网下载安装包进行安装，链接：<a class="link"   href="https://www.mysql.com/downloads/" >https://www.mysql.com/downloads/<i class="fas fa-external-link-alt"></i></a></p></li><li><p>使用终端命令安装，需提前安装 Homebrew。</p><ol><li>安装 Homebrew<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li>安装 MySQL<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><h3 id="打开-MySQL-服务"><a href="#打开-MySQL-服务" class="headerlink" title="打开 MySQL 服务"></a>打开 MySQL 服务</h3></li></ol></li><li><p>在终端使用命令 <code>mysql --version</code> 查看 MySQL 版本，出现具体的版本号，表示 MySQL 成功安装，如下图。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/61049925-52fd1980-a418-11e9-9558-7b4dee6c68b8.png" alt="mysql-version"></p></li><li><p>在终端使用命令 <code>bash mysql.server start</code> 来打开 MySQL 服务。如下图，表示 MySQL 服务启动成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash mysql.server start</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/61096487-5a5d0b00-a48a-11e9-8715-7d3bb3a6d4da.png" alt="start-mysql"></p></li></ul><h3 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h3><p>MySQL 默认的 root 账户不带密码，使用命令 <code>mysql -uroot</code> 可直接登录，如下图，表示登录成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/61114682-6fa25b80-a4c3-11e9-899b-a3c9033da25e.png" alt="mysql-version"></p><p>因为默认的 root 账户不带密码，安全起见，我们给 root 账户设置密码。（例如设置密码：123456）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for &#39;root&#39;@&#39;localhost&#39;&#x3D;&#39;123456&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/61114990-11c24380-a4c4-11e9-9437-e56f6b406357.png" alt="mysql-modification-password"></p><p>密码设置成功后，再次登录时需要输入密码，如下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p&#39;123456&#39;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/24516169/78643782-637aeb80-78e7-11ea-9b17-4fa3ce8b1ba3.png" alt="mysql"></p><h3 id="Navicat-连接-MySQL"><a href="#Navicat-连接-MySQL" class="headerlink" title="Navicat 连接 MySQL"></a>Navicat 连接 MySQL</h3><p>点击 Navicat Premium 左上角的”连接”，选择” MySQL “，新建一个 MySQL 连接，参数如下，默认端口 <strong>3306</strong>。<br><img src="https://user-images.githubusercontent.com/24516169/78645106-860e0400-78e9-11ea-9191-d7cd64447072.png" alt="mysql"></p><p>注：</p><ul><li>可使用命令 <code>lsof -i:3306</code> 查看 <strong>3306</strong> 端口是否被占用。</li><li>如果点击”<strong>测试连接</strong>“发现连接不上，出现报错信息：<br><code>2059 - Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded: dlopen(../Frameworks/caching_.......</code><br>错误原因是因为 MySQL 5.7 版本之后，默认验证方式由原来的 <strong>mysql_native_password</strong> 改成了 <strong>caching_sha2_password</strong>。只需把验证方式修改成原来的，就能连接上了。<br>修改方法：登录 MySQL，执行命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-MySQL&quot;&gt;&lt;a href=&quot;#安装-MySQL&quot; class=&quot;headerlink&quot; title=&quot;安装 MySQL&quot;&gt;&lt;/a&gt;安装 MySQL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从 MySQL 官网下载安装包进行安装，链接：&lt;a class=&quot;link
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://xpoet.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://xpoet.cn/tags/MySQL/"/>
    
      <category term="Navicat" scheme="https://xpoet.cn/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>Angular Material Dialog 拖拽功能的实现</title>
    <link href="https://xpoet.cn/2019/06/Angular-Material-Dialog-%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xpoet.cn/2019/06/Angular-Material-Dialog-%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-06-28T08:38:51.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>本案例使用的 Angular 7.x 版本，Material 7.x 版本，但不限于此版本。</p><h4 id="新建Angular指令"><a href="#新建Angular指令" class="headerlink" title="新建Angular指令"></a>新建Angular指令</h4><p>新建指令命令：<br><code>ng generate directive dialog-draggable</code></p><a id="more"></a><p>指令中拖拽功能代码实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, HostListener, OnInit &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MatDialogContainer, MatDialogRef &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/material&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Subscription, fromEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; takeUntil &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Position &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">&#x27;[dialog-draggable]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogDraggableDirective</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _subscription: Subscription;</span><br><span class="line"></span><br><span class="line">  mouseStart: Position;</span><br><span class="line"></span><br><span class="line">  mouseDelta: Position;</span><br><span class="line"></span><br><span class="line">  offset: Position;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> matDialogRef: MatDialogRef&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> container: MatDialogContainer</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.offset = <span class="built_in">this</span>._getOffset();</span><br><span class="line">    <span class="built_in">this</span>._updatePosition(<span class="built_in">this</span>.offset.y, <span class="built_in">this</span>.offset.x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="function"><span class="title">onMouseDown</span>(<span class="params">event: MouseEvent</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.mouseStart = &#123; <span class="attr">x</span>: event.pageX, <span class="attr">y</span>: event.pageY &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mouseup$ = fromEvent(<span class="built_in">document</span>, <span class="string">&#x27;mouseup&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>._subscription = mouseup$.subscribe(<span class="function">() =&gt;</span> <span class="built_in">this</span>.onMouseup());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mousemove$ = fromEvent(<span class="built_in">document</span>, <span class="string">&#x27;mousemove&#x27;</span>)</span><br><span class="line">      .pipe(takeUntil(mouseup$))</span><br><span class="line">      .subscribe(<span class="function">(<span class="params">e: MouseEvent</span>) =&gt;</span> <span class="built_in">this</span>.onMouseMove(e));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._subscription.add(mousemove$);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">onMouseMove</span>(<span class="params">event: MouseEvent</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.mouseDelta = &#123; <span class="attr">x</span>: (event.pageX - <span class="built_in">this</span>.mouseStart.x), <span class="attr">y</span>: (event.pageY - <span class="built_in">this</span>.mouseStart.y) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._updatePosition(<span class="built_in">this</span>.offset.y + <span class="built_in">this</span>.mouseDelta.y, <span class="built_in">this</span>.offset.x + <span class="built_in">this</span>.mouseDelta.x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">onMouseup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>._subscription) &#123;</span><br><span class="line">      <span class="built_in">this</span>._subscription.unsubscribe();</span><br><span class="line">      <span class="built_in">this</span>._subscription = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.mouseDelta) &#123;</span><br><span class="line">      <span class="built_in">this</span>.offset.x += <span class="built_in">this</span>.mouseDelta.x;</span><br><span class="line">      <span class="built_in">this</span>.offset.y += <span class="built_in">this</span>.mouseDelta.y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">_updatePosition</span>(<span class="params">top: <span class="built_in">number</span>, left: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.matDialogRef.updatePosition(&#123;</span><br><span class="line">      top: top + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">      left: left + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _getOffset(): Position &#123;</span><br><span class="line">    <span class="keyword">const</span> box = <span class="built_in">this</span>.container[<span class="string">&#x27;_elementRef&#x27;</span>].nativeElement.getBoundingClientRect();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x: box.left + pageXOffset,</span><br><span class="line">      y: box.top + pageYOffset</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在全局的CSS样式文件添加下面的CSS代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[dialog-draggable]</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">24px</span> -<span class="number">24px</span> <span class="number">20px</span> -<span class="number">24px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#283593</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: move;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>在Dialog组件中使用dialog-draggable指令即可实现窗口拖拽，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">mat-dialog-title</span> <span class="attr">dialog-draggable</span>&gt;</span></span><br><span class="line">  Angular Material Dialog Draggable</span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h4&gt;&lt;p&gt;本案例使用的 Angular 7.x 版本，Material 7.x 版本，但不限于此版本。&lt;/p&gt;
&lt;h4 id=&quot;新建Angular指令&quot;&gt;&lt;a href=&quot;#新建Angular指令&quot; class=&quot;headerlink&quot; title=&quot;新建Angular指令&quot;&gt;&lt;/a&gt;新建Angular指令&lt;/h4&gt;&lt;p&gt;新建指令命令：&lt;br&gt;&lt;code&gt;ng generate directive dialog-draggable&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Angular" scheme="https://xpoet.cn/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://xpoet.cn/tags/Angular/"/>
    
      <category term="Material" scheme="https://xpoet.cn/tags/Material/"/>
    
  </entry>
  
  <entry>
    <title>利用时间戳和随机数生成一个不重复的字符串</title>
    <link href="https://xpoet.cn/2018/11/%E5%88%A9%E7%94%A8%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8C%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://xpoet.cn/2018/11/%E5%88%A9%E7%94%A8%E6%97%B6%E9%97%B4%E6%88%B3%E5%92%8C%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2018-11-21T09:44:02.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 或 TypeScript 巧妙利用时间戳和随机数生成一个不重复的字符串，可作为 UUID 使用，此方法非常简单高效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JavaScript 版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>randomLength 截取随机数的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return </span>String 不重复的字符串（uuid）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUuid = <span class="function">(<span class="params">randomLength</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>, randomLength) + <span class="built_in">Date</span>.now()).toString(<span class="number">36</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getUuid(5) -&gt; 2l5w9z6sqvg0</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TypeScript 版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>randomLength&#123;number&#125; 截取随机数的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span> </span>不重复的字符串（uuid）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUuid = (randomLength: <span class="built_in">number</span> = <span class="number">5</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>, randomLength) + <span class="built_in">Date</span>.now()).toString(<span class="number">36</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getUuid(5) -&gt; 2l5w9z6sqvg0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript 或 TypeScript 巧妙利用时间戳和随机数生成一个不重复的字符串，可作为 UUID 使用，此方法非常简单高效。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
      <category term="前端" scheme="https://xpoet.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="https://xpoet.cn/tags/JS/"/>
    
      <category term="TS" scheme="https://xpoet.cn/tags/TS/"/>
    
      <category term="UUID" scheme="https://xpoet.cn/tags/UUID/"/>
    
  </entry>
  
  <entry>
    <title>macOS 配置多个 Git 账户的 SSH-Key</title>
    <link href="https://xpoet.cn/2018/07/macOS%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit%E8%B4%A6%E6%88%B7%E7%9A%84SSH-Key/"/>
    <id>https://xpoet.cn/2018/07/macOS%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit%E8%B4%A6%E6%88%B7%E7%9A%84SSH-Key/</id>
    <published>2018-07-16T08:33:01.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>请确保在你的Mac上已安装Git。安装Git请参考：<a class="link"   href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" >传送门<i class="fas fa-external-link-alt"></i></a><br>在终端输入命令<code>$ git --version</code>， 能打印出具体的版本号，表示Git正确安装。</p><h4 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h4><p>本文以配置<strong>GitHub</strong>和<strong>GitLab</strong>为案例，将生成两对公共/私有rsa密钥对，<strong>rsa_github</strong> 和 <strong>rsa_gitlab</strong>。</p><h5 id="在本地创建SSH-Key"><a href="#在本地创建SSH-Key" class="headerlink" title="在本地创建SSH-Key"></a>在本地创建SSH-Key</h5><p>1、打开终端，<code>$ cd ~</code>，进入到当前用户目录下。  </p><p>2、使用命令<code>$ ssh-keygen -t rsa -C &quot;i@itpoet.cn&quot;</code>生成公共/私有rsa密钥对。此时会看到终端提示输入要保存密钥的文件名，为了做区分，我们给文件名加个后缀，本例第一个rsa密钥对：<strong>rsa_github</strong>。<br>接着会看到终端提示输入密码，敲两次 <em><strong>Enter回车键</strong></em> 则不需要密码。最终在 <em><strong>.ssh 文件夹</strong></em> 里生成 <em><strong>rsa_github</strong>_ 和 _<strong>rsa_github.pub</strong></em> 两个文件，如图：<br><img src="https://user-images.githubusercontent.com/24516169/43447613-6a4544ae-94de-11e8-8e91-07d6ef1e45e3.png" alt="生成rsa_github"><br><img src="https://user-images.githubusercontent.com/24516169/43447618-6add7116-94de-11e8-9986-8b90bf50e098.png" alt="rsa_github和rsa_github.pub密钥对"><br><strong>注意</strong>：在 <strong>第2步</strong> 执行完后，如果用户目录下没有生成 <em><strong>.ssh 文件夹</strong></em> ，那我们需要手动创建。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ mkdir .ssh</span><br><span class="line">$ <span class="built_in">cd</span> .ssh</span><br></pre></td></tr></table></figure><p>成功创建完 <em><strong>.ssh 文件夹</strong></em> 之后，再执行 <strong>第2步</strong> 操作。  </p><p>3、创建本例的第二个rsa密钥对，<strong>rsa_gitlab</strong>。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;a@itpoet.cn&quot;</span></span><br></pre></td></tr></table></figure><p>如图：<br><img src="https://user-images.githubusercontent.com/24516169/43447615-6a959e4a-94de-11e8-8f23-8fd2128ba6a7.png" alt="生成rsa_github"><br><img src="https://user-images.githubusercontent.com/24516169/43447619-6b104b72-94de-11e8-9a4b-4febc6458e4c.png" alt="rsa_github和rsa_github.pub密钥对">  </p><p>4、为ssh添加config配置文件，在 <em><strong>.ssh文件夹</strong></em> 下，新建config文件。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ touch config</span><br></pre></td></tr></table></figure><p>config文件创建好之后，将其内容修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  User itPoet_github</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;rsa_github</span><br><span class="line"></span><br><span class="line">Host gitlab.com</span><br><span class="line">  User itPoet_gitlab</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;rsa_gitlab</span><br></pre></td></tr></table></figure><p>5、配置 <strong>.gitconfig</strong> 文件。使用如下命令将会在用户目录下自动创建 <strong>.gitconfig</strong> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ git config --global user.name <span class="string">&quot;itPoet_github&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;i@itpoet.cn&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在 <strong>第4步</strong> 执行完后，如果用户目录下没有生成 <em><strong>.gitconfig</strong></em> 文件 ，那我们需要手动创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ touch .gitconfig</span><br></pre></td></tr></table></figure><p>最后将.gitconfig文件的内容修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name &#x3D; itPoet_github</span><br><span class="line">    email &#x3D; i@itpoet.cn</span><br><span class="line">[user]</span><br><span class="line">    name &#x3D; itPoet_gitlab</span><br><span class="line">    email &#x3D; a@itpoet.cn</span><br></pre></td></tr></table></figure><h5 id="在对应的Git网站添加SSH密钥设置"><a href="#在对应的Git网站添加SSH密钥设置" class="headerlink" title="在对应的Git网站添加SSH密钥设置"></a>在对应的Git网站添加SSH密钥设置</h5><p>1、 <strong>GitHub</strong><br>settings –&gt; SSH and GPG keys –&gt; New SSH Key<br>打开 <strong>rsa_github.pub</strong>，将里面的内容复制到 <strong>Key</strong> 输入框中，如图：<br>如图：<br><img src="https://user-images.githubusercontent.com/24516169/43447624-6c25549e-94de-11e8-9584-527e2100964c.png" alt="github.com-add-new-ssh-key-1"><br><img src="https://user-images.githubusercontent.com/24516169/43447626-6c56a026-94de-11e8-9530-3ba0accc6a86.png" alt="github.com-add-new-ssh-key-2">  </p><p>2、 <strong>GitLab</strong><br>Profile –&gt; SSH keys<br>打开 <strong>rsa_gitlab.pub</strong>，将里面的内容复制到 <strong>Key</strong> 输入框中，如图：<br>如图：<br><img src="https://user-images.githubusercontent.com/24516169/43447628-6ca0b468-94de-11e8-95e5-377c7b85b97c.png" alt="gitlab.com-add-new-ssh-key-1"><br><img src="https://user-images.githubusercontent.com/24516169/43447626-6c56a026-94de-11e8-9530-3ba0accc6a86.png" alt="gitlab.com-add-new-ssh-key-2">  </p><p><strong>至此，在Mac下配置多个Git账户的SSH-Key参考教程也完成，同理，我们还可以配置Coding、码云等。现在让我们来体验使用SSH提交代码吧~~</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h4&gt;&lt;p&gt;请确保在你的Mac上已安装Git。安装Git请参考：&lt;a class=&quot;link&quot;   href=&quot;https://git-
      
    
    </summary>
    
    
      <category term="技术教程" scheme="https://xpoet.cn/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Mac" scheme="https://xpoet.cn/tags/Mac/"/>
    
      <category term="Git" scheme="https://xpoet.cn/tags/Git/"/>
    
      <category term="SSH-Key" scheme="https://xpoet.cn/tags/SSH-Key/"/>
    
  </entry>
  
  <entry>
    <title>再见，也许就是再也不见</title>
    <link href="https://xpoet.cn/2018/04/%E5%86%8D%E8%A7%81%EF%BC%8C%E4%B9%9F%E8%AE%B8%E5%B0%B1%E6%98%AF%E5%86%8D%E4%B9%9F%E4%B8%8D%E8%A7%81/"/>
    <id>https://xpoet.cn/2018/04/%E5%86%8D%E8%A7%81%EF%BC%8C%E4%B9%9F%E8%AE%B8%E5%B0%B1%E6%98%AF%E5%86%8D%E4%B9%9F%E4%B8%8D%E8%A7%81/</id>
    <published>2018-04-21T15:13:08.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你默默地转向一边，<br>面向夜晚。<br>夜的深处，<br>是密密的灯盏，<br>它们总在一起，<br>我们总要再见。<br>再见，<br>为了再见。</p></blockquote><p>这是我非常喜欢的一首诗，名为《再见》，作者顾城。顾城属朦胧诗派，朦胧诗以晦涩为主。</p><p>诗的大意是讲两个人由于某些原因必须要分开一段时间，时间定在了夜晚，他们的前程是未知的，谁都不知道明天会怎么样。其中某个人默默转身，渐渐消失在黑暗中，另一个人朝着黑暗四周望去，仿佛许多住户就在不远的地方，他们每家每户都点上了灯火，这些密密的灯盏代表了相聚，与自己离别的情形成对比，是一种心情的极大反差，油然而生一种依依不舍但必须离别的失落感。最后两句 “ 再见，为了再见 ” 虽然都在写再见，但意义不同，第一个再见是普遍意义上的再见，是一句告别用语。第二句再见是再次见面的意思，说明这一次两个人不得已天各一方，暂时的再见是为了以后更好的在一起。</p><p>…<br>…<br>…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;你默默地转向一边，&lt;br&gt;面向夜晚。&lt;br&gt;夜的深处，&lt;br&gt;是密密的灯盏，&lt;br&gt;它们总在一起，&lt;br&gt;我们总要再见。&lt;br&gt;再见，&lt;br&gt;为了再见。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是我非常喜欢的一首诗，名为《再见》，作者顾城。顾城
      
    
    </summary>
    
    
      <category term="散文集" scheme="https://xpoet.cn/categories/%E6%95%A3%E6%96%87%E9%9B%86/"/>
    
    
      <category term="散文" scheme="https://xpoet.cn/tags/%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>不朽的失眠</title>
    <link href="https://xpoet.cn/2018/03/%E4%B8%8D%E6%9C%BD%E7%9A%84%E5%A4%B1%E7%9C%A0/"/>
    <id>https://xpoet.cn/2018/03/%E4%B8%8D%E6%9C%BD%E7%9A%84%E5%A4%B1%E7%9C%A0/</id>
    <published>2018-03-20T10:03:26.000Z</published>
    <updated>2020-12-01T09:14:40.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记得第一次见这篇文章出现在初中的语文书上，确确实实引起了我的共鸣，自此念念不忘，忽然感觉此刻很应景，收录此文。</p></blockquote><p>他落榜了！一千二百年前。榜纸那么大那么长，然而，就是没有他的名字。啊！竟单单容不下他的名字“张继”那两个字。  </p><p>考中的人，姓名一笔一划写在榜单上，天下皆知。奇怪的是，在他的感觉里，考不上，才更是天下皆知，这件事，令他羞惭沮丧。</p><p>离开京城吧！议好了价，他踏上小舟。本来预期的情节不是这样的，本来也许有插花游街、马蹄轻疾的风流，有衣锦还乡、袍笏加身的荣耀。然而，寒窗十年，虽有他的悬梁刺股，琼林宴上，却并没有他的一角席次。</p><p>船行似风。</p><p>江枫如火，在岸上举着冷冷的爝焰，这天黄昏，船，来到了苏州。但，这美丽的古城，对张继而言，也无非是另一个触动愁情的地方。</p><p>如果说白天有什么该做的事，对一个读书人而言，就是读书吧！夜晚呢？夜晚该睡觉以便养足精神第二天再读。然而，今夜是一个忧伤的夜晚。今夜，在异乡，在江畔，在秋冷雁高的季节，容许一个落魄的士子放肆他的忧伤。江水，可以无限度地收纳古往今来一切不顺遂之人的泪水。</p><p>这样的夜晚，残酷地坐着，亲自听自己的心正被什么东西啮食而一分一分消失的声音。并且眼睁睁地看自己的生命如劲风中的残灯，所有的力气都花在抗拒，油快尽了，微火每一刹那都可能熄灭。然而，可恨的是，终其一生，它都不曾华美灿烂过啊！</p><p>江水睡了，船睡了，船家睡了，岸上的人也睡了。惟有他，张继，睡不着。夜愈深，愈清醒，清醒如败叶落余的枯树，似梁燕飞去的空巢。</p><p>起先，是睡眠排拒的他。(也罢，这半生，不是处处都遭排拒吗？)而后，是他在赌气，好，无眠就无眠，长夜独醒，就干脆彻底来为自已验伤，有何不可？</p><p>月亮西斜了，一副意兴阑珊的样子。有乌啼，粗嗄嘶哑，是乌鸦。那月亮被它一声声叫得更黯淡了。江岸上，想已霜结千草。夜空里，星子亦如清霜，一粒粒零落凄绝。</p><p>在须角在眉梢，他感觉，似乎也森然生凉，那阴阴不怀好意的凉气啊，正等待凝成早秋的霜花，来贴缀他惨淡少年的容颜。</p><p>江上渔火二三，他们在干什么？在捕鱼吧？或者，虾？他们也会有撒空网的时候吗？世路艰辛啊！即使潇洒的捕鱼的，也不免投身在风波里吧？然而，能辛苦工作，也是一种幸福吧！今夜，月自光其光，霜自冷其冷，安心的人在安眠，工作的人去工作。只有我张继，是天不管地不收的一个，是既没有权利去工作，也没福气去睡眠的一个……</p><p>钟声响了，这奇怪的深夜的寒山寺钟声。一般寺庙，都是暮鼓晨钟，寒山寺庙敲“夜半钟”，用以惊世。钟声贴着水面传来，在别人，那声音只是睡梦中模糊的衬底音乐。在他，却一记一记都撞击在心坎上，正中要害。钟声那么美丽，但钟声自己到底是痛还是不痛呢？既然失眠，他推枕而起，摸黑写下“枫桥夜泊”四字。然后，就把其余二十八字照抄下来。我说“照抄”，是因为那二十八个字在他心底已像白墙上的黑字一样分明凸显：</p><p><strong>月落乌啼霜满天，江枫渔火对愁眠。</strong></p><p><strong>姑苏城外寒山寺，夜半钟声到客船。</strong></p><p>感谢上苍，如果没有落第的张继，诗的历史上便少了一首好诗，我们的某一种心情，就没有人来为我们一语道破。</p><p>一千二百年过去了，那张长长的榜单上（就是张继挤不进去的那纸金榜）曾经出现过的状元是谁？哈！管他是谁。真正被记得的名字是“落第者张继”。有人会记得那一届状元披红游街的盛景吗？不！我们只记得秋夜的客船上那个失意的人，以及他那场不朽的失眠。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记得第一次见这篇文章出现在初中的语文书上，确确实实引起了我的共鸣，自此念念不忘，忽然感觉此刻很应景，收录此文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他落榜了！一千二百年前。榜纸那么大那么长，然而，就是没有他的名字。啊！竟单单容不下他的名字“张
      
    
    </summary>
    
    
      <category term="文章收录" scheme="https://xpoet.cn/categories/%E6%96%87%E7%AB%A0%E6%94%B6%E5%BD%95/"/>
    
    
      <category term="枫桥夜泊" scheme="https://xpoet.cn/tags/%E6%9E%AB%E6%A1%A5%E5%A4%9C%E6%B3%8A/"/>
    
  </entry>
  
</feed>
