[{"title":"千呼万唤始出来，Hexo 主题 ILS 正式发布","url":"/2020/04/%E5%8D%83%E5%91%BC%E4%B8%87%E5%94%A4%E5%A7%8B%E5%87%BA%E6%9D%A5%EF%BC%8CHexo%E4%B8%BB%E9%A2%98ILS%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/","content":"如你所见，ILS 界面设计十分简洁、清爽，但功能齐全、不失优雅，这正是 ILS 的开发理念。也曾尝试过花里胡哨，发现不仅容易审美疲劳，而且背驰了写博客的初衷，记录生活、展示文字，应该才是搭建博客网站的最终追求，为此 ILS 应运而生。简约大气、不缺美感、突出内容、化繁为简、配置简单、长期维护，如果你也喜欢或认可这些主题特点，一起来折腾吧~\n关于主题名称 “ILS” 的由来：在主题开发之初，作者想到的几个名字都被已被用，词穷了，后来干脆将名字取自 “I Like Simple「我喜欢简单」” 首字母，就是这么简单。\n\n\n同时，非常欢迎感兴趣的同学 Pull Request 加入到该主题的开发中，共同打造极致 ILS。\nFeatures 功能特性Completed 已完成\n 恰到好处的留白，简约大气；\n 响应式设计，适配多种终端；\n 日间/夜间模式自由切换；\n 多种代码高亮方案；\n 代码块一键复制；\n 语言国际化，已支持中/英文；\n 内置多款评论插件；\n 支持全站文章搜索；\n 支持文章顶置；\n TOC 目录结构；\n RSS 订阅；\n 网站访问统计和文章阅读统计；\n 页面滚动百分比提示；\n 一键快速回到顶部；\n 代码精简高效，无 jQuery；\n 配置项简单，有详细注释；\n\nUnfinished 未完成\n文章版权信息\n字数统计 &amp; 阅读时长\n支持公式\n在线更改字体/字号\n打赏功能\n……\n\nGet start 快速开始Install 安装\n使用 Git SSHgit clone --depath=1 git@github.com:XPoet/hexo-theme-ils.git themes/ils\n下载主题 release 版本请优先下载 最新 release 版本，master 分支无法保证稳定。下载后解压到 Hexo 博客目录下 themes 文件夹里面并重命名为 ils。\n\nEnable 启用Modify theme setting in _config.yml to ils.找到博客目录下的 _config.yml 文件，将 theme 设置为 ils 。\nUpdate 更新\n使用 Git SSHcd themes/ilsgit pull\n下载 主题最新 release 版本下载后解压到 Hexo 博客目录下 themes 文件夹里面并重命名为 ils。\n\nHow to use 如何使用Configuration 配置# theme basic info# 该主题的基本信息，无需改动。theme_info:  name: ILS  version: 1.0.0  author: XPoet  repository: https://github.com/XPoet/hexo-theme-ils# navigation menu# 导航菜单，如需增加，请按下面格式填写。menu:  Home: /  Archives: /archives  About: /about  Links: /links  ...# RSS# 若要启用 RSS 订阅功能，需安装 Hexo 插件 hexo-generator-feed。rss:  enable: false# favicon# 网站 icon 图标，换成自己的图片即可。favicon: images/favicon.png# comment plugin# 评论插件，内置 Valine 和 Gitalkcomments:  # Valine.  # more info please open https://github.com/xCss/Valine  # 如何使用 Valine, 请前往 https://github.com/xCss/Valine  valine:    enable: false    appid: # your leancloud application appid    appkey: # your leancloud application appkey    notify: false # mail notifier, https://github.com/xCss/Valine/wiki    verify: false # Verification code    placeholder: your placeholder    # Gitalk  # For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk  # 如何使用 gitalk, 请前往 https://github.com/gitalk/gitalk  gitalk:    enable: false    github_id:     # GitHub repo owner    repository:    # Repository name to store issues    client_id:     # GitHub Application Client ID    client_secret: # GitHub Application Client Secret    distraction_free_mode: false # Facebook-like distraction free mode# Show PV/UV of the website/page with busuanzi.# 不蒜子计数插件# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count:  # count values only if the other configs are false  enable: false  # custom uv span for the whole site  # 网站访问人数统计  site_uv: false  # custom pv span for the whole site  # 网站总访问量统计  site_pv: false  # custom pv span for one page only  # 文章页面阅读次数统计  page_pv: false# Local Search# Dependencies: https://github.com/theme-next/hexo-generator-searchdb# 全站文章搜索功能，默认不开启，如需开启，请先在 Hexo 博客目录下安装 hexo-generator-searchdb# 详情请参考：https://github.com/theme-next/hexo-generator-searchdblocal_search:  enable: fales  # If auto, trigger search by changing input.  # If manual, trigger search by pressing enter key or search button.  trigger: auto  # Show top n results per article, show all results by setting to -1  top_n_per_article: 1  # Unescape html strings to the readable one.  unescape: false  # Preload the search data when the page loads.  preload: false\n\nComment 评论主题内置了 Valine 和 Gitalk 两款评论插件，你只能使用其他一款，如果两款评论插件的 enable 都设为了 true，将使用 Valine。\nValine前往 https://github.com/xCss/Valine 查看 Valine 如何使用，获取必要的参数，填写在配置文件里。\nGitalk\n在自己的 GitHub 账号下创建新的 OAuth App ，传送门：https://github.com/settings/applications/new，Homepage URL 和 Authorization callback URL 均填写自己的域名。\n在自己的 GitHub 账号下创建新的 repository 并打开 Issues，用于存储评论内容。\n把 自己的 GitHub 用户名称、repository 名称 、OAuth App 的 Client ID 、Client Secret 分别填写在主题配置文件里。  \n\n前往 https://github.com/gitalk/gitalk 查看 Gitalk 用法的更多信息。\nPost top 文章顶置实现文章顶置功能，需在 Hexo 博客根目录下安装插件 hexo-generator-index-pin-top  \nnpm install hexo-generator-index-pin-top\n然后在 _posts 文件夹里的需要顶置的文章页添加 top 属性，top 值越大，顶置越靠前，参考如下。\n---title: 千呼万唤始出来，hexo-theme-ils v1.0.0 正式分布date: 2020-04-07 21:55:14tags: [hexo]categories: [hexo]top: 999---\n\nAdd page 添加页面Hexo 初始化没有 about、links、tag、category 等页面，需要自己手动创建。例如创建「关于」页面：\n\n在 Hexo 博客目录下执行命令\nhexo new page about\n创建成功后，编辑博客目录下 /source/about/index.md，添加 layout: about 属性。修改后的文件示例如下：\ntitle: aboutdate: 2020-04-08 16:29:00layout: about---这里写正文内容，支持 Markdown, HTML\n\n\n\nFeedback 反馈在使用主题过程中，如果遇到问题，请仔细阅读文档，或者提 issue。\nLicence 许可证MIT Copyright (c) 2020 XPoet\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"macOS 使用 Navicat 连接 MySQL 数据库","url":"/2019/07/macOS%E4%BD%BF%E7%94%A8Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"安装 MySQL\n从 MySQL 官网下载安装包进行安装，链接：https://www.mysql.com/downloads/\n\n使用终端命令安装，需提前安装 Homebrew。\n\n安装 Homebrew/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n安装 MySQLbrew install mysql\n打开 MySQL 服务\n\n\n在终端使用命令 mysql --version 查看 MySQL 版本，出现具体的版本号，表示 MySQL 成功安装，如下图。\nmysql --version\n\n\n\n在终端使用命令 bash mysql.server start 来打开 MySQL 服务。如下图，表示 MySQL 服务启动成功。\nbash mysql.server start\n\n\n\n\n登录 MySQLMySQL 默认的 root 账户不带密码，使用命令 mysql -uroot 可直接登录，如下图，表示登录成功。\nmysql -uroot\n\n\n因为默认的 root 账户不带密码，安全起见，我们给 root 账户设置密码。（例如设置密码：123456）\nset password for &#39;root&#39;@&#39;localhost&#39;&#x3D;&#39;123456&#39;;\n\n\n密码设置成功后，再次登录时需要输入密码，如下命令。\nmysql -uroot -p&#39;123456&#39;\n\n\nNavicat 连接 MySQL点击 Navicat Premium 左上角的”连接”，选择” MySQL “，新建一个 MySQL 连接，参数如下，默认端口 3306。\n注：\n\n可使用命令 lsof -i:3306 查看 3306 端口是否被占用。\n如果点击”测试连接“发现连接不上，出现报错信息：2059 - Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded: dlopen(../Frameworks/caching_.......错误原因是因为 MySQL 5.7 版本之后，默认验证方式由原来的 mysql_native_password 改成了 caching_sha2_password。只需把验证方式修改成原来的，就能连接上了。修改方法：登录 MySQL，执行命令：ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;\n\n\n","categories":["数据库"],"tags":["MySQL","Navicat"]},{"title":"Angular Material Dialog 拖拽功能的实现","url":"/2019/06/Angular-Material-Dialog-%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/","content":"版本本案例使用的 Angular 7.x 版本，Material 7.x 版本，但不限于此版本。\n新建Angular指令新建指令命令：ng generate directive dialog-draggable\n\n\n指令中拖拽功能代码实现：\nimport &#123; Directive, HostListener, OnInit &#125; from '@angular/core';import &#123; MatDialogContainer, MatDialogRef &#125; from '@angular/material';import &#123; Subscription, fromEvent &#125; from 'rxjs';import &#123; takeUntil &#125; from 'rxjs/operators';export interface Position &#123;  x: number;  y: number;&#125;@Directive(&#123;  selector: '[dialog-draggable]'&#125;)export class DialogDraggableDirective implements OnInit &#123;  private _subscription: Subscription;  mouseStart: Position;  mouseDelta: Position;  offset: Position;  constructor(    private matDialogRef: MatDialogRef&lt;any&gt;,    private container: MatDialogContainer  ) &#123;  &#125;  ngOnInit() &#123;    this.offset = this._getOffset();    this._updatePosition(this.offset.y, this.offset.x);  &#125;  @HostListener('mousedown', ['$event'])  onMouseDown(event: MouseEvent) &#123;    this.mouseStart = &#123; x: event.pageX, y: event.pageY &#125;;    const mouseup$ = fromEvent(document, 'mouseup');    this._subscription = mouseup$.subscribe(() =&gt; this.onMouseup());    const mousemove$ = fromEvent(document, 'mousemove')      .pipe(takeUntil(mouseup$))      .subscribe((e: MouseEvent) =&gt; this.onMouseMove(e));    this._subscription.add(mousemove$);  &#125;  onMouseMove(event: MouseEvent) &#123;    this.mouseDelta = &#123; x: (event.pageX - this.mouseStart.x), y: (event.pageY - this.mouseStart.y) &#125;;    this._updatePosition(this.offset.y + this.mouseDelta.y, this.offset.x + this.mouseDelta.x);  &#125;  onMouseup() &#123;    if (this._subscription) &#123;      this._subscription.unsubscribe();      this._subscription = undefined;    &#125;    if (this.mouseDelta) &#123;      this.offset.x += this.mouseDelta.x;      this.offset.y += this.mouseDelta.y;    &#125;  &#125;  private _updatePosition(top: number, left: number) &#123;    this.matDialogRef.updatePosition(&#123;      top: top + 'px',      left: left + 'px'    &#125;);  &#125;  private _getOffset(): Position &#123;    const box = this.container['_elementRef'].nativeElement.getBoundingClientRect();    return &#123;      x: box.left + pageXOffset,      y: box.top + pageYOffset    &#125;;  &#125;&#125;\n\n在全局的CSS样式文件添加下面的CSS代码：\n[dialog-draggable] &#123;  margin: -24px -24px 20px -24px !important;  padding: 10px 24px;  background: #283593 !important;  color: #fff;  cursor: move;&#125;\n\n如何使用在Dialog组件中使用dialog-draggable指令即可实现窗口拖拽，如下\n&lt;h2 mat-dialog-title dialog-draggable&gt;  Angular Material Dialog Draggable&lt;/h2&gt;","categories":["Angular"],"tags":["Angular","Material"]},{"title":"小技巧：前端使用TS/JS生成永不重复的ID(uuid)","url":"/2018/11/%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8TS:JS%E7%94%9F%E6%88%90%E6%B0%B8%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84ID(uuid)/","content":"\n此方法非常简单，非常高效…\n\n废话不多说，直接上代码，本例使用TypeScript：\n/** * 巧妙利用随机数和时间戳随机生成一个不重复的ID（uuid） * @param randomLength&#123;number&#125; 截取随机数的长度 * @return &#123;string&#125; 不重复的字符串ID */export const getUuid = (randomLength: number = 5): string =&gt; &#123;  return Number(Math.random().toString().substr(2, randomLength) + Date.now()).toString(36);&#125;;\n\n","categories":["前端"],"tags":["Uuid"]},{"title":"Angular从入门到放弃（二） Angular对比Vue和React","url":"/2018/08/angular-way-of%20learning-2/","content":"\n作为一个菜鸟，在讨论Angular、React和Vue的优缺点上，确实没有发言权，为此找到一篇非常好的文章，原文出处：https://www.codeinwp.com/blog/angular-vs-vue-vs-react/\n\nJust about a year ago, developers were mainly debating on whether they should be using Angular or React for their projects. But over the course of 2018, we saw a growth of interest in a third player called Vue.js. Looking forward into 2019, this post is a comprehensive guide on which is perhaps the right solution for you: Angular vs React vs Vue.\nIf you are a developer starting out on a project and cannot decide on which JavaScript framework to use, this guide should help you make a decision.\nWe cover various aspects of Angular, Vue, and React to see how they suit your needs. This post is not just a guide on Angular vs React vs Vue but aims to provide a structure to help judge front-end JavaScript frameworks in general. In case a new framework arrives next year, you will know exactly what parameters to look at!\nIn this post, we assume that you have basic knowledge of JavaScript and have used JavaScript frameworks as well.\nPart 1: A brief history of Vue vs React vs AngularBefore we get into the technical details, let’s first talk about the history behind these frameworks – just to better appreciate their philosophy and their evolution over time.How it all started 🐣\nAngular, developed by Google, was first released in 2010, making it the oldest of the lot. It is a TypeScript based JavaScript framework. A substantial shift occurred in 2016 on the release of Angular 2 (and the dropping of the “JS” from the original name – AngularJS). Angular 2+ is known as just Angular. Although AngularJS (version 1) still gets updates, we will focus the discussion on Angular. The latest stable version is Angular 7, which was released in October 2018.\nVue, also known as Vue.js, is the youngest member of the group. It was developed by ex-Google employee Evan You in 2014. Over the last two years, Vue has seen a substantial shift in popularity, even though it doesn’t have the backing of a large company. The current stable version is 2.17, released in August 2018. Vue’s contributors are supported by Patreon. Vue 3, currently in the prototyping phase is planning to move to TypeScript.\nReact, developed by Facebook, was initially released in 2013. Facebook uses React extensively in their products (Facebook, Instagram, and WhatsApp). The current stable version in 16.X, released in November 2018.\nHere’s a short summary of Angular vs React vs Vue, in terms of their status and history:\nThe history of Angular vs React vs Vue\n\n\n\n\nAngular\nReact\nVue\n\n\n\nInitial release\n2010\n2013\n2014\n\n\nOfficial site\nangular.io\nreactjs.org\nvuejs.org\n\n\nApprox. size (KB)\n500\n100\n80\n\n\nUsed by\nGoogle\nWix, Facebook\nAlibaba, GitLab\n\n\nLicense 👮‍♂️Before you use an open source framework, make sure you go through its license. Interestingly, all three frameworks use the MIT license, which provides limited restrictions on reuse, even in proprietary software. Make sure you know the implications of the license before using any framework or software.\nHere is a quick summary of the MIT license in plain English terms.\nPopularity 🔥As “angular” and “react” are common words, it is difficult to grasp their popularity from Google Trends. Though, a good proxy for their popularity is the number of stars that their GitHub repositories get. A sudden shift in the number of stars of Vue occurred in mid-2016 and, recently, Vue has been up there with React as the most popular frameworks.\nNumber of stars on GitHub projects for Angular, React, and Vue\nLet us check how the job market is for Angular vs React vs Vue, which is also a good measure of popularity:\n\nPart 2: Community and developmentNow that you are familiar with the history and trends of each of these frameworks, we will look at the community to assess the development of these frameworks. We have already seen that for all of the frameworks, a major release has been shipped in the last four months, which indicates that development is going on in full swing.\nLet us look at Angular vs React vs Vue with respect to statistics on their GitHub repositories:\n\n\n\n\nAngular\nReact\nVue\n\n\n\n# Watchers\n3.3k\n3.7k\n5.7k\n\n\n# Stars\n43k\n71k\n122k\n\n\n# Forks\n11k\n16k\n17k\n\n\n# Commits in last month\n446\n339\n81\n\n\n# Contributors\n798\n1.8k\n240\n\n\nVue has a huge number of watchers, stars and forks. This shows its popularity among users and its value when comparing Vue vs React. However, the number of commits and contributors for Vue are lower than Angular and React.\nOne possible explanation is that Vue is driven entirely by the open source community, whereas Angular and React have a significant share of Google and Facebook employees contributing to the repositories.\nFrom the statistics, all three projects show significant development activity, and this is surely going to continue in the future — just these statistics cannot be the basis of not deciding to use either of them.\n\nPart 3: MigrationsAs you’re working with your framework of choice, you don’t want to have to worry about a framework update coming along and messing up your code. Though in most cases you won’t encounter many issues from one version to another, it’s important to keep your finger on the pulse because some updates can be more significant and require tweaks to keep things compatible.\nAngular plans major updates every six months. There is also a period of another six months before any major APIs are deprecated, which gives you the time of two release cycles (one year) to make necessary changes if any.\nWhen it comes to Angular vs React, Facebook has stated that stability is of utmost importance to them, as huge companies like Twitter and Airbnb use React. Upgrades through versions are generally the easiest in React, with scripts such as react-codemod helping you to migrate.\nIn the FAQ section for Migration, Vue mentions that 90% of the APIs are same if you are migrating from 1.x to 2. There is a migration helper tool that works on the console to assess the status of your app.\n\nPart 4: Working with the frameworksThere are a handful of important characteristics to look at here, chief of them being overall size and load times, the components available, and learning curve.\nSize and load times ⏲️The sizes of the libraries are as follows:\n\nAngular: 500+ KB\nReact: 100 KB\nVue: 80 KB  \n\nAlthough there is a significant difference between the sizes of the frameworks, they are still small as compared to the average webpage size (2+ MB in 2018). Additionally, if you use a popular CDN to load these libraries, it is highly probable that a user has the library already loaded in their local system.\nComponents 🏗️Components are integral parts of all three frameworks, no matter if we’re talking Vue, React, or Angular. A component generally gets an input, and changes behavior based on it. This behavior change generally manifests as a change in the UI of some part of the page. The use of components makes it easy to reuse code. A component may be a cart on an e-commerce site or a login box on a social network.\nAngular:In Angular, components are referred to as directives. Directives are just markers on DOM elements, which Angular can track and attach specific behavior too. Therefore, Angular separates the UI part of components as attributes of HTML tags, and their behaviors in the form of JavaScript code, this is what sets it apart when looking at Angular vs React.\nReact:React, interestingly, combines the UI and behavior of components. For instance, here is the code to create a hello world component in React. In React, the same part of the code is responsible for creating a UI element and dictating its behavior.\nVue:In Vue, UI and behavior are also a part of components, which makes things more intuitive when looking at Vue vs React. Also, Vue is highly customizable, which allows you to combine the UI and behavior of components from within a script. Further, you can also use pre-processors in Vue rather than CSS, which is a great functionality. Vue is great when it comes to integration with other libraries, like Bootstrap.To compare how the same app looks with different libraries, here is a great post on creating the same to do list app on React and Vue and contrasting the differences of the two frameworks.\nAlthough Angular, React and Vue have a significant learning curve, their uses upon mastery are limitless. For instance, you can integrate Angular and React with WordPress and WooCommerce to create progressive web apps.\n\nAngular vs React vs Vue: Who wins?Towards the end of this post, let us recall the characteristic features of each framework to try to answer the question: Angular vs React vs Vue: which one should you choose?\nAngular is the most mature of the frameworks, has good backing in terms of contributors and is a complete package.However, the learning curve is steep and concepts of development in Angular may put off new developers.Angular is a good choice for companies with large teams and developers who already use TypeScript.\nReact is just old enough to be mature and has a huge number of contributions from the community. It is gaining widespread acceptance. The job market for React is really good, and the future for this framework looks bright.React looks like a good choice for someone getting started with front-end JavaScript frameworks, startups and developers who like some flexibility. The ability to integrate with other frameworks seamlessly gives it a great advantage for those who would like some flexibility in their code.\nVue is new to the arena, without the backing of a major company.However, it has done really well in the last few years to come out as a strong competitor for Angular and React. This is perhaps playing a role with a lot of Chinese giants like Alibaba and Baidu picking Vue as their primary front-end JavaScript framework.However, it remains to be seen how it does in the future and one is justified to be cautious with it. Vue should be your choice if you prefer simplicity, but also like flexibility.\nThe answer to the debate of Angular vs React vs Vue is that there’s no absolute right choice, which you’ve probably expected.\nEach of these libraries has their own benefits and drawbacks. Based on the project you’re working on, and your individual requirements, one of them is going to be more suitable than the others. It’s always key to do your own research before deciding, especially if you’re going to be working on a business venture and not on a personal project.\n","categories":["Angular"],"tags":["Angular"]},{"title":"Angular从入门到放弃（一） 前言","url":"/2018/08/angular-way-of%20learning-1/","content":"写在前面四个月前，博主跳槽到新公司上班，公司的技术团队正在寻找一个合适的JavaScript框架来开发中大型项目，因为项目可以不考虑浏览器版本兼容性，团队一致赞同选用当下最新的技术来开发。此时，Google正式发布Angular已有一年多的时间，拥有大量开发者，Angular采用TypeScript作为主要开发语言，正好解决了JavaScript弱类型，IDE支持性差，以及缺少编译器支持等不足，为开发可以运行在任何现代浏览器和移动平台上的大中型Web项目，提供了一种最高效的方式，我们都意识到了Angular的巨大潜力。  \n然而，博主当时在学Vue和几年前\b写过一些AngularJS的Demo，\b纯属菜鸟。《Angular从入门到放弃》这一系列的博文，将记录博主如何陷入深渊，被Angular狂虐。\nAngular的前世\b今生\b说到Angular，那就非常有必要先说AngularJS，通常情况\b下，我们所说的AngularJS\b是指Angular的1.x版本，Angular2.x版本往上，才称之为Angular。它们是两套\b完全不同的框架。  \nAngularJS诞生于2009年，由Misko Hevery等人创建的一款JavaScript框架，后为Google所收购。\nAngular\b发布于2016年9月，由Google维护的开源JavaScript框架，它采用TypeScript完全重写了之前备受欢迎的AngularJS。因此，学习Angular，你完全不需要具备AngularJS基础。\n\nAngularJS 官网  \nAngular 官网  \nAngular 中文网\n\nAngular带来的巨大好处\nUI层和业务逻辑层的分隔，渲染UI的代码和实现业务逻辑的代码之间得以干净地分隔。\n模块化，包含用于应用程序模块化的简单机制，支持模块的延迟加载。\n路由，路由支持单页面应用程序（SPA）中复杂的导航场景。\n低耦合，依赖注入提供了一种在组件和服务之间实现低耦合的干净方式，绑定和事件允许创建可复用且低耦合的组件。\n组件生命周期，每个组件都经过一个明确定义的生命周期，包括组件的新建、更新和销毁。\n变更检测，自动的更改检测机制和手动强制UI更新。\n没有回调地狱，Angular附带了RxJS，允许安排基于订阅的异步数据处理，从而消除回调地狱。\n表单及验证，设计良好的表单及自定义验证支持。\n测试，支持单元测试和端到端（e2e）测试，并且可以将测试集成到自动的构建过程中。\n打包及优化，使用Webpack打包并优化代码。\n脚手架工具，Angular-CLI为项目的创建，测试，打包提供了极大的便利。\n代码简洁，使用TypeScript的类和接口，代码具有更高的易读性和可维护性。\n编译器，TypeScript强大的编译器，让我们更快的定位错误，代码最终编译成ES5或ES6版本的JavaScript，消除了将Angular编译器和应用程序打包在一起的必要，进一步降低了框架的开销。\n服务器端渲染，Angular Universal会将应用程序转换成HTML，可用于服务器端渲染，提高SEO。\n现在UI组件，具有现代风格的UI库Material2。\n\nAngular的学习曲线前期\b比较陡，一但熟悉，后面的学习将非常平滑，开发\b也会异常轻松有趣，相信你会被TypeScript的语法吸引。\n假设你\b已了解HTML/CSS/JavaScript，从下章开始，\b我们正式打开Angular新世界大门。\n","categories":["Angular"],"tags":["Angular"]},{"title":"在Mac下配置多个Git账户的SSH-Key","url":"/2018/07/%E5%9C%A8Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit%E7%94%A8%E6%88%B7%E7%9A%84SSH-Key/","content":"准备工作请确保在你的Mac上已安装Git。安装Git请参考：传送门在终端输入命令$ git --version， 能打印出具体的版本号，表示Git正确安装。\n开始配置本文以配置GitHub和GitLab为案例，将生成两对公共/私有rsa密钥对，rsa_github 和 rsa_gitlab。\n在本地创建SSH-Key1、打开终端，$ cd ~，进入到当前用户目录下。  \n2、使用命令$ ssh-keygen -t rsa -C &quot;i@itpoet.cn&quot;生成公共/私有rsa密钥对。此时会看到终端提示输入要保存密钥的文件名，为了做区分，我们给文件名加个后缀，本例第一个rsa密钥对：rsa_github。接着会看到终端提示输入密码，敲两次 Enter回车键 则不需要密码。最终在 .ssh 文件夹 里生成 rsa_github 和 rsa_github.pub 两个文件，如图：注意：在 第2步 执行完后，如果用户目录下没有生成 .ssh 文件夹 ，那我们需要手动创建。  \n$ cd ~$ mkdir .ssh$ cd .ssh\n成功创建完 .ssh 文件夹 之后，再执行 第2步 操作。  \n3、创建本例的第二个rsa密钥对，rsa_gitlab。 \n$ cd .ssh$ ssh-keygen -t rsa -C \"a@itpoet.cn\"\n如图：  \n4、为ssh添加config配置文件，在 .ssh文件夹 下，新建config文件。  \n$ cd ~/.ssh$ touch config\nconfig文件创建好之后，\b将其内容\b修改为：\nHost github.com  User itPoet_github  IdentityFile ~&#x2F;.ssh&#x2F;rsa_githubHost gitlab.com  User itPoet_gitlab  IdentityFile ~&#x2F;.ssh&#x2F;rsa_gitlab\n\n5、配置 .gitconfig 文件。使用如下命令将会在用户目录下自动创建 .gitconfig 文件。\n$ cd ~$ git config --global user.name \"itPoet_github\"$ git config --global user.email \"i@itpoet.cn\"\n\n注意：在 第4步 执行完后，如果用户目录下没有生成 .gitconfig 文件 ，那我们需要手动创建。\n$ cd ~$ touch .gitconfig\n最后将.gitconfig文件的内容修改为：\n[user]    name &#x3D; itPoet_github    email &#x3D; i@itpoet.cn[user]    name &#x3D; itPoet_gitlab    email &#x3D; a@itpoet.cn\n在对应的Git网站\b添加SSH密钥设置1、 GitHubsettings –&gt; SSH and GPG keys –&gt; New SSH Key\b打开 rsa_github.pub，将里面的内容复制到 Key 输入框中，如图：如图：  \n2、 GitLabProfile –&gt; SSH keys\b打开 rsa_gitlab.pub，将里面的内容复制到 Key 输入框中，如图：如图：  \n至此，在Mac下配置多个Git账户的SSH-Key参考教程也完成，同理，我们还可以配置Coding、码云等。现在让我们来体验使用SSH\b提交代码吧~~\n","categories":["技术教程"],"tags":["Mac","Git","SSH-Key"]},{"title":"再见，也许就是再也不见","url":"/2018/04/%E5%86%8D%E8%A7%81%EF%BC%8C%E4%B9%9F%E8%AE%B8%E5%B0%B1%E6%98%AF%E5%86%8D%E4%B9%9F%E4%B8%8D%E8%A7%81/","content":"","categories":["散文集"],"tags":["散文","再见"]},{"title":"不朽的失眠","url":"/2018/03/%E4%B8%8D%E6%9C%BD%E7%9A%84%E5%A4%B1%E7%9C%A0/","content":"\n记得第一次见这篇文章出现在初中的语文书上，确确实实引起了我的共鸣，自此念念不忘，忽然感觉此刻很应景，收录此文。\n\n他落榜了！一千二百年前。榜纸那么大那么长，然而，就是没有他的名字。啊！竟单单容不下他的名字“张继”那两个字。  \n考中的人，姓名一笔一划写在榜单上，天下皆知。奇怪的是，在他的感觉里，考不上，才更是天下皆知，这件事，令他羞惭沮丧。\n离开京城吧！议好了价，他踏上小舟。本来预期的情节不是这样的，本来也许有插花游街、马蹄轻疾的风流，有衣锦还乡、袍笏加身的荣耀。然而，寒窗十年，虽有他的悬梁刺股，琼林宴上，却并没有他的一角席次。\n船行似风。\n江枫如火，在岸上举着冷冷的爝焰，这天黄昏，船，来到了苏州。但，这美丽的古城，对张继而言，也无非是另一个触动愁情的地方。\n如果说白天有什么该做的事，对一个读书人而言，就是读书吧！夜晚呢？夜晚该睡觉以便养足精神第二天再读。然而，今夜是一个忧伤的夜晚。今夜，在异乡，在江畔，在秋冷雁高的季节，容许一个落魄的士子放肆他的忧伤。江水，可以无限度地收纳古往今来一切不顺遂之人的泪水。\n这样的夜晚，残酷地坐着，亲自听自己的心正被什么东西啮食而一分一分消失的声音。并且眼睁睁地看自己的生命如劲风中的残灯，所有的力气都花在抗拒，油快尽了，微火每一刹那都可能熄灭。然而，可恨的是，终其一生，它都不曾华美灿烂过啊！\n江水睡了，船睡了，船家睡了，岸上的人也睡了。惟有他，张继，睡不着。夜愈深，愈清醒，清醒如败叶落余的枯树，似梁燕飞去的空巢。\n起先，是睡眠排拒的他。(也罢，这半生，不是处处都遭排拒吗？)而后，是他在赌气，好，无眠就无眠，长夜独醒，就干脆彻底来为自已验伤，有何不可？\n月亮西斜了，一副意兴阑珊的样子。有乌啼，粗嗄嘶哑，是乌鸦。那月亮被它一声声叫得更黯淡了。江岸上，想已霜结千草。夜空里，星子亦如清霜，一粒粒零落凄绝。\n在须角在眉梢，他感觉，似乎也森然生凉，那阴阴不怀好意的凉气啊，正等待凝成早秋的霜花，来贴缀他惨淡少年的容颜。\n江上渔火二三，他们在干什么？在捕鱼吧？或者，虾？他们也会有撒空网的时候吗？世路艰辛啊！即使潇洒的捕鱼的，也不免投身在风波里吧？然而，能辛苦工作，也是一种幸福吧！今夜，月自光其光，霜自冷其冷，安心的人在安眠，工作的人去工作。只有我张继，是天不管地不收的一个，是既没有权利去工作，也没福气去睡眠的一个……\n钟声响了，这奇怪的深夜的寒山寺钟声。一般寺庙，都是暮鼓晨钟，寒山寺庙敲“夜半钟”，用以惊世。钟声贴着水面传来，在别人，那声音只是睡梦中模糊的衬底音乐。在他，却一记一记都撞击在心坎上，正中要害。钟声那么美丽，但钟声自己到底是痛还是不痛呢？既然失眠，他推枕而起，摸黑写下“枫桥夜泊”四字。然后，就把其余二十八字照抄下来。我说“照抄”，是因为那二十八个字在他心底已像白墙上的黑字一样分明凸显：\n月落乌啼霜满天，江枫渔火对愁眠。\n姑苏城外寒山寺，夜半钟声到客船。\n感谢上苍，如果没有落第的张继，诗的历史上便少了一首好诗，我们的某一种心情，就没有人来为我们一语道破。\n一千二百年过去了，那张长长的榜单上（就是张继挤不进去的那纸金榜）曾经出现过的状元是谁？哈！管他是谁。真正被记得的名字是“落第者张继”。有人会记得那一届状元披红游街的盛景吗？不！我们只记得秋夜的客船上那个失意的人，以及他那场不朽的失眠。\n","categories":["文章收录"],"tags":["枫桥夜泊"]},{"title":"基于Node.js搭建Socket聊天室","url":"/2018/02/nodejs-build-socket-chartroom/","content":"前言可以毫不夸张的说，Node.js的出现带动了整个前端界的繁荣发展，自此进入百花齐放，百家争鸣的时代。时至今天，我们能用Node.js实现很多依靠传统服务器端编程语言才能实现的事，甚至更加简便、更加高效。本案例使用Node.js的net模块，建立服务端与客户端的Socket连接，简单实现了客户端广播消息通信和点对点通信。\n项目结构server.js 服务端项目下的server.js是服务端的执行文件，用于创建服务端的Socket服务，监听指定端口；接收客户端传过来的数据，解析数据并按照数据中附带的协议进行广播消息通信或点对点通信。具体代码如下：\n// Socket聊天室 - server 服务端const net = require('net');// 定义clients（键值对集合），用于存储所有的客户端连接，通过用户名去索引客户端socketlet clients = &#123;&#125;;let server = net.createServer((socket) =&gt; &#123;    // 客户端登入    function signin(clientDataContent) &#123;        clientDataContent = JSON.parse(clientDataContent);        let username = clientDataContent.from;        // 如果clients（客户端 socket 集合）中有1个以上的成员，就广播通知所有人谁谁上线了，除了他本身        if (Object.keys(clients).length) &#123;            let onlineNotice = &#123;  // 组成上线通知消息数据格式                protocol: 'online',                online: username,                onlineCount: Object.keys(clients).length + 1            &#125;;            // 遍历 clients ，给除了自身的所有客户端发送消息            for (let username in clients) &#123;                if (clients.hasOwnProperty(username)) &#123;                    let noticeClient = clients[username];                    noticeClient.write(JSON.stringify(onlineNotice));                &#125;            &#125;        &#125;        // 将新连接的客户端socket存储于clients        clients[username] = socket;        // 服务端打印上线提示消息        console.log(`欢迎 $&#123;socket.remoteAddress&#125;:$&#123;socket.remotePort&#125;【$&#123;username&#125;】，加入聊天室，当前在线：$&#123;Object.keys(clients).length&#125;`);    &#125;    // 广播消息通信    function broadcast(clientDataContent) &#123;        // 广播出去消息数据格式 json        let sendClientData = JSON.parse(clientDataContent);        // 遍历clients对象（for in），给所有的客户端socket广播消息        for (let username in clients) &#123;            if (clients.hasOwnProperty(username)) &#123;                let client = clients[username];                client.write(JSON.stringify(sendClientData));            &#125;        &#125;    &#125;    // p2p 点对点通信    function p2p(clientDataContent) &#123;        let p2pClientData = JSON.parse(clientDataContent);        // 给指定的客户端发送消息        clients[p2pClientData.to].write(JSON.stringify(p2pClientData));    &#125;    // 给每一个连接服务端的客户端socket注册data事件    socket.on('data', (chunk) =&gt; &#123;        try &#123;            // 对客户端传过来的数据chunk（json数据）进行序列化            let clientDataContent = chunk.toString().trim();            // 获取协议            let protocol = JSON.parse(clientDataContent).protocol;            switch (protocol) &#123;                case 'signin':                    signin(clientDataContent);                    break;                case 'broadcast':                    broadcast(clientDataContent);                    break;                case 'p2p':                    p2p(clientDataContent);                    break;                default:                    socket.write('错误！未能识别的通信协议！');                    break;            &#125;        &#125; catch (error) &#123;            socket.write('出现错误了哦~');            throw error;        &#125;    &#125;);    // 给每一个连接服务端的客户端socket注册error事件，如果连接中断，则触发此事件    socket.on('error', (error) =&gt; &#123;        // 在客户端对象中，将连接中断的那个客户端删除        let deletekey = null;        // 遍历clients对象，找到下线的socket，并将其删除        for (let username in clients) &#123;            if (clients.hasOwnProperty(username)) &#123;                let client = clients[username];                if (socket === client) deletekey = username;            &#125;        &#125;        delete clients[deletekey];        // 广播通知所有人，谁谁下线了        let offlineNotice = &#123;  // 组成下线通知消息数据格式            protocol: 'offline',            offline: deletekey,            onlineCount: Object.keys(clients).length        &#125;;        for (let username in clients) &#123;            if (clients.hasOwnProperty(username)) &#123;                let noticeClient = clients[username];                noticeClient.write(JSON.stringify(offlineNotice));            &#125;        &#125;        // server 消息        console.log(`$&#123;deletekey&#125; 下线了，当前在线：$&#123;Object.keys(clients).length&#125;`);    &#125;);&#125;);// 监听指定端口let port = 2018;server.listen(port, (error) =&gt; &#123;    if (error) &#123;        console.log(`$&#123;port&#125;端口被占用！`);    &#125; else &#123;        console.log(`服务器端正常启动，正在监听$&#123;port&#125;端口`);    &#125;&#125;);\n\n\nclient.js 客户端项目下的client.js是客户端的执行文件，用于创建客户端的Socket服务。将用户输入的内容按特定的格式组成数据结构发给服务端，同时打印出服务端指定的内容。具体代码如下：\n// Socket聊天室 - 客户端 clientconst net = require('net');const readline = require('readline');const rl = readline.createInterface(process.stdin, process.stdout);rl.question('请输入聊天昵称：', (nickname) =&gt; &#123;    nickname = nickname.trim();    if (!nickname) &#123;        throw new Error('昵称不能为空！');    &#125;    // 创建与服务端的连接    // 设置正确的服务端的ip地址和端口    let server = net.connect(&#123;port: 2018, host: '127.0.0.1'&#125;, () =&gt; &#123;        // 登入操作        let user = &#123;            protocol: 'signin',            from: nickname        &#125;;        // 往服务端传送数据        server.write(JSON.stringify(user));        console.log(`【系统通知】已成功加入聊天室，尽情畅聊吧~`);        // 监听服务端发送过来的数据        server.on('data', (chunk) =&gt; &#123;            try &#123;                let serverDataContent = JSON.parse(chunk.toString().trim());                let protocol = serverDataContent.protocol;                switch (protocol) &#123;                    case 'online':                        console.log(`\\n【系统通知】欢迎：$&#123;serverDataContent.online&#125;，加入聊天室，当前在线人数：$&#123;serverDataContent.onlineCount&#125;\\n`);                        rl.prompt();                        break;                    case 'offline':                        console.log(`\\n【系统通知】$&#123;serverDataContent.offline&#125;下线了，当前在线人数：$&#123;serverDataContent.onlineCount&#125;\\n`);                        rl.prompt();                        break;                    case 'broadcast':                        console.log(`\\n[@所有人] $&#123;serverDataContent.from&#125;&gt; $&#123;serverDataContent.message&#125;\\n`);                        rl.prompt();                        break;                    case 'p2p':                        console.log(`\\n[@$&#123;serverDataContent.to&#125;] $&#123;serverDataContent.from&#125;&gt; $&#123;serverDataContent.message&#125;\\n`);                        rl.prompt();                        break;                    default:                        server.write('错误！未能识别的通信协议！');                        break;                &#125;            &#125; catch (error) &#123;                server.write('出现错误了哦~');                throw error;            &#125;        &#125;);        rl.setPrompt(nickname + '&gt; ');  // 此时没有写入控制台        rl.prompt(); // 写入控制台        // 输入一行内容敲回车        rl.on('line', (line) =&gt; &#123;            line = line.toString().trim();            // 内容： user1:我只跟你说话  表示，客户端用户只跟user1通信            // 根据客户端用户输入的内容按“:”分割成两部分            let arrString = line.split(':');            let sendServerData = null;            // 组成往服务端发送的数据格式            if (arrString.length === 2) &#123;                // 点对点                sendServerData = &#123;                    protocol: 'p2p',                    from: nickname,                    to: arrString[0],                    message: arrString[1]                &#125;;            &#125; else &#123;                // 广播消息                sendServerData = &#123;                    protocol: 'broadcast',                    from: nickname,                    message: line                &#125;;            &#125;            // 往服务端发送数据            server.write(JSON.stringify(sendServerData));            rl.prompt(); // 写入控制台        &#125;);        rl.on('close', () =&gt; &#123;        &#125;);    &#125;);&#125;);\n\n实现功能目前已实现：客户端广播消息通信、点对点通信。\n项目使用\n启动服务端，$ node server.js\n启动第一个客户端，$ node client.js\n启动第二个客户端，$ node client.js\n……\n\n演示视频\n项目下载本案例源代码托管于GitHub，下载：传送门\n","categories":["前端"],"tags":["Node.js"]},{"title":"CSS实现元素垂直居中的几种方法","url":"/2018/02/css-vertical-center/","content":"\n以下几种CCS实现元素垂直居中的方法，均不考虑低版本浏览器。\n\n方法一：子绝父相（子元素绝对定位，父元素相对定位）1.1 不知道子元素高度和父元素高度的情况。\n.parentElement &#123;    position: relative;&#125;.childElement &#123;    position: absolute;    top: 50%;    transform: translateY(-50%);&#125;\n1.2 知道子元素高度和父元素高度的情况。\n.parentElement &#123;    position: relative;&#125;.childElement &#123;    position: absolute;    top: 0;    bottom: 0;    left: 0;    right: 0;    margin: auto;&#125;\n\n\n方法二：子元素相对定位父元素设置了高度，而且父元素里面只有一个子元素，可使用子元素相对定位。\n.parentElement &#123;    height: xxxx;&#125;.childElement &#123;    position: relative;    top: 50%;    transform: translateY(-50%);&#125;\n\n方法三：CSS3 flex 布局如果不考虑低版本浏览器兼容性，用CSS3的flex布局就非常简单咯。\n.parentElement &#123;    display: flex;    align-items: center;&#125;","categories":["前端"],"tags":["CSS","垂直居中"]},{"title":"使用ES6新特性实现数组去重","url":"/2018/01/es6-array-eliminate-redundancy/","content":"数组去重，对于前端开发者来说家常便饭的事，更是初学者必须掌握的知识，面试经常会考。\n数组去重相关的方法，网上已有很多，大多使用了ES6以前的方法，本文对于不作赘述。但随着各大浏览器对ES6的支持性越来越好，以及ES6新特性深入人心，更何况作为一名前端工程师，我们应该顺应时代潮流，推动JavaScript发展，所以，尽情地拥抱ES6吧。\n本文讲解使用ES6新特性实现数组去重的一种新方法，代码及其简短又高效。  \nJavaScript代码：/** @param arr 传入的参数：带有重复项的数组* */Array.from(new Set(arr));\n\n\n\n例子：/** @param oldArr 带有重复项的旧数组* @param newArr 去除重复项之后的新数组* */let oldArr = [1, 1, 1, 2, 3, 2, 4, 4, 4, 9, 9, 0, 0, NaN, NaN];let newArr = Array.from(new Set(oldArr));console.log(newArr);  // [1, 2, 3, 4, 9, 0, NaN]\n\n分析：Set对象Set对象允许存储任何类型的唯一值，无论是原始值或者是对象引用。它可以是任何类型的单个值的集合。Set中的元素只会出现一次，即Set中的元素是唯一的。语法：new Set([iterable]);参数：iterable，如果传递一个可迭代对象(包括 Array，Map，Set，String，TypedArray，arguments 对象等等)，它的所有元素将被添加到新的 Set中。如果不指定此参数或其值为null，则新的Set为空。\nSet对象例子let testArr = [0, 1, 1, 2, 3, 3, 3, 3, 4, NaN, NaN, undefined, undefined];let setTestArr = new Set(testArr);console.log(setTestArr);  // Set(6) &#123;1, 2, 3, 4, NaN, undefined&#125;\n\nfrom对象Array.from()方法从一个类似数组或可迭代的对象(包括 Array，Map，Set，String，TypedArray，arguments 对象等等) 中创建一个新的数组实例。\nfrom对象例子let testArr = [0, 1, 1, 2, 3, 3, 3, 3, 4, NaN, NaN, undefined, undefined];let setTestArr = new Set(testArr);console.log(setTestArr);  // &#123;1, 2, 3, 4, NaN, undefined&#125;let newArr = Array.from(setTestArr);console.log(newArr);  // [1, 2, 3, 4, NaN, undefined]\n\n使用ES6实现数组去重，就是如此简单，快去试试吧~\n","categories":["前端"],"tags":["数组去重","ES6"]},{"title":"使用gulp搭建前端自动化工作流环境（简易版）","url":"/2017/11/%E4%BD%BF%E7%94%A8Gulp%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81%EF%BC%88%E7%AE%80%E6%98%93%E7%89%88%EF%BC%89/","content":"\n本文通过简单且实用的案例，讲解使用gulp搭建前端自动化工作流环境详细步骤，带领大家快速入门。\n\n什么是gulp？来自官网的简介：Automate and enhance your workflow. gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something.  \n大致意思是讲gulp是一款自动化构建工具，可用于增强你的开发工作流程，提高工作效率！前端界的友友们，这个工具可不要错过了哟~\n了解更多信息，请前往： gulp官网 、 gulp中文网  \ngulp优点\n易于使用 通过代码优于配置的策略，gulp 让简单的任务简单，复杂的任务可管理。\n构建快速 利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。\n插件高质 gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。\n易于学习 通过最少的 API，掌握 gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。\n\n准备工作gulp依赖Node.js，参考本教程的朋友们，请先在本地环境安装好Node.js，并确认Node.js、npm可正常使用。\n步骤第一步 新建项目根文件夹(例：gulp-demo)，并在项目根目录下使用npm安装必要的包$ npm install gulp gulp-less gulp-concat gulp-cssnano gulp-uglify gulp-htmlmin browser-sync --save-dev\n\n本案例使用的gulp插件介绍：\n\ngulp-less 将less编译成css\ngulp-concat 将多个JavaScript合并\ngulp-cssnano css压缩\ngulp-uglify JavaScript压缩并混淆\ngulp-htmlmin html压缩\nbrowser-sync 多浏览器同步操作\n\n第二步 在项目根文件夹(例：gulp-demo)下创建相关的文件结构src [gulp编译之前的源文件]\ncss 我们在此处编写css文件\nimg 我们在此处放置图片文件\njs 我们在此处编写css文件\nindex1.html \nindex2.html\n…….\n\nnode_modules通过npm安装的包及其依赖包的库，自动生成文件夹。\ngulpfile.jsgulp的入口文件，我们在此处编写相关任务代码。\ndist [gulp编译之后的文件，即我们最终要得到文件]\ncss \nimg\njs\nindex.html\n\n项目目录结构图示\n第三步 在gulpfile.js文件里编写具体的任务代码载入所需要的模块'use strict';   // 启用JavaScript严格模式 var gulp = require('gulp');var less = require('gulp-less');var cssnano = require('gulp-cssnano');var concat = require('gulp-concat');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var browserSync = require('browser-sync');\n\nless编译、压缩// 定义LESS编译、压缩的任务：cssgulp.task('css', function () &#123;    gulp.src(['src/css/*.less', '!src/css/_*.less'])        .pipe(less())        .pipe(cssnano())        .pipe(gulp.dest('dist/css'))        .pipe(browserSync.reload(&#123;            stream: true        &#125;));&#125;);\n\nJavaScript合并、压缩、混淆// 定义多个JavaScript文件合并、压缩混淆的任务：jsgulp.task('js', function () &#123;    gulp.src('src/js/*.js')        .pipe(concat('index.js')) // JS合并之后，文件命名为index.js        .pipe(uglify())  // JS压缩混淆        .pipe(gulp.dest('dist/js'))        .pipe(browserSync.reload(&#123;            stream: true        &#125;));&#125;);\n\n将src文件夹下img图片复制到dist文件夹下img// 定义image复制的任务：imggulp.task('img', function () &#123;    gulp.src('src/img/*.*')        .pipe(gulp.dest('dist/img'))        .pipe(browserSync.reload(&#123;            stream: true        &#125;));&#125;);\n\nhtml代码压缩// 定义HTML压缩的任务：htmlgulp.task('html', function () &#123;    gulp.src('src/*.html')        .pipe(htmlmin(&#123;collapseWhitespace: true&#125;))        .pipe(gulp.dest('dist'))        .pipe(browserSync.reload(&#123;            stream: true        &#125;));&#125;);\n\n多浏览器同步操作，开启gulp监视文件变动// 定义浏览器同步操作服务的任务：browserSyncgulp.task('browserSync', function () &#123;    browserSync(&#123;        server: &#123;            baseDir: ['dist']        &#125;    &#125;, function (err, bs) &#123;        console.log(bs.options.getIn([\"urls\", \"local\"]));    &#125;);    // 开启gulp监视    gulp.watch('src/css/*.less', ['css']);  // less文件改动时，执行css任务    gulp.watch('src/js/*.js', ['js']);  // js文件改动时，执行js任务    gulp.watch('src/img/*.*', ['img']);  // image文件改动时，执行img任务    gulp.watch('src/*.html', ['html']);  // html文件改动时，执行html任务&#125;);\n\n使用\n1 $ gulp css LESS 编译 压缩 合并\n2 $ gulp js JavaScript 合并 压缩 混淆\n3 $ gulp img image 复制\n4 $ gulp html HTML 压缩\n5 $ gulp browserSync 多浏览器同步操作，gulp监视JS/CSS/HTML文件改变\n\n到此，基于gulp的前端自动化工作流环境搭建完成，以下使用视频教程。\n点击此处，下载本案例源代码\n","categories":["前端"],"tags":["Gulp","前端自动化"]},{"title":"快速掌握Markdown基础语法","url":"/2017/10/quickly-master-the-markdown-basic-syntax/","content":"什么是Markdown？Markdown是一种轻量级标记语言，用途广泛，其使用简洁的语法代替常见的排版格式，从而能使我们专心于写作，在最大程度上提高效率。Markdown 的语法十分简单，常用的标记符号也不超过十个，学习成本极低，一旦熟悉这种语法规则，将会有一劳永逸的效果。  \n\nWe believe that writing is about content, about what you want to say – not about fancy formatting.我们坚信写作写的是内容，所思所想，而不是花样格式。\n\n使用Markdown的优点：\n专注你的文字内容而不是排版样式。\n纯文本内容，兼容所有的文本编辑器。\n可读、直观、通用性高、学习成本低。  \n轻松导出HTML、PDF等格式的文件。  \n随时可修改.md文件，不会因版本问题导致格式混乱。\n\nMarkdown简要语法规则：1. 字体加粗 [标记符： ** / __ ]在需要表示为粗体的文字内容，用两个** 或 __标记符包裹。例如：**字体加粗** 或 __字体加粗__\n \n2. 斜体 [标记符： * / _ ]在需要表示为斜体的文字内容，用两个* 或 _标记符包裹。例如：*斜体* 或 _斜体_\n \n3. 标题 [标记符： # ]标题是文章最常用的格式，在Markdown中，如果一段文字被定义为标题，只需在这段文字前加#标记符。例如：# 一级标题## 二级标题### 三级标题……以此类推，共六级标题，对应HTML的h1~h6。注意：不包裹文字内容的标记符和文字之间需加一个空格！这是Markdown标准语法。\n \n4. 引用 [标记符： &gt; ]只需在引用的文字内容前面加上&gt;标记符，就可以出现引用的效果。例如：&gt; 我是引用的句子哦\n\n5. 列表无序列表 [标记符：- / + / * ]在需要表示为无序列表的文字前加 - 或 + 或 * 标记符。\n\n有序列表 [标记符：1. 、 2. 、 3. …… ]在需要表示为有序列表的文字前直接加 1. 、 2. 、 3. 标记符。\n  \n6. 链接 [标记符： [显示文字](链接地址) ]在Markdown中，插入链接，例如：[点击跳转itPoet](www.itpoet.cn)\n\n7. 图片 [标记符： ![](图片链接地址) ]在Markdown中，插入图片，例如：![夏韵](http://ojzaff7fe.bkt.clouddn.com/zytyhxmy.jpg)\n\n8. 引用代码单行代码 [标记符：` ]需要引用代码时，如果引用的代码只有一行，可以用两个 ` 标记符将代码包裹起来。例如：\n\n多行代码 [标记符：``` ]多行代码，可以用两个 ``` 标记符将代码块包裹起来。例如：\n\n9. 分割线 [标记符：* / - / _ ]插入分割线，在一行中用三个以上的 * 或 - 或 _ 标记符来建立一个分隔线，行内不能有其他内容。分隔符独占一行。例如：*** 、 ---、 ___\n\n10. 换行 [标记符： 两个空格符 加 回车 ]在Markdown中进行换行，需在文字后面键入 两个空格符 加 回车。\n11. 表格在Markdown中插入表格的标记符比较复杂，大家直接看效果，需要用到时过来复制代码。\n默认表格样式参考代码：\nColName1 | ColName2 | ColName3---------|----------|---------ColValue | ColValue | ColValueColValue | ColValue | ColValueColValue | ColValue | ColValueColValue | ColValue | ColValue\n\n效果如下：\n\n\n\nColName1\nColName2\nColName3\n\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\n表格列调整表格的列位置调整（默认左对齐，:------:居中，------:右对齐）参考代码：\n|ColName1 | ColName2 | ColName3||---------|:--------:|--------:||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue|\n\n效果如下：\n\n\n\nColName1\nColName2\nColName3\n\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\n说明： 由于不同浏览器之间对Markdown编译存在差异，实际效果跟本文展示的效果也会有所不同。\n","categories":["技术教程"],"tags":["Markdown"]},{"title":"触动心灵的六句古诗词","url":"/2017/10/%E8%A7%A6%E5%8A%A8%E5%BF%83%E7%81%B5%E7%9A%84%E5%85%AD%E5%8F%A5%E5%8F%A4%E8%AF%97%E8%AF%8D/","content":"\n人生若只如初见，何事秋风悲画扇。 ——纳兰性德 《木兰词·拟古决绝词柬友》\n\n很多时候，初见，惊艳。蓦然回首，却已是物是人非，曾经沧海，只怕早已换了桑田。短短的一句话，道尽人生多少悲凉，道尽人生多少无奈。如果所有往事都能化为红尘一笑，只留下初见时的倾情、惊艳，忘却也许有过的背叛、伤怀，这是何等美妙的人生境界。若只是初见，一切美好都不会遗失。  \n\n曾经沧海难为水，除却巫山不是云。 ——元稹 《离思（其四）》\n\n曾读此诗难为诗，因为这句诗把人对某种生死之恋的刻骨铭心写绝了。在记忆之海里继续沉浸，在往事里打捞沉落的星辰月光，直至那昔年的沧海也将自己渐渐淹没。难道真的是沧海巫山之后，便再无水和云了？所以，不要太早遇见心上的他/她，万一你捉不住他/她，将一辈子都活在这句诗句里。  \n\n人面不知何处去，桃花依旧笑春风。 ——崔护 《题都城南庄》\n\n心爱的人不知道去哪了？只留下桃花却依然微笑，在春风中绽放。以笑映悲，道尽心中悲楚，令人不禁感慨万千。若干年后，我们是否也会有如此遭遇呢？  \n\n众里寻她千百度，蓦然回首，那人却在，灯火阑珊处。 ——辛弃疾 《青玉案·元夕》\n\n我千百次寻找，等待的那个人还没有出现。我的心充满疲惫和失落，不经意一回首，却发现她就在那灯火寥落的地方静静地站着。很多时候，我们总是在往阴暗处去寻找我们心中的她，却总不见其影踪，蓦然回首，才发现她其实一直就在我们的身边，离我们只有一个转身的距离。  \n\n衣带渐宽终不悔，为伊消得人憔悴。 ——柳永 《蝶恋花》\n\n无可替代的思念，无怨无悔的执着，脸庞的瘦削，颧骨的高突，身上的青衫也变得宽松了，但从没有后悔这一切皆因对她无边的思念而起，心甘情愿为爱饱受煎熬。这无尽的思念、无尽的爱，人世间又有谁能承受的起呢？   \n\n纵使相逢应不识，尘满面，鬓如霜。 ——苏轼 《江城子·乙卯正月二十日夜记梦》\n\n即使相逢也料想不会认识，因为我四处奔波，灰尘满面，鬓发如霜。这恐怕是每个一人最害怕的结果，若是不见也就罢了，若是相见，却互不认识，就这样在岁月里蹉跎地擦肩而过，那该是多么令人心碎的一幕。  \n后记： 沧海桑田，浩瀚的历史长河中，触动我心灵的古诗词又怎么可能只有这六句呢？\n","categories":["诗词人生"],"tags":["诗词"]},{"title":"醉眼天涯 花香满衣","url":"/2017/10/%E9%86%89%E7%9C%BC%E5%A4%A9%E6%B6%AF-%E8%8A%B1%E9%A6%99%E6%BB%A1%E8%A1%A3/","content":"在忽然惊醒的夜凉里，挨着秋天的衣袖，独坐如莲。灯半笼，更阑。\n夜雾已经烹煮成一壶茶，不饮。相思已经倾斜成箫，不吹。只在梦的边缘，等你叩门的绝响。\n我的思念，是你前世遗忘采撷而无法成熟的青果。不舍那未了的情缘，我才执意轮回世间。单薄的形骸幻化成一树瘦梅，等你在必经的路旁。依旧是前世那一袭清绝的白衣，期待成为你不期而至的风景。拥有你一刻完整凝眸，即便错失整个花季，我也欣然坠落，腐化为泥。是什么将我的回眸捂上？烟色的记忆里，总不见你寻路而来，陪我，垂钓月光。\n洪荒的纪事已远，恍若隔世的约定风一般不着形迹，最放心不下的，还是你。为你点燃的浣花诗灯一盏一盏次第而亮，为你酝酿的柔情千顷一寸一寸绿满天涯。\n三界内，所有的花树静静的迎候岁月，唯我轻衫飘飘、暗香盈盈，等你在岁月的对岸。你不来，我不敢老去。静夜里如此的思念，真的会把你惊醒?\n今夜，你终于顺着长长的夜路，踏响我长满青苔的小径。苔痕斑驳的门扉，洞箫细碎的长廊,有谁的心事穿袜行走，莲步轻移。\n握着你的一唇冰凉，隔世的故事碎玉满地。心疼你单衣试酒的落寞孤寒，为你一弦独操，陪你独立霜降的寒凉。用素帕细细为你抹去肩头发上的霜，拢你的一袖寒凉……\n剪烛西窗。一卷心情，一壶淡酒，一阙宫商。单薄的素衣，不耐乍暖还寒的雨季。此刻，你停泊在哪一隅的夜凉里？\n谁替你烘干夜露沾湿的薄衫，笑你花香满衣。谁如我前世一般卷帘相问：可看见月的香馨？何处是港湾？青山麓，碧水旁，黄昏沙滩？寂寞沙洲寒。\n空相对，远山，远水……残红，无寐……  \n","categories":["诗词人生"],"tags":["诗词"]}]