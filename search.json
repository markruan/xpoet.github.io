[{"title":"中文文案排版指北","url":"/2020/05/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/","content":"中文文案排版指北统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。\n空格「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。\n与大家共勉之。」——vinta/paranoid-auto-spacing\n\n\n中英文之间需要增加空格正确：\n\n在 LeanCloud 上，数据存储是围绕 AVObject 进行的。\n\n错误：\n\n在LeanCloud上，数据存储是围绕AVObject进行的。\n在 LeanCloud上，数据存储是围绕AVObject 进行的。\n\n完整的正确用法：\n\n在 LeanCloud 上，数据存储是围绕 AVObject 进行的。每个 AVObject 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 AVObject 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。\n\n例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。\n中文与数字之间需要增加空格正确：\n\n今天出去买菜花了 5000 元。\n\n错误：\n\n今天出去买菜花了 5000元。\n今天出去买菜花了5000元。\n\n数字与单位之间需要增加空格正确：\n\n我家的光纤入屋宽带有 10 Gbps，SSD 一共有 20 TB\n\n错误：\n\n我家的光纤入屋宽带有 10Gbps，SSD 一共有 20TB\n\n例外：度 / 百分比与数字之间不需要增加空格：\n正确：\n\n今天是 233° 的高温。\n新 MacBook Pro 有 15% 的 CPU 性能提升。\n\n错误：\n\n今天是 233 ° 的高温。\n新 MacBook Pro 有 15 % 的 CPU 性能提升。\n\n全角标点与其他字符之间不加空格正确：\n\n刚刚买了一部 iPhone，好开心！\n\n错误：\n\n刚刚买了一部 iPhone ，好开心！\n刚刚买了一部 iPhone， 好开心！\n\n用 text-spacing 来挽救？CSS Text Module Level 4 的 text-spacing 和 Microsoft 的 -ms-text-autospace 可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 macOS、iOS、Windows 等用户介面目前并不存在这个特性，所以请继续保持随手加空格的习惯。\n标点符号不重复使用标点符号正确：\n\n德国队竟然战胜了巴西队！\n她竟然对你说「喵」？！\n\n错误：\n\n德国队竟然战胜了巴西队！！\n德国队竟然战胜了巴西队！！！！！！！！\n她竟然对你说「喵」？？！！\n她竟然对你说「喵」？！？！？？！！\n\n全角和半角不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『全形和半形』。\n使用全角中文标点正确：\n\n嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！\n核磁共振成像（NMRI）是什么原理都不知道？JFGI！\n\n错误：\n\n嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎！\n嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎！\n核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!\n核磁共振成像(NMRI)是什么原理都不知道?JFGI!\n\n数字使用半角字符正确：\n\n这个蛋糕只卖 1000 元。\n\n错误：\n\n这个蛋糕只卖 １０００ 元。\n\n例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全形数字的。\n遇到完整的英文整句、特殊名词，其内容使用半角标点正确：\n\n贾伯斯那句话是怎么说的？「Stay hungry, stay foolish.」\n推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。\n\n错误：\n\n贾伯斯那句话是怎么说的？「Stay hungry，stay foolish。」\n推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。\n\n名词专有名词使用正确的大小写大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论内容，在这里只对部分易错用法进行简述。\n正确：\n\n使用 GitHub 登录\n我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。\n\n错误：\n\n使用 github 登录\n使用 GITHUB 登录\n使用 Github 登录\n使用 gitHub 登录\n使用 gｲんĤЦ8 登录\n我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。\n我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。\n我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。\n我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。\n\n注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标淮的大小写规范进行书写；并通过 text-transform: uppercase;／text-transform: lowercase; 对表现形式进行定义。\n不要使用不地道的缩写正确：\n\n我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。\n\n错误：\n\n我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。\n\n争议以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是正确的。\n链接之间增加空格用法：\n\n请 提交一个 issue 并分配给相关同事。\n访问我们网站的最新动态，请 点击这里 进行订阅！\n\n对比用法：\n\n请提交一个 issue并分配给相关同事。\n访问我们网站的最新动态，请点击这里进行订阅！\n\n简体中文使用直角引号用法：\n\n「老师，『有条不紊』的『紊』是什么意思？」\n\n对比用法：\n\n“老师，‘有条不紊’的‘紊’是什么意思？”\n\n工具\n\n\n仓库\n语言\n\n\n\nvinta/paranoid-auto-spacing\nJavaScript\n\n\nhuei90/pangu.node\nNode.js\n\n\nhuacnlee/auto-correct\nRuby\n\n\nsparanoid/space-lover\nPHP (WordPress)\n\n\nnauxliu/auto-correct\nPHP\n\n\njxlwqq/chinese-typesetting\nPHP\n\n\nhotoo/pangu.vim\nVim\n\n\nsparanoid/grunt-auto-spacing\nNode.js (Grunt)\n\n\nhjiang/scripts/add-space-between-latin-and-cjk\nPython\n\n\nhustcc/hint\nPython\n\n\nstudygolang/autocorrect\nGo\n\n\n谁在这样做？\n\n\n网站\n文案\nUGC\n\n\n\nApple 中国\n是\nN/A\n\n\nApple 香港\n是\nN/A\n\n\nApple 台湾\n是\nN/A\n\n\nMicrosoft 中国\n是\nN/A\n\n\nMicrosoft 香港\n是\nN/A\n\n\nMicrosoft 台湾\n是\nN/A\n\n\nLeanCloud\n是\nN/A\n\n\nV2EX\n是\n是\n\n\nApple4us\n是\nN/A\n\n\nRuby China\n是\n标题达成\n\n\nPHPHub\n是\n标题达成\n\n\n少数派\n是\nN/A\n\n\n参考文献\nGuidelines for Using Capital Letters - ThoughtCo.\nLetter case - Wikipedia\nPunctuation - Oxford Dictionaries\nPunctuation - The Purdue OWL\nHow to Use English Punctuation Correctly - wikiHow\n格式 - openSUSE\n全形和半形 - 维基百科\n引号 - 维基百科\n疑问惊叹号 - 维基百科\n\n注：本文转载 https://github.com/sparanoid/chinese-copywriting-guidelines\n","categories":["技术教程"],"tags":["文案排版"]},{"title":"千呼万唤始出来，Hexo 主题 ILS 正式发布","url":"/2020/04/%E5%8D%83%E5%91%BC%E4%B8%87%E5%94%A4%E5%A7%8B%E5%87%BA%E6%9D%A5%EF%BC%8CHexo%E4%B8%BB%E9%A2%98ILS%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/","content":"如你所见，ILS 界面设计十分简洁、清爽，但功能齐全、不失优雅，这正是 ILS 的开发理念。也曾尝试过花里胡哨，发现不仅容易审美疲劳，而且背驰了写博客的初衷，记录生活、展示文字，应该才是搭建博客网站的最终追求，为此 ILS 应运而生。简约大气、不缺美感、突出内容、化繁为简、配置简单、长期维护，如果你也喜欢或认可这些主题特点，一起来折腾吧~\n关于主题名称 “ILS” 的由来：在主题开发之初，作者想到的几个名字都被已被用，词穷了，后来干脆将名字取自 “I Like Simple「我喜欢简单」” 首字母，就是这么简单。\n\n\n同时，非常欢迎感兴趣的同学 Pull Request 加入到该主题的开发中，共同打造极致 ILS。\nFeatures 功能特性Completed 已完成\n 恰到好处的留白，简约大气；\n 响应式设计，适配多种终端；\n 日间/夜间模式自由切换；\n 多种代码高亮方案；\n 语言国际化，支持中/英文；\n 内置多款评论插件；\n 支持全站文章搜索；\n 支持文章顶置；\n 代码块一键复制；\n TOC 目录结构；\n RSS 订阅；\n 网站 UV 和 PV 统计；\n 文章阅读次数统计；\n 页面滚动百分比提示；\n 一键快速回到顶部；\n 代码精简高效，去 jQuery 化；\n\nUnfinished 未完成\n 文章版权信息；\n 文章字数统计；\n 文章阅读时长；\n 文章支持显示公式；\n 文章支持显示公式；\n 在线更改字体和字号\n 打赏功能\n ……\n\nGet start 快速开始在开始使用主题之前，强烈建议你先阅读 「Easy Hexo 团队」撰写的 Hexo 教程！链接：https://easyhexo.com/\nInstall 安装\n使用 Git SSHgit clone --depath=1 git@github.com:XPoet/hexo-theme-ils.git themes/ils\n下载主题 release 版本请优先下载 最新 release 版本，master 分支无法保证稳定。下载后解压到 Hexo 博客目录下 themes 文件夹里面并重命名为 ils。\n\nEnable 启用Modify theme setting in _config.yml to ils.找到博客目录下的 _config.yml 文件，将 theme 设置为 ils 。\nUpdate 更新\n使用 Git SSHcd themes/ilsgit pull\n下载 主题最新 release 版本下载后解压到 Hexo 博客目录下 themes 文件夹里面并重命名为 ils。\n\nHow to use 如何使用Configuration 配置# theme basic info# 主题基本信息，无需改动。theme_info:  name: ILS  version: 1.1.0  author: XPoet  repository: https://github.com/XPoet/hexo-theme-ils# favicon# 网站图标，请在 \"/source/images/\" 目录，换成自己的即可。favicon: images/favicon.png# avatar# 头像图片，请在 \"/source/images/\" 目录，换成自己的即可。avatar: images/avatar.png# navigation menu# 导航菜单，如需新增导航，请按下面格式填写，同时需要添加对应的 Hexo 页面。# 新增页面，请参考往下的教程：\"Add page 添加页面\"。menu:  Home: /  Archives: /archives  # About: /about  # Links: /links  # ...# RSS# RSS 订阅，如需启用，请先安装 Hexo 插件：hexo-generator-feed。rss:  enable: true# comment plugin# 评论插件，主题内置了 Valine 和 Gitalk，只能使用其中一款，如果 enable 都设为了 true，将使用 Valine。comments:  # Valine https://github.com/xCss/Valine  # 如何使用 Valine 请参考：https://github.com/xCss/Valine  valine:    enable: false    appid:   # leancloud appid    appkey:  # leancloud appkey    meta: ['nick', 'mail', 'link']    placeholder: 😜尽情吐槽吧~  # Gitalk https://github.com/gitalk/gitalk  # 如何使用 Gitalk 请参考：https://github.com/gitalk/gitalk  gitalk:    enable: false    github_id:      # GitHub repo owner    repository:     # Repository name to store issues    client_id:      # GitHub Application Client ID    client_secret:  # GitHub Application Client Secret# website count# 网站计数website_count:  # busuanzi http://ibruce.info/2015/04/04/busuanzi/  busuanzi_count:    enable: false    site_uv: false    site_pv: false    page_pv: false# Local Search# Dependencies: https://github.com/theme-next/hexo-generator-searchdb# 本地搜索，如需启用，请先安装 Hexo 插件：hexo-generator-searchdb。local_search:  enable: true  # If auto, trigger search by changing input.  # If manual, trigger search by pressing enter key or search button.  # 输入关键字后的触发搜索，可选 自动 auto 或 手动 manual。  # auto 每输入或删除一个字符后，自动触发搜索。  # manual 每输入或删除一个字符后，需要按回车键触发搜索。  trigger: auto  # values: auto | manual  # Unescape html strings to the readable one.  # 转义 HTML 字符串为可读字符串。  unescape: false  # Preload the search data when the page loads.  # 在页面加载时预加载搜索数据  preload: true# Code Copy# 代码复制，复制风格可选 default | flat | mac。code_copy:  enable: true  style: flat  # values: default | flat | mac# sidebar tools# 侧边栏工具，位置可选 left | right。side_tools:  enable: true  position: right  # values: left | right# back to top# 回到顶部，位置可选 left | right。back2top:  enable: true  position: right  # values: left | right# Table of Contents in the Sidebar# 文章目录结构toc:  enable: true  # Automatically add list number to toc.  # 给文章目录自动加上序号。  number: true  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.  # 是否展开所有目录  expand_all: true# magic# magic 为 v1.1.0 增加的新特性，如果启用，主题样式将发生较大的改变。 magic:  enable: true  sidebar:    enable: false    fixed: true    position: right  # values: left | right\n\nComment 评论主题内置了 Valine 和 Gitalk 两款评论插件，你只能使用其他一款，如果两款评论插件的 enable 都设为了 true，将使用 Valine。\nValine前往 https://github.com/xCss/Valine 查看 Valine 如何使用，获取必要的参数，填写在配置文件里。\nGitalk\n在自己的 GitHub 账号下创建新的 OAuth App，链接：https://github.com/settings/applications/new ，Homepage URL 和 Authorization callback URL 均填写自己的域名即可。\n在自己的 GitHub 账号下创建新的 repository 并打开 Issues，用于存储评论内容。\n把自己的 GitHub 用户名称、repository 名称 、OAuth App 的 Client ID 、Client Secret 分别填写在主题配置文件里。\n\n前往 https://github.com/gitalk/gitalk 查看 Gitalk 更多信息。\nPost top 文章顶置实现文章顶置功能，需在 Hexo 博客根目录下安装插件 hexo-generator-index-pin-top。\nnpm install hexo-generator-index-pin-top\n\n然后在 _posts 文件夹里的需要顶置的文章页添加 top 属性，top 值越大，顶置越靠前，参考如下。\n---title: 千呼万唤始出来，Hexo 主题 ILS 正式发布date: 2020-04-07 21:55:14tags: [Hexo]categories: [Hexo]top: 9999---\n\nAdd page 添加页面Hexo 初始化没有 about、links、tag、category 等页面，需要自己手动创建。例如创建「关于」页面：\n\n在 Hexo 博客目录下执行命令\nhexo new page about\n创建成功后，打开博客目录下 /source/about/index.md 文件，即可填写内容。如下示例：\n---title: aboutdate: 2020-03-19 14:59:53comments: true---## About me- XPoet「 X诗人 」... .........\n\n\n\nFeedback 反馈在使用该主题过程中，如果遇到问题，请仔细阅读使用文档，或者给作者提 issue。\nLicence 许可MIT Copyright (c) 2020 XPoet\n","categories":["Hexo"],"tags":["Hexo"]},{"title":"macOS 使用 Navicat 连接 MySQL 数据库","url":"/2019/07/macOS%E4%BD%BF%E7%94%A8Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"安装 MySQL\n从 MySQL 官网下载安装包进行安装，链接：https://www.mysql.com/downloads/\n\n使用终端命令安装，需提前安装 Homebrew。\n\n安装 Homebrew/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n安装 MySQLbrew install mysql\n打开 MySQL 服务\n\n\n在终端使用命令 mysql --version 查看 MySQL 版本，出现具体的版本号，表示 MySQL 成功安装，如下图。\nmysql --version\n\n\n\n在终端使用命令 bash mysql.server start 来打开 MySQL 服务。如下图，表示 MySQL 服务启动成功。\nbash mysql.server start\n\n\n\n\n登录 MySQLMySQL 默认的 root 账户不带密码，使用命令 mysql -uroot 可直接登录，如下图，表示登录成功。\nmysql -uroot\n\n\n因为默认的 root 账户不带密码，安全起见，我们给 root 账户设置密码。（例如设置密码：123456）\nset password for &#39;root&#39;@&#39;localhost&#39;&#x3D;&#39;123456&#39;;\n\n\n密码设置成功后，再次登录时需要输入密码，如下命令。\nmysql -uroot -p&#39;123456&#39;\n\n\nNavicat 连接 MySQL点击 Navicat Premium 左上角的”连接”，选择” MySQL “，新建一个 MySQL 连接，参数如下，默认端口 3306。\n注：\n\n可使用命令 lsof -i:3306 查看 3306 端口是否被占用。\n如果点击”测试连接“发现连接不上，出现报错信息：2059 - Authentication plugin &#39;caching_sha2_password&#39; cannot be loaded: dlopen(../Frameworks/caching_.......错误原因是因为 MySQL 5.7 版本之后，默认验证方式由原来的 mysql_native_password 改成了 caching_sha2_password。只需把验证方式修改成原来的，就能连接上了。修改方法：登录 MySQL，执行命令：ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;\n\n\n","categories":["数据库"],"tags":["MySQL","Navicat"]},{"title":"Angular Material Dialog 拖拽功能的实现","url":"/2019/06/Angular-Material-Dialog-%E6%8B%96%E6%8B%BD%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/","content":"版本本案例使用的 Angular 7.x 版本，Material 7.x 版本，但不限于此版本。\n新建Angular指令新建指令命令：ng generate directive dialog-draggable\n\n\n指令中拖拽功能代码实现：\nimport &#123; Directive, HostListener, OnInit &#125; from '@angular/core';import &#123; MatDialogContainer, MatDialogRef &#125; from '@angular/material';import &#123; Subscription, fromEvent &#125; from 'rxjs';import &#123; takeUntil &#125; from 'rxjs/operators';export interface Position &#123;  x: number;  y: number;&#125;@Directive(&#123;  selector: '[dialog-draggable]'&#125;)export class DialogDraggableDirective implements OnInit &#123;  private _subscription: Subscription;  mouseStart: Position;  mouseDelta: Position;  offset: Position;  constructor(    private matDialogRef: MatDialogRef&lt;any&gt;,    private container: MatDialogContainer  ) &#123;  &#125;  ngOnInit() &#123;    this.offset = this._getOffset();    this._updatePosition(this.offset.y, this.offset.x);  &#125;  @HostListener('mousedown', ['$event'])  onMouseDown(event: MouseEvent) &#123;    this.mouseStart = &#123; x: event.pageX, y: event.pageY &#125;;    const mouseup$ = fromEvent(document, 'mouseup');    this._subscription = mouseup$.subscribe(() =&gt; this.onMouseup());    const mousemove$ = fromEvent(document, 'mousemove')      .pipe(takeUntil(mouseup$))      .subscribe((e: MouseEvent) =&gt; this.onMouseMove(e));    this._subscription.add(mousemove$);  &#125;  onMouseMove(event: MouseEvent) &#123;    this.mouseDelta = &#123; x: (event.pageX - this.mouseStart.x), y: (event.pageY - this.mouseStart.y) &#125;;    this._updatePosition(this.offset.y + this.mouseDelta.y, this.offset.x + this.mouseDelta.x);  &#125;  onMouseup() &#123;    if (this._subscription) &#123;      this._subscription.unsubscribe();      this._subscription = undefined;    &#125;    if (this.mouseDelta) &#123;      this.offset.x += this.mouseDelta.x;      this.offset.y += this.mouseDelta.y;    &#125;  &#125;  private _updatePosition(top: number, left: number) &#123;    this.matDialogRef.updatePosition(&#123;      top: top + 'px',      left: left + 'px'    &#125;);  &#125;  private _getOffset(): Position &#123;    const box = this.container['_elementRef'].nativeElement.getBoundingClientRect();    return &#123;      x: box.left + pageXOffset,      y: box.top + pageYOffset    &#125;;  &#125;&#125;\n\n在全局的CSS样式文件添加下面的CSS代码：\n[dialog-draggable] &#123;  margin: -24px -24px 20px -24px !important;  padding: 10px 24px;  background: #283593 !important;  color: #fff;  cursor: move;&#125;\n\n如何使用在Dialog组件中使用dialog-draggable指令即可实现窗口拖拽，如下\n&lt;h2 mat-dialog-title dialog-draggable&gt;  Angular Material Dialog Draggable&lt;/h2&gt;","categories":["Angular"],"tags":["Angular","Material"]},{"title":"小技巧：前端使用TS/JS生成永不重复的ID(uuid)","url":"/2018/11/%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8TS:JS%E7%94%9F%E6%88%90%E6%B0%B8%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84ID(uuid)/","content":"\n此方法非常简单，非常高效…\n\n废话不多说，直接上代码，本例使用TypeScript：\n/** * 巧妙利用随机数和时间戳随机生成一个不重复的ID（uuid） * @param randomLength&#123;number&#125; 截取随机数的长度 * @return &#123;string&#125; 不重复的字符串ID */export const getUuid = (randomLength: number = 5): string =&gt; &#123;  return Number(Math.random().toString().substr(2, randomLength) + Date.now()).toString(36);&#125;;\n\n","categories":["前端"],"tags":["Uuid"]},{"title":"在Mac下配置多个Git账户的SSH-Key","url":"/2018/07/%E5%9C%A8Mac%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit%E7%94%A8%E6%88%B7%E7%9A%84SSH-Key/","content":"准备工作请确保在你的Mac上已安装Git。安装Git请参考：传送门在终端输入命令$ git --version， 能打印出具体的版本号，表示Git正确安装。\n开始配置本文以配置GitHub和GitLab为案例，将生成两对公共/私有rsa密钥对，rsa_github 和 rsa_gitlab。\n在本地创建SSH-Key1、打开终端，$ cd ~，进入到当前用户目录下。  \n2、使用命令$ ssh-keygen -t rsa -C &quot;i@itpoet.cn&quot;生成公共/私有rsa密钥对。此时会看到终端提示输入要保存密钥的文件名，为了做区分，我们给文件名加个后缀，本例第一个rsa密钥对：rsa_github。接着会看到终端提示输入密码，敲两次 Enter回车键 则不需要密码。最终在 .ssh 文件夹 里生成 rsa_github 和 rsa_github.pub 两个文件，如图：注意：在 第2步 执行完后，如果用户目录下没有生成 .ssh 文件夹 ，那我们需要手动创建。  \n$ cd ~$ mkdir .ssh$ cd .ssh\n成功创建完 .ssh 文件夹 之后，再执行 第2步 操作。  \n3、创建本例的第二个rsa密钥对，rsa_gitlab。 \n$ cd .ssh$ ssh-keygen -t rsa -C \"a@itpoet.cn\"\n如图：  \n4、为ssh添加config配置文件，在 .ssh文件夹 下，新建config文件。  \n$ cd ~/.ssh$ touch config\nconfig文件创建好之后，\b将其内容\b修改为：\nHost github.com  User itPoet_github  IdentityFile ~&#x2F;.ssh&#x2F;rsa_githubHost gitlab.com  User itPoet_gitlab  IdentityFile ~&#x2F;.ssh&#x2F;rsa_gitlab\n\n5、配置 .gitconfig 文件。使用如下命令将会在用户目录下自动创建 .gitconfig 文件。\n$ cd ~$ git config --global user.name \"itPoet_github\"$ git config --global user.email \"i@itpoet.cn\"\n\n注意：在 第4步 执行完后，如果用户目录下没有生成 .gitconfig 文件 ，那我们需要手动创建。\n$ cd ~$ touch .gitconfig\n最后将.gitconfig文件的内容修改为：\n[user]    name &#x3D; itPoet_github    email &#x3D; i@itpoet.cn[user]    name &#x3D; itPoet_gitlab    email &#x3D; a@itpoet.cn\n在对应的Git网站\b添加SSH密钥设置1、 GitHubsettings –&gt; SSH and GPG keys –&gt; New SSH Key\b打开 rsa_github.pub，将里面的内容复制到 Key 输入框中，如图：如图：  \n2、 GitLabProfile –&gt; SSH keys\b打开 rsa_gitlab.pub，将里面的内容复制到 Key 输入框中，如图：如图：  \n至此，在Mac下配置多个Git账户的SSH-Key参考教程也完成，同理，我们还可以配置Coding、码云等。现在让我们来体验使用SSH\b提交代码吧~~\n","categories":["技术教程"],"tags":["Mac","Git","SSH-Key"]},{"title":"再见，也许就是再也不见","url":"/2018/04/%E5%86%8D%E8%A7%81%EF%BC%8C%E4%B9%9F%E8%AE%B8%E5%B0%B1%E6%98%AF%E5%86%8D%E4%B9%9F%E4%B8%8D%E8%A7%81/","content":"","categories":["散文集"],"tags":["散文","再见"]},{"title":"不朽的失眠","url":"/2018/03/%E4%B8%8D%E6%9C%BD%E7%9A%84%E5%A4%B1%E7%9C%A0/","content":"\n记得第一次见这篇文章出现在初中的语文书上，确确实实引起了我的共鸣，自此念念不忘，忽然感觉此刻很应景，收录此文。\n\n他落榜了！一千二百年前。榜纸那么大那么长，然而，就是没有他的名字。啊！竟单单容不下他的名字“张继”那两个字。  \n考中的人，姓名一笔一划写在榜单上，天下皆知。奇怪的是，在他的感觉里，考不上，才更是天下皆知，这件事，令他羞惭沮丧。\n离开京城吧！议好了价，他踏上小舟。本来预期的情节不是这样的，本来也许有插花游街、马蹄轻疾的风流，有衣锦还乡、袍笏加身的荣耀。然而，寒窗十年，虽有他的悬梁刺股，琼林宴上，却并没有他的一角席次。\n船行似风。\n江枫如火，在岸上举着冷冷的爝焰，这天黄昏，船，来到了苏州。但，这美丽的古城，对张继而言，也无非是另一个触动愁情的地方。\n如果说白天有什么该做的事，对一个读书人而言，就是读书吧！夜晚呢？夜晚该睡觉以便养足精神第二天再读。然而，今夜是一个忧伤的夜晚。今夜，在异乡，在江畔，在秋冷雁高的季节，容许一个落魄的士子放肆他的忧伤。江水，可以无限度地收纳古往今来一切不顺遂之人的泪水。\n这样的夜晚，残酷地坐着，亲自听自己的心正被什么东西啮食而一分一分消失的声音。并且眼睁睁地看自己的生命如劲风中的残灯，所有的力气都花在抗拒，油快尽了，微火每一刹那都可能熄灭。然而，可恨的是，终其一生，它都不曾华美灿烂过啊！\n江水睡了，船睡了，船家睡了，岸上的人也睡了。惟有他，张继，睡不着。夜愈深，愈清醒，清醒如败叶落余的枯树，似梁燕飞去的空巢。\n起先，是睡眠排拒的他。(也罢，这半生，不是处处都遭排拒吗？)而后，是他在赌气，好，无眠就无眠，长夜独醒，就干脆彻底来为自已验伤，有何不可？\n月亮西斜了，一副意兴阑珊的样子。有乌啼，粗嗄嘶哑，是乌鸦。那月亮被它一声声叫得更黯淡了。江岸上，想已霜结千草。夜空里，星子亦如清霜，一粒粒零落凄绝。\n在须角在眉梢，他感觉，似乎也森然生凉，那阴阴不怀好意的凉气啊，正等待凝成早秋的霜花，来贴缀他惨淡少年的容颜。\n江上渔火二三，他们在干什么？在捕鱼吧？或者，虾？他们也会有撒空网的时候吗？世路艰辛啊！即使潇洒的捕鱼的，也不免投身在风波里吧？然而，能辛苦工作，也是一种幸福吧！今夜，月自光其光，霜自冷其冷，安心的人在安眠，工作的人去工作。只有我张继，是天不管地不收的一个，是既没有权利去工作，也没福气去睡眠的一个……\n钟声响了，这奇怪的深夜的寒山寺钟声。一般寺庙，都是暮鼓晨钟，寒山寺庙敲“夜半钟”，用以惊世。钟声贴着水面传来，在别人，那声音只是睡梦中模糊的衬底音乐。在他，却一记一记都撞击在心坎上，正中要害。钟声那么美丽，但钟声自己到底是痛还是不痛呢？既然失眠，他推枕而起，摸黑写下“枫桥夜泊”四字。然后，就把其余二十八字照抄下来。我说“照抄”，是因为那二十八个字在他心底已像白墙上的黑字一样分明凸显：\n月落乌啼霜满天，江枫渔火对愁眠。\n姑苏城外寒山寺，夜半钟声到客船。\n感谢上苍，如果没有落第的张继，诗的历史上便少了一首好诗，我们的某一种心情，就没有人来为我们一语道破。\n一千二百年过去了，那张长长的榜单上（就是张继挤不进去的那纸金榜）曾经出现过的状元是谁？哈！管他是谁。真正被记得的名字是“落第者张继”。有人会记得那一届状元披红游街的盛景吗？不！我们只记得秋夜的客船上那个失意的人，以及他那场不朽的失眠。\n","categories":["文章收录"],"tags":["枫桥夜泊"]},{"title":"基于Node.js搭建Socket聊天室","url":"/2018/02/nodejs-build-socket-chartroom/","content":"前言可以毫不夸张的说，Node.js的出现带动了整个前端界的繁荣发展，自此进入百花齐放，百家争鸣的时代。时至今天，我们能用Node.js实现很多依靠传统服务器端编程语言才能实现的事，甚至更加简便、更加高效。本案例使用Node.js的net模块，建立服务端与客户端的Socket连接，简单实现了客户端广播消息通信和点对点通信。\n项目结构server.js 服务端项目下的server.js是服务端的执行文件，用于创建服务端的Socket服务，监听指定端口；接收客户端传过来的数据，解析数据并按照数据中附带的协议进行广播消息通信或点对点通信。具体代码如下：\n// Socket聊天室 - server 服务端const net = require('net');// 定义clients（键值对集合），用于存储所有的客户端连接，通过用户名去索引客户端socketlet clients = &#123;&#125;;let server = net.createServer((socket) =&gt; &#123;    // 客户端登入    function signin(clientDataContent) &#123;        clientDataContent = JSON.parse(clientDataContent);        let username = clientDataContent.from;        // 如果clients（客户端 socket 集合）中有1个以上的成员，就广播通知所有人谁谁上线了，除了他本身        if (Object.keys(clients).length) &#123;            let onlineNotice = &#123;  // 组成上线通知消息数据格式                protocol: 'online',                online: username,                onlineCount: Object.keys(clients).length + 1            &#125;;            // 遍历 clients ，给除了自身的所有客户端发送消息            for (let username in clients) &#123;                if (clients.hasOwnProperty(username)) &#123;                    let noticeClient = clients[username];                    noticeClient.write(JSON.stringify(onlineNotice));                &#125;            &#125;        &#125;        // 将新连接的客户端socket存储于clients        clients[username] = socket;        // 服务端打印上线提示消息        console.log(`欢迎 $&#123;socket.remoteAddress&#125;:$&#123;socket.remotePort&#125;【$&#123;username&#125;】，加入聊天室，当前在线：$&#123;Object.keys(clients).length&#125;`);    &#125;    // 广播消息通信    function broadcast(clientDataContent) &#123;        // 广播出去消息数据格式 json        let sendClientData = JSON.parse(clientDataContent);        // 遍历clients对象（for in），给所有的客户端socket广播消息        for (let username in clients) &#123;            if (clients.hasOwnProperty(username)) &#123;                let client = clients[username];                client.write(JSON.stringify(sendClientData));            &#125;        &#125;    &#125;    // p2p 点对点通信    function p2p(clientDataContent) &#123;        let p2pClientData = JSON.parse(clientDataContent);        // 给指定的客户端发送消息        clients[p2pClientData.to].write(JSON.stringify(p2pClientData));    &#125;    // 给每一个连接服务端的客户端socket注册data事件    socket.on('data', (chunk) =&gt; &#123;        try &#123;            // 对客户端传过来的数据chunk（json数据）进行序列化            let clientDataContent = chunk.toString().trim();            // 获取协议            let protocol = JSON.parse(clientDataContent).protocol;            switch (protocol) &#123;                case 'signin':                    signin(clientDataContent);                    break;                case 'broadcast':                    broadcast(clientDataContent);                    break;                case 'p2p':                    p2p(clientDataContent);                    break;                default:                    socket.write('错误！未能识别的通信协议！');                    break;            &#125;        &#125; catch (error) &#123;            socket.write('出现错误了哦~');            throw error;        &#125;    &#125;);    // 给每一个连接服务端的客户端socket注册error事件，如果连接中断，则触发此事件    socket.on('error', (error) =&gt; &#123;        // 在客户端对象中，将连接中断的那个客户端删除        let deletekey = null;        // 遍历clients对象，找到下线的socket，并将其删除        for (let username in clients) &#123;            if (clients.hasOwnProperty(username)) &#123;                let client = clients[username];                if (socket === client) deletekey = username;            &#125;        &#125;        delete clients[deletekey];        // 广播通知所有人，谁谁下线了        let offlineNotice = &#123;  // 组成下线通知消息数据格式            protocol: 'offline',            offline: deletekey,            onlineCount: Object.keys(clients).length        &#125;;        for (let username in clients) &#123;            if (clients.hasOwnProperty(username)) &#123;                let noticeClient = clients[username];                noticeClient.write(JSON.stringify(offlineNotice));            &#125;        &#125;        // server 消息        console.log(`$&#123;deletekey&#125; 下线了，当前在线：$&#123;Object.keys(clients).length&#125;`);    &#125;);&#125;);// 监听指定端口let port = 2018;server.listen(port, (error) =&gt; &#123;    if (error) &#123;        console.log(`$&#123;port&#125;端口被占用！`);    &#125; else &#123;        console.log(`服务器端正常启动，正在监听$&#123;port&#125;端口`);    &#125;&#125;);\n\n\nclient.js 客户端项目下的client.js是客户端的执行文件，用于创建客户端的Socket服务。将用户输入的内容按特定的格式组成数据结构发给服务端，同时打印出服务端指定的内容。具体代码如下：\n// Socket聊天室 - 客户端 clientconst net = require('net');const readline = require('readline');const rl = readline.createInterface(process.stdin, process.stdout);rl.question('请输入聊天昵称：', (nickname) =&gt; &#123;    nickname = nickname.trim();    if (!nickname) &#123;        throw new Error('昵称不能为空！');    &#125;    // 创建与服务端的连接    // 设置正确的服务端的ip地址和端口    let server = net.connect(&#123;port: 2018, host: '127.0.0.1'&#125;, () =&gt; &#123;        // 登入操作        let user = &#123;            protocol: 'signin',            from: nickname        &#125;;        // 往服务端传送数据        server.write(JSON.stringify(user));        console.log(`【系统通知】已成功加入聊天室，尽情畅聊吧~`);        // 监听服务端发送过来的数据        server.on('data', (chunk) =&gt; &#123;            try &#123;                let serverDataContent = JSON.parse(chunk.toString().trim());                let protocol = serverDataContent.protocol;                switch (protocol) &#123;                    case 'online':                        console.log(`\\n【系统通知】欢迎：$&#123;serverDataContent.online&#125;，加入聊天室，当前在线人数：$&#123;serverDataContent.onlineCount&#125;\\n`);                        rl.prompt();                        break;                    case 'offline':                        console.log(`\\n【系统通知】$&#123;serverDataContent.offline&#125;下线了，当前在线人数：$&#123;serverDataContent.onlineCount&#125;\\n`);                        rl.prompt();                        break;                    case 'broadcast':                        console.log(`\\n[@所有人] $&#123;serverDataContent.from&#125;&gt; $&#123;serverDataContent.message&#125;\\n`);                        rl.prompt();                        break;                    case 'p2p':                        console.log(`\\n[@$&#123;serverDataContent.to&#125;] $&#123;serverDataContent.from&#125;&gt; $&#123;serverDataContent.message&#125;\\n`);                        rl.prompt();                        break;                    default:                        server.write('错误！未能识别的通信协议！');                        break;                &#125;            &#125; catch (error) &#123;                server.write('出现错误了哦~');                throw error;            &#125;        &#125;);        rl.setPrompt(nickname + '&gt; ');  // 此时没有写入控制台        rl.prompt(); // 写入控制台        // 输入一行内容敲回车        rl.on('line', (line) =&gt; &#123;            line = line.toString().trim();            // 内容： user1:我只跟你说话  表示，客户端用户只跟user1通信            // 根据客户端用户输入的内容按“:”分割成两部分            let arrString = line.split(':');            let sendServerData = null;            // 组成往服务端发送的数据格式            if (arrString.length === 2) &#123;                // 点对点                sendServerData = &#123;                    protocol: 'p2p',                    from: nickname,                    to: arrString[0],                    message: arrString[1]                &#125;;            &#125; else &#123;                // 广播消息                sendServerData = &#123;                    protocol: 'broadcast',                    from: nickname,                    message: line                &#125;;            &#125;            // 往服务端发送数据            server.write(JSON.stringify(sendServerData));            rl.prompt(); // 写入控制台        &#125;);        rl.on('close', () =&gt; &#123;        &#125;);    &#125;);&#125;);\n\n实现功能目前已实现：客户端广播消息通信、点对点通信。\n项目使用\n启动服务端，$ node server.js\n启动第一个客户端，$ node client.js\n启动第二个客户端，$ node client.js\n……\n\n演示视频\n项目下载本案例源代码托管于GitHub，下载：传送门\n","categories":["前端"],"tags":["Node.js"]},{"title":"CSS实现元素垂直居中的几种方法","url":"/2018/02/css-vertical-center/","content":"\n以下几种CCS实现元素垂直居中的方法，均不考虑低版本浏览器。\n\n方法一：子绝父相（子元素绝对定位，父元素相对定位）1.1 不知道子元素高度和父元素高度的情况。\n.parentElement &#123;    position: relative;&#125;.childElement &#123;    position: absolute;    top: 50%;    transform: translateY(-50%);&#125;\n1.2 知道子元素高度和父元素高度的情况。\n.parentElement &#123;    position: relative;&#125;.childElement &#123;    position: absolute;    top: 0;    bottom: 0;    left: 0;    right: 0;    margin: auto;&#125;\n\n\n方法二：子元素相对定位父元素设置了高度，而且父元素里面只有一个子元素，可使用子元素相对定位。\n.parentElement &#123;    height: xxxx;&#125;.childElement &#123;    position: relative;    top: 50%;    transform: translateY(-50%);&#125;\n\n方法三：CSS3 flex 布局如果不考虑低版本浏览器兼容性，用CSS3的flex布局就非常简单咯。\n.parentElement &#123;    display: flex;    align-items: center;&#125;","categories":["前端"],"tags":["CSS","垂直居中"]},{"title":"使用ES6新特性实现数组去重","url":"/2018/01/es6-array-eliminate-redundancy/","content":"数组去重，对于前端开发者来说家常便饭的事，更是初学者必须掌握的知识，面试经常会考。\n数组去重相关的方法，网上已有很多，大多使用了ES6以前的方法，本文对于不作赘述。但随着各大浏览器对ES6的支持性越来越好，以及ES6新特性深入人心，更何况作为一名前端工程师，我们应该顺应时代潮流，推动JavaScript发展，所以，尽情地拥抱ES6吧。\n本文讲解使用ES6新特性实现数组去重的一种新方法，代码及其简短又高效。  \nJavaScript代码：/** @param arr 传入的参数：带有重复项的数组* */Array.from(new Set(arr));\n\n\n\n例子：/** @param oldArr 带有重复项的旧数组* @param newArr 去除重复项之后的新数组* */let oldArr = [1, 1, 1, 2, 3, 2, 4, 4, 4, 9, 9, 0, 0, NaN, NaN];let newArr = Array.from(new Set(oldArr));console.log(newArr);  // [1, 2, 3, 4, 9, 0, NaN]\n\n分析：Set对象Set对象允许存储任何类型的唯一值，无论是原始值或者是对象引用。它可以是任何类型的单个值的集合。Set中的元素只会出现一次，即Set中的元素是唯一的。语法：new Set([iterable]);参数：iterable，如果传递一个可迭代对象(包括 Array，Map，Set，String，TypedArray，arguments 对象等等)，它的所有元素将被添加到新的 Set中。如果不指定此参数或其值为null，则新的Set为空。\nSet对象例子let testArr = [0, 1, 1, 2, 3, 3, 3, 3, 4, NaN, NaN, undefined, undefined];let setTestArr = new Set(testArr);console.log(setTestArr);  // Set(6) &#123;1, 2, 3, 4, NaN, undefined&#125;\n\nfrom对象Array.from()方法从一个类似数组或可迭代的对象(包括 Array，Map，Set，String，TypedArray，arguments 对象等等) 中创建一个新的数组实例。\nfrom对象例子let testArr = [0, 1, 1, 2, 3, 3, 3, 3, 4, NaN, NaN, undefined, undefined];let setTestArr = new Set(testArr);console.log(setTestArr);  // &#123;1, 2, 3, 4, NaN, undefined&#125;let newArr = Array.from(setTestArr);console.log(newArr);  // [1, 2, 3, 4, NaN, undefined]\n\n使用ES6实现数组去重，就是如此简单，快去试试吧~\n","categories":["前端"],"tags":["数组去重","ES6"]},{"title":"使用gulp搭建前端自动化工作流环境（简易版）","url":"/2017/11/%E4%BD%BF%E7%94%A8Gulp%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81%EF%BC%88%E7%AE%80%E6%98%93%E7%89%88%EF%BC%89/","content":"\n本文通过简单且实用的案例，讲解使用gulp搭建前端自动化工作流环境详细步骤，带领大家快速入门。\n\n什么是gulp？来自官网的简介：Automate and enhance your workflow. gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something.  \n大致意思是讲gulp是一款自动化构建工具，可用于增强你的开发工作流程，提高工作效率！前端界的友友们，这个工具可不要错过了哟~\n了解更多信息，请前往： gulp官网 、 gulp中文网  \ngulp优点\n易于使用 通过代码优于配置的策略，gulp 让简单的任务简单，复杂的任务可管理。\n构建快速 利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。\n插件高质 gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。\n易于学习 通过最少的 API，掌握 gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。\n\n准备工作gulp依赖Node.js，参考本教程的朋友们，请先在本地环境安装好Node.js，并确认Node.js、npm可正常使用。\n步骤第一步 新建项目根文件夹(例：gulp-demo)，并在项目根目录下使用npm安装必要的包$ npm install gulp gulp-less gulp-concat gulp-cssnano gulp-uglify gulp-htmlmin browser-sync --save-dev\n\n本案例使用的gulp插件介绍：\n\ngulp-less 将less编译成css\ngulp-concat 将多个JavaScript合并\ngulp-cssnano css压缩\ngulp-uglify JavaScript压缩并混淆\ngulp-htmlmin html压缩\nbrowser-sync 多浏览器同步操作\n\n第二步 在项目根文件夹(例：gulp-demo)下创建相关的文件结构src [gulp编译之前的源文件]\ncss 我们在此处编写css文件\nimg 我们在此处放置图片文件\njs 我们在此处编写css文件\nindex1.html \nindex2.html\n…….\n\nnode_modules通过npm安装的包及其依赖包的库，自动生成文件夹。\ngulpfile.jsgulp的入口文件，我们在此处编写相关任务代码。\ndist [gulp编译之后的文件，即我们最终要得到文件]\ncss \nimg\njs\nindex.html\n\n项目目录结构图示\n第三步 在gulpfile.js文件里编写具体的任务代码载入所需要的模块'use strict';   // 启用JavaScript严格模式 var gulp = require('gulp');var less = require('gulp-less');var cssnano = require('gulp-cssnano');var concat = require('gulp-concat');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var browserSync = require('browser-sync');\n\nless编译、压缩// 定义LESS编译、压缩的任务：cssgulp.task('css', function () &#123;    gulp.src(['src/css/*.less', '!src/css/_*.less'])        .pipe(less())        .pipe(cssnano())        .pipe(gulp.dest('dist/css'))        .pipe(browserSync.reload(&#123;            stream: true        &#125;));&#125;);\n\nJavaScript合并、压缩、混淆// 定义多个JavaScript文件合并、压缩混淆的任务：jsgulp.task('js', function () &#123;    gulp.src('src/js/*.js')        .pipe(concat('index.js')) // JS合并之后，文件命名为index.js        .pipe(uglify())  // JS压缩混淆        .pipe(gulp.dest('dist/js'))        .pipe(browserSync.reload(&#123;            stream: true        &#125;));&#125;);\n\n将src文件夹下img图片复制到dist文件夹下img// 定义image复制的任务：imggulp.task('img', function () &#123;    gulp.src('src/img/*.*')        .pipe(gulp.dest('dist/img'))        .pipe(browserSync.reload(&#123;            stream: true        &#125;));&#125;);\n\nhtml代码压缩// 定义HTML压缩的任务：htmlgulp.task('html', function () &#123;    gulp.src('src/*.html')        .pipe(htmlmin(&#123;collapseWhitespace: true&#125;))        .pipe(gulp.dest('dist'))        .pipe(browserSync.reload(&#123;            stream: true        &#125;));&#125;);\n\n多浏览器同步操作，开启gulp监视文件变动// 定义浏览器同步操作服务的任务：browserSyncgulp.task('browserSync', function () &#123;    browserSync(&#123;        server: &#123;            baseDir: ['dist']        &#125;    &#125;, function (err, bs) &#123;        console.log(bs.options.getIn([\"urls\", \"local\"]));    &#125;);    // 开启gulp监视    gulp.watch('src/css/*.less', ['css']);  // less文件改动时，执行css任务    gulp.watch('src/js/*.js', ['js']);  // js文件改动时，执行js任务    gulp.watch('src/img/*.*', ['img']);  // image文件改动时，执行img任务    gulp.watch('src/*.html', ['html']);  // html文件改动时，执行html任务&#125;);\n\n使用\n1 $ gulp css LESS 编译 压缩 合并\n2 $ gulp js JavaScript 合并 压缩 混淆\n3 $ gulp img image 复制\n4 $ gulp html HTML 压缩\n5 $ gulp browserSync 多浏览器同步操作，gulp监视JS/CSS/HTML文件改变\n\n到此，基于gulp的前端自动化工作流环境搭建完成，以下使用视频教程。\n点击此处，下载本案例源代码\n","categories":["前端"],"tags":["Gulp","前端自动化"]},{"title":"快速掌握 Markdown 基础语法","url":"/2017/10/quickly-master-the-markdown-basic-syntax/","content":"什么是 Markdown ？Markdown 是一种「轻量级标记语言」，用途广泛，其使用简洁的语法代替常见的排版格式，从而能使我们专心于写作，在最大程度上提高效率。Markdown 的语法十分简单，常用的标记符号也不超过十个，学习成本极低，一旦熟悉这种语法规则，将会有一劳永逸的效果。  \n\nWe believe that writing is about content, about what you want to say – not about fancy formatting.我们坚信写作写的是内容，所思所想，而不是花样格式。\n\n使用 Markdown 的优点\n专注你的文字内容而不是排版样式；\n纯文本内容，兼容所有的文本编辑器；\n可读、直观、通用性高、学习成本低；  \n轻松导出 HTML 、PDF 等格式的文件；  \n随时可修改 .md 文件，不会因版本问题导致格式混乱；\n\nMarkdown 语法规则标题标记符 #标题是文章最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只需在这段文字前加 # 标记符。例如：# 一级标题## 二级标题### 三级标题……以此类推，共六级标题，对应 HTML 的 h1 ~ h6。注意：# 和文字之间需加一个空格。\n \n字体加粗标记符 ** 或 __在需要表示为粗体的文字内容，用两个 ** 或 __ 标记符包裹。例如：**字体加粗** 或 __字体加粗__\n \n斜体标记符 * 或 _在需要表示为斜体的文字内容，用两个 * 或 _ 标记符包裹。例如：*斜体* 或 _斜体_\n \n引用标记符 &gt;只需在引用的文字内容前面加上 &gt; 标记符，就可以出现引用的效果。例如：&gt; 我是引用的句子哦\n\n列表无序列表标记符 - 或 + 或 *在需要表示为无序列表的文字前加 - 或 + 或 * 标记符。\n\n有序列表标记符 1. 或 2. 或 3. ……在需要表示为有序列表的文字前面添加加 1. 或 2. 或 3. …… 标记符。\n  \n链接标记符 []()在 Markdown 中，插入链接，例如：[XPoet Blog](https://xtpoet.cn)\n\n图片标记符 ![]()图片示例：![aliyun](https://img.alicdn.com/tfs/TB1Ly5oS3HqK1RjSZFPXXcwapXa-238-54.png)\n\n代码单行代码标记符 `  `需要引用代码时，如果引用的代码只有一行，可以用两个 ` 标记符将代码包裹起来。例如：\n\n多行代码标记符：```  ```多行代码，用两个 ``` 标记符将代码块包裹起来。例如：\n\n分割线标记符：*** 或 --- 或 ___插入分割线，在一行中用三个以上的 * 或 - 或 _ 标记符来建立一个分隔线，行内不能有其他内容，分隔符独占一行。\n删除线标记符：~~在需要添加删除线的文字内容，用两个 ~~ 标记符包裹。例如：~~ABC~~ ABC\n换行标记符： 两个空格符 加 回车在 Markdown 中进行换行，需在文字后面键入 两个空格符 加 回车。\n表格在 Markdown 中插入表格的标记符比较复杂，大家直接看效果，需要用到时过来复制代码。\n默认表格样式参考代码：\nColName1 | ColName2 | ColName3---------|----------|---------ColValue | ColValue | ColValueColValue | ColValue | ColValueColValue | ColValue | ColValueColValue | ColValue | ColValue\n\n效果如下：\n\n\n\nColName1\nColName2\nColName3\n\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\n表格列调整表格的列位置调整（默认左对齐，:------: 居中，------: 右对齐）参考代码：\n|ColName1 | ColName2 | ColName3||---------|:--------:|--------:||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue||ColValue | ColValue | ColValue|\n\n效果如下：\n\n\n\nColName1\nColName2\nColName3\n\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\nColValue\nColValue\nColValue\n\n\n由于不同平台的 Markdown CSS 存在差异，实际显示效果跟本文也会有所不同。\n","categories":["技术教程"],"tags":["Markdown"]},{"title":"触动心灵的六句古诗词","url":"/2017/10/%E8%A7%A6%E5%8A%A8%E5%BF%83%E7%81%B5%E7%9A%84%E5%85%AD%E5%8F%A5%E5%8F%A4%E8%AF%97%E8%AF%8D/","content":"\n人生若只如初见，何事秋风悲画扇。 ——纳兰性德 《木兰词·拟古决绝词柬友》\n\n很多时候，初见，惊艳。蓦然回首，却已是物是人非，曾经沧海，只怕早已换了桑田。短短的一句话，道尽人生多少悲凉，道尽人生多少无奈。如果所有往事都能化为红尘一笑，只留下初见时的倾情、惊艳，忘却也许有过的背叛、伤怀，这是何等美妙的人生境界。若只是初见，一切美好都不会遗失。  \n\n曾经沧海难为水，除却巫山不是云。 ——元稹 《离思（其四）》\n\n曾读此诗难为诗，因为这句诗把人对某种生死之恋的刻骨铭心写绝了。在记忆之海里继续沉浸，在往事里打捞沉落的星辰月光，直至那昔年的沧海也将自己渐渐淹没。难道真的是沧海巫山之后，便再无水和云了？所以，不要太早遇见心上的他/她，万一你捉不住他/她，将一辈子都活在这句诗句里。  \n\n人面不知何处去，桃花依旧笑春风。 ——崔护 《题都城南庄》\n\n心爱的人不知道去哪了？只留下桃花却依然微笑，在春风中绽放。以笑映悲，道尽心中悲楚，令人不禁感慨万千。若干年后，我们是否也会有如此遭遇呢？  \n\n众里寻她千百度，蓦然回首，那人却在，灯火阑珊处。 ——辛弃疾 《青玉案·元夕》\n\n我千百次寻找，等待的那个人还没有出现。我的心充满疲惫和失落，不经意一回首，却发现她就在那灯火寥落的地方静静地站着。很多时候，我们总是在往阴暗处去寻找我们心中的她，却总不见其影踪，蓦然回首，才发现她其实一直就在我们的身边，离我们只有一个转身的距离。  \n\n衣带渐宽终不悔，为伊消得人憔悴。 ——柳永 《蝶恋花》\n\n无可替代的思念，无怨无悔的执着，脸庞的瘦削，颧骨的高突，身上的青衫也变得宽松了，但从没有后悔这一切皆因对她无边的思念而起，心甘情愿为爱饱受煎熬。这无尽的思念、无尽的爱，人世间又有谁能承受的起呢？   \n\n纵使相逢应不识，尘满面，鬓如霜。 ——苏轼 《江城子·乙卯正月二十日夜记梦》\n\n即使相逢也料想不会认识，因为我四处奔波，灰尘满面，鬓发如霜。这恐怕是每个一人最害怕的结果，若是不见也就罢了，若是相见，却互不认识，就这样在岁月里蹉跎地擦肩而过，那该是多么令人心碎的一幕。  \n后记： 沧海桑田，浩瀚的历史长河中，触动我心灵的古诗词又怎么可能只有这六句呢？\n","categories":["诗词人生"],"tags":["诗词"]},{"title":"醉眼天涯 花香满衣","url":"/2017/10/%E9%86%89%E7%9C%BC%E5%A4%A9%E6%B6%AF-%E8%8A%B1%E9%A6%99%E6%BB%A1%E8%A1%A3/","content":"在忽然惊醒的夜凉里，挨着秋天的衣袖，独坐如莲。灯半笼，更阑。\n夜雾已经烹煮成一壶茶，不饮。相思已经倾斜成箫，不吹。只在梦的边缘，等你叩门的绝响。\n我的思念，是你前世遗忘采撷而无法成熟的青果。不舍那未了的情缘，我才执意轮回世间。单薄的形骸幻化成一树瘦梅，等你在必经的路旁。依旧是前世那一袭清绝的白衣，期待成为你不期而至的风景。拥有你一刻完整凝眸，即便错失整个花季，我也欣然坠落，腐化为泥。是什么将我的回眸捂上？烟色的记忆里，总不见你寻路而来，陪我，垂钓月光。\n洪荒的纪事已远，恍若隔世的约定风一般不着形迹，最放心不下的，还是你。为你点燃的浣花诗灯一盏一盏次第而亮，为你酝酿的柔情千顷一寸一寸绿满天涯。\n三界内，所有的花树静静的迎候岁月，唯我轻衫飘飘、暗香盈盈，等你在岁月的对岸。你不来，我不敢老去。静夜里如此的思念，真的会把你惊醒?\n今夜，你终于顺着长长的夜路，踏响我长满青苔的小径。苔痕斑驳的门扉，洞箫细碎的长廊,有谁的心事穿袜行走，莲步轻移。\n握着你的一唇冰凉，隔世的故事碎玉满地。心疼你单衣试酒的落寞孤寒，为你一弦独操，陪你独立霜降的寒凉。用素帕细细为你抹去肩头发上的霜，拢你的一袖寒凉……\n剪烛西窗。一卷心情，一壶淡酒，一阙宫商。单薄的素衣，不耐乍暖还寒的雨季。此刻，你停泊在哪一隅的夜凉里？\n谁替你烘干夜露沾湿的薄衫，笑你花香满衣。谁如我前世一般卷帘相问：可看见月的香馨？何处是港湾？青山麓，碧水旁，黄昏沙滩？寂寞沙洲寒。\n空相对，远山，远水……残红，无寐……  \n","categories":["诗词人生"],"tags":["诗词"]}]